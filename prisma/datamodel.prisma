# The main persistence model of ABIS. See "alloy/model.als" for more details.
type ContentEncoding {
    id: ID! @id @unique
    type: EncodingType!

    maintainer: ID!     # The Agent that maintains the schema

    createdBy: ID!
    createdAt: DateTime! @createdAt

    updatedBy: ID
    updatedAt: DateTime @updatedAt

    name: String!
    charset: String!
    language: String

    data: String
}

enum EncodingType {
    Custom
    Base64
    Microformat
    TableSchema
    JsonSchema
    XmlSchema
    GqlSchema
    RdfSchema
    Owl
}

type Entry {
    # NOTE: All Entries must be in the "entries"-list of exactly one Group

    id: ID! @id @unique
    type: EntryType!

    owner: ID!

    createdBy: ID!
    createdAt: DateTime! @createdAt

    updatedBy: ID
    updatedAt: DateTime @updatedAt

    name: String

    content: Json
    contentEncoding: ID

    tags: [Tag!]!
}

enum EntryType {
    Empty
    Json
    Table
    Document
    Picture
    File
    Thing
}

type Group {
    # NOTE: The "owner" of a Group cannot be member of that Group.
    # NOTE: No Group has Memberships which haven't been created either by the group owner or a member of the group.
    # NOTE: No Group has more than one Membership of type "Single" for the same User
    # NOTE: No Group has a Membership of type "Single" for a User that is already owner of that Group.
    # NOTE: No Group contains a "Single"-, as well as a "Multi"-Membership for the same User.
    # NOTE: No Group contains exactly one "Multi"-Membership of a User who's not the owner of that Group
    # NOTE: No Group has more than one Membership with the same "member".

    id: ID! @id @unique
    type: GroupType!

    # owners cannot be members in the groups they own
    owner: ID!

    createdBy: ID!
    createdAt: DateTime! @createdAt

    updatedBy: ID
    updatedAt: DateTime @updatedAt

    isPublic: Boolean! # Only valid for "type == GroupType.Room"
    memberships: [Membership!]!

    name: String!
    title: String
    description: String
    logo: String!
    banner: String

    entries: [Entry!]!
    inbox: ID # Only "Room"s have Agents of type 'Inbox'

    tags: [Tag!]!
}

enum GroupType {
    # Stash: A private space.
    # NOTE: A group of this type must have no memberships.
    # NOTE: No stash contains Entries from an "owner" other than the Stash-"owner".
    Stash

    # Channel: A uni-directional way to the communicate between two Agents.
    #          If two Agents want to communicate bi-directional,
    #          there must be two channels. One per direction and Agent.
    #          In the UI, the two channels should be joined together and
    #          ordered by creation timestamp of their Entries.
    # NOTE: A Channel always has exactly one Membership.
    # NOTE: All Channel-Memberships must be created by the Channel-owner.
    # NOTE: There must be no two Channels with the same "owner" and "membership" combination.
    # NOTE: No Channel contains Entries from an "owner" other than the Channel-"owner".
    Channel

    # Room: A public or closed Group of Agents.
    # NOTE: Every Room has a Inbox.
    # NOTE: No not-public Room has Memberships that have been self-created by (creator == member).
    Room
}

type Membership {
    # NOTE: Every Membership must be exactly in one Group.

    id: ID! @id @unique
    type: MembershipType!

    # The MembershipStatus (status) -field and enum have been removed
    # because now Group-owners can handle their Membership-requests via
    # the Groups' Inbox.

    createdBy: ID!
    createdAt: DateTime! @createdAt

    updatedBy: ID
    updatedAt: DateTime @updatedAt

    member: Agent!

    showHistory: Boolean!
}

enum MembershipType {
    Invite,
    # Single: Indicates that a User has only one Membership
    #         via a "Profile"- or "Service"-Agent in the same Group.
    Single,
    # Multi: Indicates that a User has multiple Memberships
    #        via a "Profile"- or "Service"-Agent in the same Group.
    Multi
}

type Agent {
    id: ID! @id @unique
    type: AgentType!

    implementation: String!     # specifies which code should be executed as "live"-representation of this agent

    owner: ID!

    createdBy: ID!
    createdAt: DateTime! @createdAt

    updatedBy: ID
    updatedAt: DateTime @updatedAt

    name: String!
    status: AgentStatus!

    timezone: String    # User's timezone is used when this field is null
    location: Location @relation(link: INLINE)

    # Only when "type == AgentType.Profile":
    profileSlogan: String
    profileAvatar: String
    profileJobTitle: String
    profileBanner: String
    profileType: ProfileType

    # Only when "type == AgentType.Service":
    serviceDescription: String

    # Only when "type == AgentType.Inbox":
    inboxDescription: String
}

enum AgentType {
    # Profile: An Agent that represents a User.
    # NOTE: Every Profile has at least one Stash.
    Profile
    # Service: An Agent that represents some kind of service that a User provides to a Group.
    #          A service Agent must have exactly one Membership at any time.
    #          If it looses its Membership, the Service ends.
    #          A service Membership can only be created by a Profile.
    # NOTE: There can be no service without exactly one Membership.
    # NOTE: There can be no service which Membership wasn't created by a Profile.
    Service
    Inbox
}

enum AgentStatus {
    # Only if "Agent.type == AgentType.Profile"
	Offline
	DoNotDisturb
	Away
	Available

    # Only if "Agent.type == AgentType.Service"
    Running
    Suspended
    Failed
    Succeeded

    # Only if "Agent.type == AgentType.Inbox"
    Open
    Closed
}

enum ProfileType {
    Business
    Private
    Anonymous
}

type User {
    # NOTE: All Users must have at least one Profile.

    id: ID! @id @unique
    type: UserType!

    createdAt: DateTime! @createdAt
    updatedAt: DateTime @updatedAt

    email: String! @unique
    timezone: String!

    challenge: String
    # "isVerified" was removed. The user is always verified when there is no "challenge".
    passwordSalt: String
    passwordHash: String

    agents: [Agent!]!
    sessions: [Session!]!

    firstName: String
    lastName: String
    phone: String
    mobilePhone: String
    organizationName: String
}

enum UserType {
    Person
    System
}

type Session {
 	id: ID! @id @unique

 	createdAt: DateTime! @createdAt
 	updatedAt: DateTime @updatedAt

 	sessionToken: String! @unique
 	csrfToken: String
 	bearerToken: String
 	clientTime:String

 	validTo: DateTime!

 	timedOut: DateTime
 	loggedOut: DateTime

 	user: User!
 	agent: Agent!

 	location: Location
 	ipAddress: String
}

type Tag {
    id: ID! @id @unique
    type: String!

    owner: ID!

    createdBy: ID!
    createdAt: DateTime! @createdAt

   	value: String!
}

type Location {
    id: ID! @id @unique
    type: LocationType!

    owner: ID!

    createdBy: ID!
    createdAt: DateTime! @createdAt

    updatedBy: ID
    updatedAt: DateTime @updatedAt

	name: String

	# Only if "type == LocationType.OpenStreetMap":
	osmNodeId: String

	# Only if "type == LocationType.Address":
	addressLine1: String
	addressLine2: String
	addressCity: String
	addressZipCode: String
	addressCountry: String

    # Only if "type == LocationType.GeoPoint":
	geoPointLatitude: Float
	geoPointLongitude: Float
	geoPointRadiusMeter: Float

	tags: [Tag!]!
}

enum LocationType {
    OpenStreetMap
    Address
    GeoPoint
}
