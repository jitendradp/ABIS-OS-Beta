# An entity to login a person to the system
type User {
	id: ID! @id @unique
	createdAt: DateTime! @createdAt
	updatedAt: DateTime @updatedAt
	firstName: String!                                      # The first name of the person
	lastName: String!										# The family name of the person
	timezone: String!										# The user's local timezone
	email: String! @unique									# Common digital identity
	password_salt: String!									# Adding a random string to the password hash
	password_hash: String!									# A Fully hashed password including salt e.g. bcrypt
	is_verified: Boolean!									# The user's email address was verified or not
	challenge: String										# An additional string for e.g. verify email, second login factor etc.
	profiles: [Profile!]!									# The type of the user's profiles for billing
	sessions: [Session!]!                                   # Links to the sessions generated by this user
	lastUsedProfileId: String                               # The last used profile id to active that profile after the login
}

type Session {
	id: ID! @id @unique
	createdAt: DateTime! @createdAt
	updatedAt: DateTime @updatedAt
	csrfToken: String! @unique
	authToken: String! @unique
	validTo: DateTime!
	timedOut: DateTime
	loggedOut: DateTime
	user: User!
	profile: Profile
}

# Represents a user or bot in groups
type Profile {
	id: ID! @id @unique
	createdAt: DateTime! @createdAt
	updatedAt: DateTime @updatedAt
	name: String!											# The profile's name that is displayed in groups
	timezone: String										# The profile's local timezone can be overwritten from the user timezone here
	status: StatusType!                                     # Every profile has a current status
	type: ProfileType!                                      # The user can set a type for this profile
	is_hidden: Boolean!	                                    # If true, then the profile can't be found within the global search
	is_bot: Boolean!                                        # Indicates if the profile is a human or machine
	slogan: String											# A slogan of the profile that is displayed in groups
	picture: String!										# The url of a path to an image file
	memberships: [Membership!]!								# The memberships of that profile in groups
	location: Location										# A location in the real world
}

enum StatusType {
	Busy											        # The profile is available but notification is turned off
	Offline					    							# The profile is offline so not reachable
	Online											        # The profile is online and reachable
	Away												    # The profile is off the keyboard but notification is turned on
}

enum ProfileType {
	Work											        # A work profile costs a monthly licensing fee
	Private					    							# A private profile is free of charge
}

# The profile is participating in a group
type Membership {
	id: ID! @id @unique
	createdAt: DateTime! @createdAt
	updatedAt: DateTime @updatedAt
	can_read: Boolean!                                      # The profile can read and access resources from that group
	can_write: Boolean!                                     # The profile can write on that group
	can_delete: Boolean!                                    # The profile can delete items in that group or the group
	member: Profile!										# The profile either bot or human
	group: Group!											# The group where the profile is a member of
	show_history: Boolean!									# To show a new member the history of messages
}

# Groups resources, events and messages around profiles
type Group {
	id: ID! @id @unique
	createdAt: DateTime! @createdAt
	updatedAt: DateTime @updatedAt
	host: Profile!											# The host profile of the group
	name: String!											# The name of the group
	title: String!											# A prominent title what the group is about
	description: String!									# A short description what the group is about
	logo: String!											# The url to an image file that makes it easier to recognize the group
    type: GroupType!									    # Different types of groups
	parent: Group											# A group that has no parent is root
	is_hidden: Boolean!										# When true, the group is invisible for all other profiles outside that group
	is_public: Boolean!										# When true, any profile outside that group is allowed to join it
	members: [Membership!]!									# Profiles that are participating in that group
	messages: [Message!]!									# Events with a specific content
	tags: String											# Meta information as hashes to classify the group
	location: Location										# A location in the real world
}

enum GroupType {
	DATASPACE											    # The actual storage that hosts data
	DATASET                                                 # A specific view on a dataspace that can be shared in channels
	ROOM					    							# A chat room that hosts a group of people and conversations
    CHANNEL                                                 # Groups messages and events around at least two profiles
	THREAD												    # Groups messages around a specific conversation in a channel
	FRIENDS												    # Groups friends of a profile
}

type Location {
	id: ID! @id @unique
	createdAt: DateTime! @createdAt
	updatedAt: DateTime! @updatedAt							# Every location was uniquely tagged by someone
	name: String											# A name that was given for a certain location
	latitude: Float!										# Locates a point on a map from north to south
	longitude: Float!										# Locates a point on a map from east to west
	radius: Float											# The radius from the center of the location in meters
}

# Any content that was sent from a sender to a recipient
type Message {
	id: ID! @id @unique
	createdAt: DateTime! @createdAt
	updatedAt: DateTime @updatedAt
	sender: Profile!										# The profile who created the message
	type: MessageType!										# Indicates the purpose of the message
	parent: Message 										# A previous event, if not then root
	subject: String											# A human readable subject for a message
	content: Json											# The content of a message can be anything or empty
	attachments: [Attachment!]!								# A url to a file that is attached to the message
	reactions: [Reaction!]!									# A event can trigger multiple reactions such as likes
	tags: String											# Meta information as hashes to classify the message
}

# All data exchanged is expressed as an "event"
enum MessageType {
	NOTIFICATION											# A prominent information that is pushed to the user
	DIRECT_MESSAGE											# The user profiles receives a direct chat message
	COMMENT												    # A message as comment on another message within a thread
	POST												    # Drops a message on a channel
	CHART_FLAG											    # A message with a link to a filtered chart can be dropped in a channel or thread
	TRAIL
}

# Profiles can react on messages
type Reaction {
	id: ID! @id @unique
	createdAt: DateTime! @createdAt
	updatedAt: DateTime @updatedAt
	creator: Profile!										# The profile who reacted on some event (davepatrickchang)
	emoji: String!											# A symbol to express an emotion ("thumbs::+1")
}

# Something that can be attached to a message
type Attachment {
	id: ID! @id @unique
	createdAt: DateTime! @createdAt
	updatedAt: DateTime @updatedAt
	createdBy: Profile!										# The profile who created the attachment (Bot 123)
	name: String!											# The name of the attached object (ExcelSheet12354)
	type: AttachmentType!									# Categorizes the attachment (DOCUMENT)
	link: String											# The unique url to access the attached object  (./path/excelsheet12354.xls)
	tags: String											# Meta information for search ("Entwicklung", "Plannung", "Team")
	location: Location										# A location in the real world has to be set to store the data there (Munich)
}

# Classifies the attached file
enum AttachmentType {
	DOCUMENT											    # Could be a flat file or pdf that was uploaded
	PICTURE												    # Could be a chart visualization rendered a picture
	LINK												    # Could a link that was posted in the message's content
	VIDEO												    # Could be a video that was added to the content
	AUDIO												    # Could be a voice memo that was added to the content
}

#
# Portfolios
#
type Asset {
    id: ID! @id
    name: String!
}

type Exchange {
    id: ID! @id
    name: String!

    assets:[Asset!]!
}

enum TransactionDirection {
    BUY,
    SELL
}

type Transaction {
    id: ID! @id
    timestamp:DateTime!                                     # When was the transaction performed?
    profile: Profile!                                       # Who performed the transaction?
    asset:Asset!                                            # What asset was included in the transaction?
    direction:TransactionDirection!                         # Buy or Sell?
    exchange:Exchange!                                      # Where took the transaction place?
    amount:Float!                                           # How much units of [asset] have been traded?
}

type Portfolio {
    id: ID! @id
    owner: Profile!
    name: String!

    transactions:[Transaction!]!
}
