# An entity to login a person to the system
type User {
	id: ID! @id @unique
	createdAt: DateTime! @createdAt
	updatedAt: DateTime @updatedAt
	parent: User                                            # When another user has invited this user to the system
	firstName: String!                                      # The first name of the person
	lastName: String!										# The family name of the person
	timezone: String!										# The user's local timezone
	email: String! @unique									# A common digital identity
	mobilePhone: String                                     # Adding a second information for the identity
	passwordSalt: String!									# Adding a random string to the password hash
	passwordHash: String!									# A fully hashed password including salt e.g. bcrypt
	isVerified: Boolean!									# The user's email address was verified or not
	challenge: String       								# An additional string for e.g. verify email, second login factor etc.
	profiles: [Profile!]!									# The type of the user's profiles for billing
	sessions: [Session!]!                                   # Links to the sessions generated by this user
}

type Session {
	id: ID! @id @unique
	createdAt: DateTime! @createdAt
	updatedAt: DateTime @updatedAt
	csrfToken: String! @unique
	authToken: String! @unique
	validTo: DateTime!
	timedOut: DateTime
	loggedOut: DateTime
	user: User!                                             # The logged-in user. For security there can only be one user session active at the same time
	lastUsedProfile: Profile!                               # The profile that was used before closing that session
	location: Location										# A location in the real world to identify where the user has logged in from
	lastIpAddress: String                                   # The ip address that last used this session
}

# Represents an user or bot in groups
type Profile {
	id: ID! @id @unique
	createdAt: DateTime! @createdAt
	updatedAt: DateTime @updatedAt
	creator: User!                                          # The user that created and owns that profile
	name: String!											# The profile's name that is displayed in groups
	timezone: String										# The profile's local timezone could be overwritten from the user's timezone here
	status: StatusType!                                     # Every profile has a current status
	type: ProfileType!                                      # The user can set a type for this profile
	isHidden: Boolean!	                                    # If true, then the profile can't be found within the global search
	isBot: Boolean!                                         # Indicates if the profile is a human or a machine
	slogan: String											# A slogan of the profile that is displayed in groups
	pictureAvatar: String!									# The url to an image file for the avatar. There is always an default image.
	pictureBanner: String									# The url to an image file for the banner
	memberships: [Membership!]! 							# The memberships of that profile in groups
}

enum StatusType {
	BUSY											        # The profile is available but notification has been turned off
	OFFLINE					    							# The profile is offline so not reachable
	ONLINE											        # The profile is online and reachable
	AWAY												    # The profile is off the keyboard but notification is turned on
}

enum ProfileType {
	WORK											        # A work profile costs a monthly licensing fee
	PRIVATE					    							# A private profile is free of charge
}

# A profile is participating in a group
type Membership {
	id: ID! @id @unique
	createdAt: DateTime! @createdAt
	updatedAt: DateTime @updatedAt
	parent: Membership                                      # A profile that has invited this profile to a group
	member: Profile!                                        # The profile either bot or human
	isBlocked: Boolean!                                     # A parent profile is able to block this profile e.g. from sending spam
	group: Group!											# The group where the profile is a member of
	groupPinned: Boolean!                                   # The profile could pin a group to the top
	showHistory: Boolean!									# To show a new member the history of messages
	hasLeft: Boolean!                                       # If the profile has left or has been removed from a group
	hasJoined: Boolean!                                     # If an invited profile has joined the group
}

# Groups resources and events around profiles
type Group {
	id: ID! @id @unique
	createdAt: DateTime! @createdAt
	updatedAt: DateTime @updatedAt
	creator: Profile!										# The host profile of this group has all rights for the group
	name: String!											# The name of the group
	title: String											# An optional, prominent short title, what the group is about
	description: String  									# An optional, detailed description what the group is about
	pictureLogo: String!    								# An image file path. A default picture is required
	pictureBanner: String                                   # An optional larger image for the group
    type: GroupType!									    # Different types of groups
	parent: Group											# A group that has no parent is root
	isHidden: Boolean!										# When true, the group is invisible for all other profiles outside that group
	isPublic: Boolean!										# When true, any profile outside that group is allowed to join it
	members: [Membership!]!									# Profiles that are participating in that group
	events: [Event!]!									    # Events with a specific content
	tags: [Tag!]!											# Meta information as hashes to classify this object
	location: Location										# A location in the real world
	membersCount: Int!                                      # The number of total members in that group
	membersOnline: Int!                                     # The number of actual members that are online right now
	eventsCount: Int!                                       # The number of the total events that have occurred in that group
}

enum GroupType {
	ROOM					    							# A chat room that hosts a group of people and conversations
    CHANNEL                                                 # Groups messages and events around at least two profiles
	THREAD												    # Groups messages around a specific conversation in a channel
	CONTACTS												# Groups contacts of a profile
	FOLLOWERS                                               # Groups followers of a profile
}

type Tag {
   	id: ID! @id @unique
   	createdAt: DateTime! @createdAt
	creator: Profile!										# The profile who created the tag
   	name: String!                                           # The tag content itself
   	parents: [Tag!]!                                        # Parent tags to build some hierarchie and relationships
}

type Location {
	id: ID! @id @unique
	createdAt: DateTime! @createdAt                         # Every location was uniquely tagged by someone
	updatedAt: DateTime! @updatedAt                         # The information of that location has been changed
	creator: Profile!										# The profile who created that location
	type: LocationType!										# If the place is a concept of a place
	name: String!											# A name that was given for a certain location
	category: String                                        # For example a park, restaurant, school, etc.
	address: String                                         # The official address of that location
	zipCode: String                                         # The official zip code of that location
	city: String                                            # The official name of the city that owns this location
	country: String                                         # The country that owns that location
	continent: String                                       # The continent where the country is located
	planet: String                                          # The planet that owns the continent by default earth
	latitude: Float!										# Locates a point on a map from north to south
	longitude: Float!										# Locates a point on a map from east to west
	radiusMeter: Float										# The radius from the center of the location in meters
	tags: [Tag!]!											# Meta information as hashes to classify the object
	visitorsCount: Int!                                     # The total number of users that have visited this location
}

enum LocationType {
    GEOGRAPHIC,
    POI
}

type Event {
    id: ID! @id @unique
 	createdAt: DateTime! @createdAt
 	parent: Event                                           # A previous event, if not then root
 	creator: Profile!                                       # The profile that triggered this event
 	type: EventType!                                        # Indicates the purpose of this event
 	isPinned: Boolean!                                      # For example an message can be pinned by a user profile
 	isRead: Boolean!                                        # For example when an event type message was read by the profile
	content: Json											# The content of an event can be anything or empty
 	location: Location!                                     # The location where the event has occurred
	tags: [Tag!]!											# Meta information as hashes to classify the object
}

# All data exchanged is expressed as an "event"
enum EventType {
	NOTIFICATION											# A prominent information that is pushed to the user
	DIRECT_MESSAGE											# The user profiles receives a direct chat message
	COMMENT												    # A message as comment on another message within a thread
	POST												    # Drops a message on a channel e.g. newsfeed
	REACTION                                                # A profile can react on an event
}