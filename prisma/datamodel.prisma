# An entity to login a person to the system
type User {
	id: ID! @id @unique
	createdAt: DateTime! @createdAt
	updatedAt: DateTime @updatedAt
	firstName: String!                                      # The first name of the person
	lastName: String!										# The family name of the person
	timezone: String!										# The user's local timezone ("UTC +0")
	email: String! @unique									# Common digital identity ("john.doe@abis-cloud.com")
	password_salt: String!									# Adding a random string to the password hash (*****)
	password_hash: String!									# A Fully hashed password including salt (bcrypt)
	is_verified: Boolean!									# The user's email address was verified ("true")
	challenge: String										# When set, additional string (e.g. verify email, second login factor etc.)
	profiles: [Profile!]!									# The user's profiles (work; private)
	sessions: [Session!]!                                   # Links to the sessions generated by this user
	lastUsedProfileId: String                               # The last used profile id to active that profile after the login
}

type Session {
	id: ID! @id @unique
	createdAt: DateTime! @createdAt
	updatedAt: DateTime @updatedAt
	csrfToken: String! @unique
	authToken: String! @unique
	validTo: DateTime!
	timedOut: DateTime
	loggedOut: DateTime
	user: User!
	profile: Profile
}

# Represents a user or bot in groups
type Profile {
	id: ID! @id @unique
	createdAt: DateTime! @createdAt
	updatedAt: DateTime @updatedAt
	name: String!											# The profile's display name
	timezone: String										# The profile's local timezone ("UTC +0" - if not set, the user's timezone should be used)
	status: StatusType!                                     # Every profile has a current status
	type: ProfileType!                                      # The user can set a type for this profile
	is_hidden: Boolean!	                                    # If true, then the profile can't be found within the global search
	is_bot: Boolean!                                        # Indicates if the profile is a human or machine
	slogan: String											# A displayed slogan as text ("Exploring the world ::coffee::")
	picture: String!										# The url of a path to an image file ("./path/file.png")
	memberships: [Membership!]!								# Memberships in groups (chaos; general)
	location: Location										# A location in the real world has to be set to store the data there (Munich)
}

enum StatusType {
	Busy											        # The profile is available but notification is turned off
	Offline					    							# The profile is offline so not reachable
	Online											        # The profile is online and reachable
	Away												    # The profile is off the keyboard but notification is turned on
}

enum ProfileType {
	Work											        # A work profile costs money
	Private					    							# A private profile is free of charge
}

# Groups where users or bots are member of
type Membership {
	id: ID! @id @unique
	createdAt: DateTime! @createdAt
	updatedAt: DateTime @updatedAt
	member: Profile!										# The profile either bot or human
	group: Group!											# The group where the profile is a member of
	show_history: Boolean!									# To show a new member the history of messages
}

# A unique space that groups resources, events and messages around user and bot profiles
type Group {
	id: ID! @id @unique
	createdAt: DateTime! @createdAt
	updatedAt: DateTime @updatedAt
	host: Profile!											# The host profile of the group
	name: String!											# The name of the group
	title: String!											# A optional title what the group is about
	description: String!									# A short description what the group is about
	logo: String!											# The url of a path to an image file ("./path/file-logo.png")
    type: GroupType!									    # Different types or groups (e.g. Channel)
	parent: Group											# A group that has no parent is root
	is_hidden: Boolean!										# Is invisible for all other profiles outside this group ("false")
	is_public: Boolean!										# Anyone can view and join your group ("false")
	members: [Membership!]!									# Participants of this group (johanhenning; danieljanz)
	messages: [Message!]!									# Old and new communication (NOTIFICATION, COMMENT)
	tags: String											# Meta information for search ("Entwicklung", "Plannung", "Team")
	location: Location										# A location in the real world has to be set to store the data there (Munich)
}

enum GroupType {
	DATASPACE											    # Groups smart app instances, users and bots around a unique data storage
	TEAM					    							# Groups profiles to provide and access resources from a dataspace
	CHANNEL                                                 # Groups threads, messages and events around multiple profiles
	THREAD												    # Groups comments on a message in a channel
	CONVERSATION											# Groups messages and events around at least two profiles
	FRIENDS												    # Groups friends of a profile
}

type Location {
	id: ID! @id @unique
	createdAt: DateTime! @createdAt
	updatedAt: DateTime! @updatedAt							# Every location was uniquely tagged by someone
	name: String											# A name that was given for a certain location
	latitude: Float!										# Locates a point on a map from north to south
	longitude: Float!										# Locates a point on a map from east to west
	radius: Float											# The radius from the center of the location in meter
}

# Content that is sent from a sender to a recipient
type Message {
	id: ID! @id @unique
	createdAt: DateTime! @createdAt
	updatedAt: DateTime @updatedAt
	sender: Profile!										# The profile who created the message (Bot 123)
	type: MessageType!										# Indicates the purpose of the message (NOTIFICATION)
	parent: Message 										# A previous event if not then root (POST)
	subject: String											# A human readable subject for a message ("I found a new dimension!")
	content: Json											# The content of a message can be anything or empty ("Hello Dave here is...")
	attachments: [Attachment!]!								# A can contain items (LINK; DOCUMENT)
	reactions: [Reaction!]!									# A event can trigger multiple reactions (+1; Like)
	tags: String											# Meta information for search ("Entwicklung", "Plannung", "Team")
	location: Location										# A location in the real world has to be set to store the data there (Munich)
}

# All data exchanged is expressed as an "event"
enum MessageType {
	NOTIFICATION											# A prominent information that is pushed to the user
	DIRECT_MESSAGE											# The user profiles receives a direct chat message
	COMMENT												    # A message that is commenting an other message within a thread
	POST												    # Drop something on a group
	CHART_FLAG											    # Send a new chart flag into a dashboard channel
	TRAIL
}

# Profiles can react on messages
type Reaction {
	id: ID! @id @unique
	createdAt: DateTime! @createdAt
	updatedAt: DateTime @updatedAt
	creator: Profile!										# The profile who reacted on some event (davepatrickchang)
	emoji: String!											# A symbol to express an emotion ("thumbs::+1")
}

# Something that can be attached to a message
type Attachment {
	id: ID! @id @unique
	createdAt: DateTime! @createdAt
	updatedAt: DateTime @updatedAt
	createdBy: Profile!										# The profile who created the attachment (Bot 123)
	name: String!											# The name of the attached object (ExcelSheet12354)
	type: AttachmentType!									# Categorizes the attachment (DOCUMENT)
	link: String											# The unique url to access the attached object  (./path/excelsheet12354.xls)
	tags: String											# Meta information for search ("Entwicklung", "Plannung", "Team")
	location: Location										# A location in the real world has to be set to store the data there (Munich)
}

# Classifies the attached file
enum AttachmentType {
	DOCUMENT											    # Could be a flat file or pdf that was uploaded
	PICTURE												    # Could be a chart visualization rendered a picture
	LINK												    # Could a link that was posted in the message's content
	VIDEO												    # Could be a video that was added to the content
	AUDIO												    # Could be a voice memo that was added to the content
}

#
# Portfolios
#
type Asset {
    id: ID! @id
    name: String!
}

type Exchange {
    id: ID! @id
    name: String!

    assets:[Asset!]!
}

enum TransactionDirection {
    BUY,
    SELL
}

type Transaction {
    id: ID! @id
    timestamp:DateTime!                                     # When was the transaction performed?
    profile: Profile!                                       # Who performed the transaction?
    asset:Asset!                                            # What asset was included in the transaction?
    direction:TransactionDirection!                         # Buy or Sell?
    exchange:Exchange!                                      # Where took the transaction place?
    amount:Float!                                           # How much units of [asset] have been traded?
}

type Portfolio {
    id: ID! @id
    owner: Profile!
    name: String!

    transactions:[Transaction!]!
}
