// Code generated by Prisma (prisma@1.34.3). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  event: (where?: EventWhereInput) => Promise<boolean>;
  group: (where?: GroupWhereInput) => Promise<boolean>;
  location: (where?: LocationWhereInput) => Promise<boolean>;
  membership: (where?: MembershipWhereInput) => Promise<boolean>;
  profile: (where?: ProfileWhereInput) => Promise<boolean>;
  session: (where?: SessionWhereInput) => Promise<boolean>;
  tag: (where?: TagWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  event: (where: EventWhereUniqueInput) => EventNullablePromise;
  events: (args?: {
    where?: EventWhereInput;
    orderBy?: EventOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Event>;
  eventsConnection: (args?: {
    where?: EventWhereInput;
    orderBy?: EventOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => EventConnectionPromise;
  group: (where: GroupWhereUniqueInput) => GroupNullablePromise;
  groups: (args?: {
    where?: GroupWhereInput;
    orderBy?: GroupOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Group>;
  groupsConnection: (args?: {
    where?: GroupWhereInput;
    orderBy?: GroupOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => GroupConnectionPromise;
  location: (where: LocationWhereUniqueInput) => LocationNullablePromise;
  locations: (args?: {
    where?: LocationWhereInput;
    orderBy?: LocationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Location>;
  locationsConnection: (args?: {
    where?: LocationWhereInput;
    orderBy?: LocationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => LocationConnectionPromise;
  membership: (where: MembershipWhereUniqueInput) => MembershipNullablePromise;
  memberships: (args?: {
    where?: MembershipWhereInput;
    orderBy?: MembershipOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Membership>;
  membershipsConnection: (args?: {
    where?: MembershipWhereInput;
    orderBy?: MembershipOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => MembershipConnectionPromise;
  profile: (where: ProfileWhereUniqueInput) => ProfileNullablePromise;
  profiles: (args?: {
    where?: ProfileWhereInput;
    orderBy?: ProfileOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Profile>;
  profilesConnection: (args?: {
    where?: ProfileWhereInput;
    orderBy?: ProfileOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ProfileConnectionPromise;
  session: (where: SessionWhereUniqueInput) => SessionNullablePromise;
  sessions: (args?: {
    where?: SessionWhereInput;
    orderBy?: SessionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Session>;
  sessionsConnection: (args?: {
    where?: SessionWhereInput;
    orderBy?: SessionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => SessionConnectionPromise;
  tag: (where: TagWhereUniqueInput) => TagNullablePromise;
  tags: (args?: {
    where?: TagWhereInput;
    orderBy?: TagOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Tag>;
  tagsConnection: (args?: {
    where?: TagWhereInput;
    orderBy?: TagOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => TagConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createEvent: (data: EventCreateInput) => EventPromise;
  updateEvent: (args: {
    data: EventUpdateInput;
    where: EventWhereUniqueInput;
  }) => EventPromise;
  updateManyEvents: (args: {
    data: EventUpdateManyMutationInput;
    where?: EventWhereInput;
  }) => BatchPayloadPromise;
  upsertEvent: (args: {
    where: EventWhereUniqueInput;
    create: EventCreateInput;
    update: EventUpdateInput;
  }) => EventPromise;
  deleteEvent: (where: EventWhereUniqueInput) => EventPromise;
  deleteManyEvents: (where?: EventWhereInput) => BatchPayloadPromise;
  createGroup: (data: GroupCreateInput) => GroupPromise;
  updateGroup: (args: {
    data: GroupUpdateInput;
    where: GroupWhereUniqueInput;
  }) => GroupPromise;
  updateManyGroups: (args: {
    data: GroupUpdateManyMutationInput;
    where?: GroupWhereInput;
  }) => BatchPayloadPromise;
  upsertGroup: (args: {
    where: GroupWhereUniqueInput;
    create: GroupCreateInput;
    update: GroupUpdateInput;
  }) => GroupPromise;
  deleteGroup: (where: GroupWhereUniqueInput) => GroupPromise;
  deleteManyGroups: (where?: GroupWhereInput) => BatchPayloadPromise;
  createLocation: (data: LocationCreateInput) => LocationPromise;
  updateLocation: (args: {
    data: LocationUpdateInput;
    where: LocationWhereUniqueInput;
  }) => LocationPromise;
  updateManyLocations: (args: {
    data: LocationUpdateManyMutationInput;
    where?: LocationWhereInput;
  }) => BatchPayloadPromise;
  upsertLocation: (args: {
    where: LocationWhereUniqueInput;
    create: LocationCreateInput;
    update: LocationUpdateInput;
  }) => LocationPromise;
  deleteLocation: (where: LocationWhereUniqueInput) => LocationPromise;
  deleteManyLocations: (where?: LocationWhereInput) => BatchPayloadPromise;
  createMembership: (data: MembershipCreateInput) => MembershipPromise;
  updateMembership: (args: {
    data: MembershipUpdateInput;
    where: MembershipWhereUniqueInput;
  }) => MembershipPromise;
  updateManyMemberships: (args: {
    data: MembershipUpdateManyMutationInput;
    where?: MembershipWhereInput;
  }) => BatchPayloadPromise;
  upsertMembership: (args: {
    where: MembershipWhereUniqueInput;
    create: MembershipCreateInput;
    update: MembershipUpdateInput;
  }) => MembershipPromise;
  deleteMembership: (where: MembershipWhereUniqueInput) => MembershipPromise;
  deleteManyMemberships: (where?: MembershipWhereInput) => BatchPayloadPromise;
  createProfile: (data: ProfileCreateInput) => ProfilePromise;
  updateProfile: (args: {
    data: ProfileUpdateInput;
    where: ProfileWhereUniqueInput;
  }) => ProfilePromise;
  updateManyProfiles: (args: {
    data: ProfileUpdateManyMutationInput;
    where?: ProfileWhereInput;
  }) => BatchPayloadPromise;
  upsertProfile: (args: {
    where: ProfileWhereUniqueInput;
    create: ProfileCreateInput;
    update: ProfileUpdateInput;
  }) => ProfilePromise;
  deleteProfile: (where: ProfileWhereUniqueInput) => ProfilePromise;
  deleteManyProfiles: (where?: ProfileWhereInput) => BatchPayloadPromise;
  createSession: (data: SessionCreateInput) => SessionPromise;
  updateSession: (args: {
    data: SessionUpdateInput;
    where: SessionWhereUniqueInput;
  }) => SessionPromise;
  updateManySessions: (args: {
    data: SessionUpdateManyMutationInput;
    where?: SessionWhereInput;
  }) => BatchPayloadPromise;
  upsertSession: (args: {
    where: SessionWhereUniqueInput;
    create: SessionCreateInput;
    update: SessionUpdateInput;
  }) => SessionPromise;
  deleteSession: (where: SessionWhereUniqueInput) => SessionPromise;
  deleteManySessions: (where?: SessionWhereInput) => BatchPayloadPromise;
  createTag: (data: TagCreateInput) => TagPromise;
  updateTag: (args: {
    data: TagUpdateInput;
    where: TagWhereUniqueInput;
  }) => TagPromise;
  updateManyTags: (args: {
    data: TagUpdateManyMutationInput;
    where?: TagWhereInput;
  }) => BatchPayloadPromise;
  upsertTag: (args: {
    where: TagWhereUniqueInput;
    create: TagCreateInput;
    update: TagUpdateInput;
  }) => TagPromise;
  deleteTag: (where: TagWhereUniqueInput) => TagPromise;
  deleteManyTags: (where?: TagWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  event: (
    where?: EventSubscriptionWhereInput
  ) => EventSubscriptionPayloadSubscription;
  group: (
    where?: GroupSubscriptionWhereInput
  ) => GroupSubscriptionPayloadSubscription;
  location: (
    where?: LocationSubscriptionWhereInput
  ) => LocationSubscriptionPayloadSubscription;
  membership: (
    where?: MembershipSubscriptionWhereInput
  ) => MembershipSubscriptionPayloadSubscription;
  profile: (
    where?: ProfileSubscriptionWhereInput
  ) => ProfileSubscriptionPayloadSubscription;
  session: (
    where?: SessionSubscriptionWhereInput
  ) => SessionSubscriptionPayloadSubscription;
  tag: (
    where?: TagSubscriptionWhereInput
  ) => TagSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type TagOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "name_ASC"
  | "name_DESC";

export type StatusType = "BUSY" | "OFFLINE" | "ONLINE" | "AWAY";

export type SessionOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "csrfToken_ASC"
  | "csrfToken_DESC"
  | "authToken_ASC"
  | "authToken_DESC"
  | "validTo_ASC"
  | "validTo_DESC"
  | "timedOut_ASC"
  | "timedOut_DESC"
  | "loggedOut_ASC"
  | "loggedOut_DESC"
  | "lastIpAddress_ASC"
  | "lastIpAddress_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "firstName_ASC"
  | "firstName_DESC"
  | "lastName_ASC"
  | "lastName_DESC"
  | "timezone_ASC"
  | "timezone_DESC"
  | "email_ASC"
  | "email_DESC"
  | "mobilePhone_ASC"
  | "mobilePhone_DESC"
  | "passwordSalt_ASC"
  | "passwordSalt_DESC"
  | "passwordHash_ASC"
  | "passwordHash_DESC"
  | "isVerified_ASC"
  | "isVerified_DESC"
  | "challenge_ASC"
  | "challenge_DESC";

export type ProfileOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "name_ASC"
  | "name_DESC"
  | "timezone_ASC"
  | "timezone_DESC"
  | "status_ASC"
  | "status_DESC"
  | "type_ASC"
  | "type_DESC"
  | "isHidden_ASC"
  | "isHidden_DESC"
  | "isBot_ASC"
  | "isBot_DESC"
  | "slogan_ASC"
  | "slogan_DESC"
  | "pictureAvatar_ASC"
  | "pictureAvatar_DESC"
  | "pictureBanner_ASC"
  | "pictureBanner_DESC";

export type GroupOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "name_ASC"
  | "name_DESC"
  | "title_ASC"
  | "title_DESC"
  | "description_ASC"
  | "description_DESC"
  | "pictureLogo_ASC"
  | "pictureLogo_DESC"
  | "pictureBanner_ASC"
  | "pictureBanner_DESC"
  | "type_ASC"
  | "type_DESC"
  | "isHidden_ASC"
  | "isHidden_DESC"
  | "isPublic_ASC"
  | "isPublic_DESC"
  | "membersCount_ASC"
  | "membersCount_DESC"
  | "membersOnline_ASC"
  | "membersOnline_DESC"
  | "eventsCount_ASC"
  | "eventsCount_DESC";

export type ProfileType = "WORK" | "PRIVATE";

export type GroupType =
  | "ROOM"
  | "CHANNEL"
  | "THREAD"
  | "CONTACTS"
  | "FOLLOWERS";

export type LocationType = "GEOGRAPHIC" | "POI";

export type EventType =
  | "NOTIFICATION"
  | "DIRECT_MESSAGE"
  | "COMMENT"
  | "POST"
  | "REACTION";

export type EventOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "type_ASC"
  | "type_DESC"
  | "isPinned_ASC"
  | "isPinned_DESC"
  | "isRead_ASC"
  | "isRead_DESC"
  | "content_ASC"
  | "content_DESC";

export type LocationOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "type_ASC"
  | "type_DESC"
  | "name_ASC"
  | "name_DESC"
  | "category_ASC"
  | "category_DESC"
  | "address_ASC"
  | "address_DESC"
  | "zipCode_ASC"
  | "zipCode_DESC"
  | "city_ASC"
  | "city_DESC"
  | "country_ASC"
  | "country_DESC"
  | "continent_ASC"
  | "continent_DESC"
  | "planet_ASC"
  | "planet_DESC"
  | "latitude_ASC"
  | "latitude_DESC"
  | "longitude_ASC"
  | "longitude_DESC"
  | "radiusMeter_ASC"
  | "radiusMeter_DESC"
  | "visitorsCount_ASC"
  | "visitorsCount_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type MembershipOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "isBlocked_ASC"
  | "isBlocked_DESC"
  | "groupPinned_ASC"
  | "groupPinned_DESC"
  | "showHistory_ASC"
  | "showHistory_DESC"
  | "hasLeft_ASC"
  | "hasLeft_DESC"
  | "hasJoined_ASC"
  | "hasJoined_DESC";

export interface UserUpdateDataInput {
  parent?: Maybe<UserUpdateOneInput>;
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  timezone?: Maybe<String>;
  email?: Maybe<String>;
  mobilePhone?: Maybe<String>;
  passwordSalt?: Maybe<String>;
  passwordHash?: Maybe<String>;
  isVerified?: Maybe<Boolean>;
  challenge?: Maybe<String>;
  profiles?: Maybe<ProfileUpdateManyWithoutCreatorInput>;
  sessions?: Maybe<SessionUpdateManyWithoutUserInput>;
}

export type EventWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface GroupCreateWithoutMembersInput {
  id?: Maybe<ID_Input>;
  creator: ProfileCreateOneInput;
  name: String;
  title?: Maybe<String>;
  description?: Maybe<String>;
  pictureLogo: String;
  pictureBanner?: Maybe<String>;
  type: GroupType;
  parent?: Maybe<GroupCreateOneInput>;
  isHidden: Boolean;
  isPublic: Boolean;
  events?: Maybe<EventCreateManyInput>;
  tags?: Maybe<TagCreateManyInput>;
  location?: Maybe<LocationCreateOneInput>;
  membersCount: Int;
  membersOnline: Int;
  eventsCount: Int;
}

export interface SessionUpdateWithoutUserDataInput {
  csrfToken?: Maybe<String>;
  authToken?: Maybe<String>;
  validTo?: Maybe<DateTimeInput>;
  timedOut?: Maybe<DateTimeInput>;
  loggedOut?: Maybe<DateTimeInput>;
  lastUsedProfile?: Maybe<ProfileUpdateOneRequiredInput>;
  location?: Maybe<LocationUpdateOneInput>;
  lastIpAddress?: Maybe<String>;
}

export interface GroupCreateOneInput {
  create?: Maybe<GroupCreateInput>;
  connect?: Maybe<GroupWhereUniqueInput>;
}

export interface MembershipUpdateDataInput {
  parent?: Maybe<MembershipUpdateOneInput>;
  member?: Maybe<ProfileUpdateOneRequiredWithoutMembershipsInput>;
  isBlocked?: Maybe<Boolean>;
  group?: Maybe<GroupUpdateOneRequiredWithoutMembersInput>;
  groupPinned?: Maybe<Boolean>;
  showHistory?: Maybe<Boolean>;
  hasLeft?: Maybe<Boolean>;
  hasJoined?: Maybe<Boolean>;
}

export interface GroupCreateInput {
  id?: Maybe<ID_Input>;
  creator: ProfileCreateOneInput;
  name: String;
  title?: Maybe<String>;
  description?: Maybe<String>;
  pictureLogo: String;
  pictureBanner?: Maybe<String>;
  type: GroupType;
  parent?: Maybe<GroupCreateOneInput>;
  isHidden: Boolean;
  isPublic: Boolean;
  members?: Maybe<MembershipCreateManyWithoutGroupInput>;
  events?: Maybe<EventCreateManyInput>;
  tags?: Maybe<TagCreateManyInput>;
  location?: Maybe<LocationCreateOneInput>;
  membersCount: Int;
  membersOnline: Int;
  eventsCount: Int;
}

export interface GroupWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  creator?: Maybe<ProfileWhereInput>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  pictureLogo?: Maybe<String>;
  pictureLogo_not?: Maybe<String>;
  pictureLogo_in?: Maybe<String[] | String>;
  pictureLogo_not_in?: Maybe<String[] | String>;
  pictureLogo_lt?: Maybe<String>;
  pictureLogo_lte?: Maybe<String>;
  pictureLogo_gt?: Maybe<String>;
  pictureLogo_gte?: Maybe<String>;
  pictureLogo_contains?: Maybe<String>;
  pictureLogo_not_contains?: Maybe<String>;
  pictureLogo_starts_with?: Maybe<String>;
  pictureLogo_not_starts_with?: Maybe<String>;
  pictureLogo_ends_with?: Maybe<String>;
  pictureLogo_not_ends_with?: Maybe<String>;
  pictureBanner?: Maybe<String>;
  pictureBanner_not?: Maybe<String>;
  pictureBanner_in?: Maybe<String[] | String>;
  pictureBanner_not_in?: Maybe<String[] | String>;
  pictureBanner_lt?: Maybe<String>;
  pictureBanner_lte?: Maybe<String>;
  pictureBanner_gt?: Maybe<String>;
  pictureBanner_gte?: Maybe<String>;
  pictureBanner_contains?: Maybe<String>;
  pictureBanner_not_contains?: Maybe<String>;
  pictureBanner_starts_with?: Maybe<String>;
  pictureBanner_not_starts_with?: Maybe<String>;
  pictureBanner_ends_with?: Maybe<String>;
  pictureBanner_not_ends_with?: Maybe<String>;
  type?: Maybe<GroupType>;
  type_not?: Maybe<GroupType>;
  type_in?: Maybe<GroupType[] | GroupType>;
  type_not_in?: Maybe<GroupType[] | GroupType>;
  parent?: Maybe<GroupWhereInput>;
  isHidden?: Maybe<Boolean>;
  isHidden_not?: Maybe<Boolean>;
  isPublic?: Maybe<Boolean>;
  isPublic_not?: Maybe<Boolean>;
  members_every?: Maybe<MembershipWhereInput>;
  members_some?: Maybe<MembershipWhereInput>;
  members_none?: Maybe<MembershipWhereInput>;
  events_every?: Maybe<EventWhereInput>;
  events_some?: Maybe<EventWhereInput>;
  events_none?: Maybe<EventWhereInput>;
  tags_every?: Maybe<TagWhereInput>;
  tags_some?: Maybe<TagWhereInput>;
  tags_none?: Maybe<TagWhereInput>;
  location?: Maybe<LocationWhereInput>;
  membersCount?: Maybe<Int>;
  membersCount_not?: Maybe<Int>;
  membersCount_in?: Maybe<Int[] | Int>;
  membersCount_not_in?: Maybe<Int[] | Int>;
  membersCount_lt?: Maybe<Int>;
  membersCount_lte?: Maybe<Int>;
  membersCount_gt?: Maybe<Int>;
  membersCount_gte?: Maybe<Int>;
  membersOnline?: Maybe<Int>;
  membersOnline_not?: Maybe<Int>;
  membersOnline_in?: Maybe<Int[] | Int>;
  membersOnline_not_in?: Maybe<Int[] | Int>;
  membersOnline_lt?: Maybe<Int>;
  membersOnline_lte?: Maybe<Int>;
  membersOnline_gt?: Maybe<Int>;
  membersOnline_gte?: Maybe<Int>;
  eventsCount?: Maybe<Int>;
  eventsCount_not?: Maybe<Int>;
  eventsCount_in?: Maybe<Int[] | Int>;
  eventsCount_not_in?: Maybe<Int[] | Int>;
  eventsCount_lt?: Maybe<Int>;
  eventsCount_lte?: Maybe<Int>;
  eventsCount_gt?: Maybe<Int>;
  eventsCount_gte?: Maybe<Int>;
  AND?: Maybe<GroupWhereInput[] | GroupWhereInput>;
  OR?: Maybe<GroupWhereInput[] | GroupWhereInput>;
  NOT?: Maybe<GroupWhereInput[] | GroupWhereInput>;
}

export interface MembershipCreateManyWithoutGroupInput {
  create?: Maybe<
    MembershipCreateWithoutGroupInput[] | MembershipCreateWithoutGroupInput
  >;
  connect?: Maybe<MembershipWhereUniqueInput[] | MembershipWhereUniqueInput>;
}

export interface EventWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  parent?: Maybe<EventWhereInput>;
  creator?: Maybe<ProfileWhereInput>;
  type?: Maybe<EventType>;
  type_not?: Maybe<EventType>;
  type_in?: Maybe<EventType[] | EventType>;
  type_not_in?: Maybe<EventType[] | EventType>;
  isPinned?: Maybe<Boolean>;
  isPinned_not?: Maybe<Boolean>;
  isRead?: Maybe<Boolean>;
  isRead_not?: Maybe<Boolean>;
  location?: Maybe<LocationWhereInput>;
  tags_every?: Maybe<TagWhereInput>;
  tags_some?: Maybe<TagWhereInput>;
  tags_none?: Maybe<TagWhereInput>;
  AND?: Maybe<EventWhereInput[] | EventWhereInput>;
  OR?: Maybe<EventWhereInput[] | EventWhereInput>;
  NOT?: Maybe<EventWhereInput[] | EventWhereInput>;
}

export interface MembershipCreateWithoutGroupInput {
  id?: Maybe<ID_Input>;
  parent?: Maybe<MembershipCreateOneInput>;
  member: ProfileCreateOneWithoutMembershipsInput;
  isBlocked: Boolean;
  groupPinned: Boolean;
  showHistory: Boolean;
  hasLeft: Boolean;
  hasJoined: Boolean;
}

export interface SessionWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  csrfToken?: Maybe<String>;
  csrfToken_not?: Maybe<String>;
  csrfToken_in?: Maybe<String[] | String>;
  csrfToken_not_in?: Maybe<String[] | String>;
  csrfToken_lt?: Maybe<String>;
  csrfToken_lte?: Maybe<String>;
  csrfToken_gt?: Maybe<String>;
  csrfToken_gte?: Maybe<String>;
  csrfToken_contains?: Maybe<String>;
  csrfToken_not_contains?: Maybe<String>;
  csrfToken_starts_with?: Maybe<String>;
  csrfToken_not_starts_with?: Maybe<String>;
  csrfToken_ends_with?: Maybe<String>;
  csrfToken_not_ends_with?: Maybe<String>;
  authToken?: Maybe<String>;
  authToken_not?: Maybe<String>;
  authToken_in?: Maybe<String[] | String>;
  authToken_not_in?: Maybe<String[] | String>;
  authToken_lt?: Maybe<String>;
  authToken_lte?: Maybe<String>;
  authToken_gt?: Maybe<String>;
  authToken_gte?: Maybe<String>;
  authToken_contains?: Maybe<String>;
  authToken_not_contains?: Maybe<String>;
  authToken_starts_with?: Maybe<String>;
  authToken_not_starts_with?: Maybe<String>;
  authToken_ends_with?: Maybe<String>;
  authToken_not_ends_with?: Maybe<String>;
  validTo?: Maybe<DateTimeInput>;
  validTo_not?: Maybe<DateTimeInput>;
  validTo_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  validTo_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  validTo_lt?: Maybe<DateTimeInput>;
  validTo_lte?: Maybe<DateTimeInput>;
  validTo_gt?: Maybe<DateTimeInput>;
  validTo_gte?: Maybe<DateTimeInput>;
  timedOut?: Maybe<DateTimeInput>;
  timedOut_not?: Maybe<DateTimeInput>;
  timedOut_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  timedOut_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  timedOut_lt?: Maybe<DateTimeInput>;
  timedOut_lte?: Maybe<DateTimeInput>;
  timedOut_gt?: Maybe<DateTimeInput>;
  timedOut_gte?: Maybe<DateTimeInput>;
  loggedOut?: Maybe<DateTimeInput>;
  loggedOut_not?: Maybe<DateTimeInput>;
  loggedOut_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  loggedOut_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  loggedOut_lt?: Maybe<DateTimeInput>;
  loggedOut_lte?: Maybe<DateTimeInput>;
  loggedOut_gt?: Maybe<DateTimeInput>;
  loggedOut_gte?: Maybe<DateTimeInput>;
  user?: Maybe<UserWhereInput>;
  lastUsedProfile?: Maybe<ProfileWhereInput>;
  location?: Maybe<LocationWhereInput>;
  lastIpAddress?: Maybe<String>;
  lastIpAddress_not?: Maybe<String>;
  lastIpAddress_in?: Maybe<String[] | String>;
  lastIpAddress_not_in?: Maybe<String[] | String>;
  lastIpAddress_lt?: Maybe<String>;
  lastIpAddress_lte?: Maybe<String>;
  lastIpAddress_gt?: Maybe<String>;
  lastIpAddress_gte?: Maybe<String>;
  lastIpAddress_contains?: Maybe<String>;
  lastIpAddress_not_contains?: Maybe<String>;
  lastIpAddress_starts_with?: Maybe<String>;
  lastIpAddress_not_starts_with?: Maybe<String>;
  lastIpAddress_ends_with?: Maybe<String>;
  lastIpAddress_not_ends_with?: Maybe<String>;
  AND?: Maybe<SessionWhereInput[] | SessionWhereInput>;
  OR?: Maybe<SessionWhereInput[] | SessionWhereInput>;
  NOT?: Maybe<SessionWhereInput[] | SessionWhereInput>;
}

export interface EventCreateManyInput {
  create?: Maybe<EventCreateInput[] | EventCreateInput>;
  connect?: Maybe<EventWhereUniqueInput[] | EventWhereUniqueInput>;
}

export interface TagSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<TagWhereInput>;
  AND?: Maybe<TagSubscriptionWhereInput[] | TagSubscriptionWhereInput>;
  OR?: Maybe<TagSubscriptionWhereInput[] | TagSubscriptionWhereInput>;
  NOT?: Maybe<TagSubscriptionWhereInput[] | TagSubscriptionWhereInput>;
}

export interface TagCreateManyInput {
  create?: Maybe<TagCreateInput[] | TagCreateInput>;
  connect?: Maybe<TagWhereUniqueInput[] | TagWhereUniqueInput>;
}

export interface ProfileWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  creator?: Maybe<UserWhereInput>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  timezone?: Maybe<String>;
  timezone_not?: Maybe<String>;
  timezone_in?: Maybe<String[] | String>;
  timezone_not_in?: Maybe<String[] | String>;
  timezone_lt?: Maybe<String>;
  timezone_lte?: Maybe<String>;
  timezone_gt?: Maybe<String>;
  timezone_gte?: Maybe<String>;
  timezone_contains?: Maybe<String>;
  timezone_not_contains?: Maybe<String>;
  timezone_starts_with?: Maybe<String>;
  timezone_not_starts_with?: Maybe<String>;
  timezone_ends_with?: Maybe<String>;
  timezone_not_ends_with?: Maybe<String>;
  status?: Maybe<StatusType>;
  status_not?: Maybe<StatusType>;
  status_in?: Maybe<StatusType[] | StatusType>;
  status_not_in?: Maybe<StatusType[] | StatusType>;
  type?: Maybe<ProfileType>;
  type_not?: Maybe<ProfileType>;
  type_in?: Maybe<ProfileType[] | ProfileType>;
  type_not_in?: Maybe<ProfileType[] | ProfileType>;
  isHidden?: Maybe<Boolean>;
  isHidden_not?: Maybe<Boolean>;
  isBot?: Maybe<Boolean>;
  isBot_not?: Maybe<Boolean>;
  slogan?: Maybe<String>;
  slogan_not?: Maybe<String>;
  slogan_in?: Maybe<String[] | String>;
  slogan_not_in?: Maybe<String[] | String>;
  slogan_lt?: Maybe<String>;
  slogan_lte?: Maybe<String>;
  slogan_gt?: Maybe<String>;
  slogan_gte?: Maybe<String>;
  slogan_contains?: Maybe<String>;
  slogan_not_contains?: Maybe<String>;
  slogan_starts_with?: Maybe<String>;
  slogan_not_starts_with?: Maybe<String>;
  slogan_ends_with?: Maybe<String>;
  slogan_not_ends_with?: Maybe<String>;
  pictureAvatar?: Maybe<String>;
  pictureAvatar_not?: Maybe<String>;
  pictureAvatar_in?: Maybe<String[] | String>;
  pictureAvatar_not_in?: Maybe<String[] | String>;
  pictureAvatar_lt?: Maybe<String>;
  pictureAvatar_lte?: Maybe<String>;
  pictureAvatar_gt?: Maybe<String>;
  pictureAvatar_gte?: Maybe<String>;
  pictureAvatar_contains?: Maybe<String>;
  pictureAvatar_not_contains?: Maybe<String>;
  pictureAvatar_starts_with?: Maybe<String>;
  pictureAvatar_not_starts_with?: Maybe<String>;
  pictureAvatar_ends_with?: Maybe<String>;
  pictureAvatar_not_ends_with?: Maybe<String>;
  pictureBanner?: Maybe<String>;
  pictureBanner_not?: Maybe<String>;
  pictureBanner_in?: Maybe<String[] | String>;
  pictureBanner_not_in?: Maybe<String[] | String>;
  pictureBanner_lt?: Maybe<String>;
  pictureBanner_lte?: Maybe<String>;
  pictureBanner_gt?: Maybe<String>;
  pictureBanner_gte?: Maybe<String>;
  pictureBanner_contains?: Maybe<String>;
  pictureBanner_not_contains?: Maybe<String>;
  pictureBanner_starts_with?: Maybe<String>;
  pictureBanner_not_starts_with?: Maybe<String>;
  pictureBanner_ends_with?: Maybe<String>;
  pictureBanner_not_ends_with?: Maybe<String>;
  memberships_every?: Maybe<MembershipWhereInput>;
  memberships_some?: Maybe<MembershipWhereInput>;
  memberships_none?: Maybe<MembershipWhereInput>;
  AND?: Maybe<ProfileWhereInput[] | ProfileWhereInput>;
  OR?: Maybe<ProfileWhereInput[] | ProfileWhereInput>;
  NOT?: Maybe<ProfileWhereInput[] | ProfileWhereInput>;
}

export interface TagCreateInput {
  id?: Maybe<ID_Input>;
  creator: ProfileCreateOneInput;
  name: String;
  parents?: Maybe<TagCreateManyInput>;
}

export interface MembershipSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<MembershipWhereInput>;
  AND?: Maybe<
    MembershipSubscriptionWhereInput[] | MembershipSubscriptionWhereInput
  >;
  OR?: Maybe<
    MembershipSubscriptionWhereInput[] | MembershipSubscriptionWhereInput
  >;
  NOT?: Maybe<
    MembershipSubscriptionWhereInput[] | MembershipSubscriptionWhereInput
  >;
}

export interface LocationCreateOneInput {
  create?: Maybe<LocationCreateInput>;
  connect?: Maybe<LocationWhereUniqueInput>;
}

export interface GroupSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<GroupWhereInput>;
  AND?: Maybe<GroupSubscriptionWhereInput[] | GroupSubscriptionWhereInput>;
  OR?: Maybe<GroupSubscriptionWhereInput[] | GroupSubscriptionWhereInput>;
  NOT?: Maybe<GroupSubscriptionWhereInput[] | GroupSubscriptionWhereInput>;
}

export interface LocationCreateInput {
  id?: Maybe<ID_Input>;
  creator: ProfileCreateOneInput;
  type: LocationType;
  name: String;
  category?: Maybe<String>;
  address?: Maybe<String>;
  zipCode?: Maybe<String>;
  city?: Maybe<String>;
  country?: Maybe<String>;
  continent?: Maybe<String>;
  planet?: Maybe<String>;
  latitude: Float;
  longitude: Float;
  radiusMeter?: Maybe<Float>;
  tags?: Maybe<TagCreateManyInput>;
  visitorsCount: Int;
}

export interface UserUpdateManyMutationInput {
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  timezone?: Maybe<String>;
  email?: Maybe<String>;
  mobilePhone?: Maybe<String>;
  passwordSalt?: Maybe<String>;
  passwordHash?: Maybe<String>;
  isVerified?: Maybe<Boolean>;
  challenge?: Maybe<String>;
}

export interface SessionCreateManyWithoutUserInput {
  create?: Maybe<
    SessionCreateWithoutUserInput[] | SessionCreateWithoutUserInput
  >;
  connect?: Maybe<SessionWhereUniqueInput[] | SessionWhereUniqueInput>;
}

export interface TagUpdateManyMutationInput {
  name?: Maybe<String>;
}

export interface SessionCreateWithoutUserInput {
  id?: Maybe<ID_Input>;
  csrfToken: String;
  authToken: String;
  validTo: DateTimeInput;
  timedOut?: Maybe<DateTimeInput>;
  loggedOut?: Maybe<DateTimeInput>;
  lastUsedProfile: ProfileCreateOneInput;
  location?: Maybe<LocationCreateOneInput>;
  lastIpAddress?: Maybe<String>;
}

export interface SessionUpdateManyMutationInput {
  csrfToken?: Maybe<String>;
  authToken?: Maybe<String>;
  validTo?: Maybe<DateTimeInput>;
  timedOut?: Maybe<DateTimeInput>;
  loggedOut?: Maybe<DateTimeInput>;
  lastIpAddress?: Maybe<String>;
}

export interface EventUpdateInput {
  parent?: Maybe<EventUpdateOneInput>;
  creator?: Maybe<ProfileUpdateOneRequiredInput>;
  type?: Maybe<EventType>;
  isPinned?: Maybe<Boolean>;
  isRead?: Maybe<Boolean>;
  content?: Maybe<Json>;
  location?: Maybe<LocationUpdateOneRequiredInput>;
  tags?: Maybe<TagUpdateManyInput>;
}

export interface UserUpsertWithoutSessionsInput {
  update: UserUpdateWithoutSessionsDataInput;
  create: UserCreateWithoutSessionsInput;
}

export interface EventUpdateOneInput {
  create?: Maybe<EventCreateInput>;
  update?: Maybe<EventUpdateDataInput>;
  upsert?: Maybe<EventUpsertNestedInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<EventWhereUniqueInput>;
}

export interface UserUpdateOneRequiredWithoutSessionsInput {
  create?: Maybe<UserCreateWithoutSessionsInput>;
  update?: Maybe<UserUpdateWithoutSessionsDataInput>;
  upsert?: Maybe<UserUpsertWithoutSessionsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface EventUpdateDataInput {
  parent?: Maybe<EventUpdateOneInput>;
  creator?: Maybe<ProfileUpdateOneRequiredInput>;
  type?: Maybe<EventType>;
  isPinned?: Maybe<Boolean>;
  isRead?: Maybe<Boolean>;
  content?: Maybe<Json>;
  location?: Maybe<LocationUpdateOneRequiredInput>;
  tags?: Maybe<TagUpdateManyInput>;
}

export type LocationWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface ProfileUpdateOneRequiredInput {
  create?: Maybe<ProfileCreateInput>;
  update?: Maybe<ProfileUpdateDataInput>;
  upsert?: Maybe<ProfileUpsertNestedInput>;
  connect?: Maybe<ProfileWhereUniqueInput>;
}

export interface UserCreateOneWithoutSessionsInput {
  create?: Maybe<UserCreateWithoutSessionsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface ProfileUpdateDataInput {
  creator?: Maybe<UserUpdateOneRequiredWithoutProfilesInput>;
  name?: Maybe<String>;
  timezone?: Maybe<String>;
  status?: Maybe<StatusType>;
  type?: Maybe<ProfileType>;
  isHidden?: Maybe<Boolean>;
  isBot?: Maybe<Boolean>;
  slogan?: Maybe<String>;
  pictureAvatar?: Maybe<String>;
  pictureBanner?: Maybe<String>;
  memberships?: Maybe<MembershipUpdateManyWithoutMemberInput>;
}

export interface ProfileUpdateManyMutationInput {
  name?: Maybe<String>;
  timezone?: Maybe<String>;
  status?: Maybe<StatusType>;
  type?: Maybe<ProfileType>;
  isHidden?: Maybe<Boolean>;
  isBot?: Maybe<Boolean>;
  slogan?: Maybe<String>;
  pictureAvatar?: Maybe<String>;
  pictureBanner?: Maybe<String>;
}

export interface UserUpdateOneRequiredWithoutProfilesInput {
  create?: Maybe<UserCreateWithoutProfilesInput>;
  update?: Maybe<UserUpdateWithoutProfilesDataInput>;
  upsert?: Maybe<UserUpsertWithoutProfilesInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface ProfileUpdateInput {
  creator?: Maybe<UserUpdateOneRequiredWithoutProfilesInput>;
  name?: Maybe<String>;
  timezone?: Maybe<String>;
  status?: Maybe<StatusType>;
  type?: Maybe<ProfileType>;
  isHidden?: Maybe<Boolean>;
  isBot?: Maybe<Boolean>;
  slogan?: Maybe<String>;
  pictureAvatar?: Maybe<String>;
  pictureBanner?: Maybe<String>;
  memberships?: Maybe<MembershipUpdateManyWithoutMemberInput>;
}

export interface UserUpdateWithoutProfilesDataInput {
  parent?: Maybe<UserUpdateOneInput>;
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  timezone?: Maybe<String>;
  email?: Maybe<String>;
  mobilePhone?: Maybe<String>;
  passwordSalt?: Maybe<String>;
  passwordHash?: Maybe<String>;
  isVerified?: Maybe<Boolean>;
  challenge?: Maybe<String>;
  sessions?: Maybe<SessionUpdateManyWithoutUserInput>;
}

export interface MembershipUpdateInput {
  parent?: Maybe<MembershipUpdateOneInput>;
  member?: Maybe<ProfileUpdateOneRequiredWithoutMembershipsInput>;
  isBlocked?: Maybe<Boolean>;
  group?: Maybe<GroupUpdateOneRequiredWithoutMembersInput>;
  groupPinned?: Maybe<Boolean>;
  showHistory?: Maybe<Boolean>;
  hasLeft?: Maybe<Boolean>;
  hasJoined?: Maybe<Boolean>;
}

export interface UserUpdateOneInput {
  create?: Maybe<UserCreateInput>;
  update?: Maybe<UserUpdateDataInput>;
  upsert?: Maybe<UserUpsertNestedInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface LocationUpdateManyMutationInput {
  type?: Maybe<LocationType>;
  name?: Maybe<String>;
  category?: Maybe<String>;
  address?: Maybe<String>;
  zipCode?: Maybe<String>;
  city?: Maybe<String>;
  country?: Maybe<String>;
  continent?: Maybe<String>;
  planet?: Maybe<String>;
  latitude?: Maybe<Float>;
  longitude?: Maybe<Float>;
  radiusMeter?: Maybe<Float>;
  visitorsCount?: Maybe<Int>;
}

export interface SessionUpsertWithWhereUniqueWithoutUserInput {
  where: SessionWhereUniqueInput;
  update: SessionUpdateWithoutUserDataInput;
  create: SessionCreateWithoutUserInput;
}

export interface GroupUpdateManyMutationInput {
  name?: Maybe<String>;
  title?: Maybe<String>;
  description?: Maybe<String>;
  pictureLogo?: Maybe<String>;
  pictureBanner?: Maybe<String>;
  type?: Maybe<GroupType>;
  isHidden?: Maybe<Boolean>;
  isPublic?: Maybe<Boolean>;
  membersCount?: Maybe<Int>;
  membersOnline?: Maybe<Int>;
  eventsCount?: Maybe<Int>;
}

export interface ProfileUpdateManyWithoutCreatorInput {
  create?: Maybe<
    ProfileCreateWithoutCreatorInput[] | ProfileCreateWithoutCreatorInput
  >;
  delete?: Maybe<ProfileWhereUniqueInput[] | ProfileWhereUniqueInput>;
  connect?: Maybe<ProfileWhereUniqueInput[] | ProfileWhereUniqueInput>;
  set?: Maybe<ProfileWhereUniqueInput[] | ProfileWhereUniqueInput>;
  disconnect?: Maybe<ProfileWhereUniqueInput[] | ProfileWhereUniqueInput>;
  update?: Maybe<
    | ProfileUpdateWithWhereUniqueWithoutCreatorInput[]
    | ProfileUpdateWithWhereUniqueWithoutCreatorInput
  >;
  upsert?: Maybe<
    | ProfileUpsertWithWhereUniqueWithoutCreatorInput[]
    | ProfileUpsertWithWhereUniqueWithoutCreatorInput
  >;
  deleteMany?: Maybe<ProfileScalarWhereInput[] | ProfileScalarWhereInput>;
  updateMany?: Maybe<
    | ProfileUpdateManyWithWhereNestedInput[]
    | ProfileUpdateManyWithWhereNestedInput
  >;
}

export interface GroupUpdateInput {
  creator?: Maybe<ProfileUpdateOneRequiredInput>;
  name?: Maybe<String>;
  title?: Maybe<String>;
  description?: Maybe<String>;
  pictureLogo?: Maybe<String>;
  pictureBanner?: Maybe<String>;
  type?: Maybe<GroupType>;
  parent?: Maybe<GroupUpdateOneInput>;
  isHidden?: Maybe<Boolean>;
  isPublic?: Maybe<Boolean>;
  members?: Maybe<MembershipUpdateManyWithoutGroupInput>;
  events?: Maybe<EventUpdateManyInput>;
  tags?: Maybe<TagUpdateManyInput>;
  location?: Maybe<LocationUpdateOneInput>;
  membersCount?: Maybe<Int>;
  membersOnline?: Maybe<Int>;
  eventsCount?: Maybe<Int>;
}

export interface ProfileUpdateWithWhereUniqueWithoutCreatorInput {
  where: ProfileWhereUniqueInput;
  data: ProfileUpdateWithoutCreatorDataInput;
}

export interface EventUpsertNestedInput {
  update: EventUpdateDataInput;
  create: EventCreateInput;
}

export interface ProfileUpdateWithoutCreatorDataInput {
  name?: Maybe<String>;
  timezone?: Maybe<String>;
  status?: Maybe<StatusType>;
  type?: Maybe<ProfileType>;
  isHidden?: Maybe<Boolean>;
  isBot?: Maybe<Boolean>;
  slogan?: Maybe<String>;
  pictureAvatar?: Maybe<String>;
  pictureBanner?: Maybe<String>;
  memberships?: Maybe<MembershipUpdateManyWithoutMemberInput>;
}

export interface LocationUpdateOneRequiredInput {
  create?: Maybe<LocationCreateInput>;
  update?: Maybe<LocationUpdateDataInput>;
  upsert?: Maybe<LocationUpsertNestedInput>;
  connect?: Maybe<LocationWhereUniqueInput>;
}

export interface MembershipUpdateManyWithoutMemberInput {
  create?: Maybe<
    MembershipCreateWithoutMemberInput[] | MembershipCreateWithoutMemberInput
  >;
  delete?: Maybe<MembershipWhereUniqueInput[] | MembershipWhereUniqueInput>;
  connect?: Maybe<MembershipWhereUniqueInput[] | MembershipWhereUniqueInput>;
  set?: Maybe<MembershipWhereUniqueInput[] | MembershipWhereUniqueInput>;
  disconnect?: Maybe<MembershipWhereUniqueInput[] | MembershipWhereUniqueInput>;
  update?: Maybe<
    | MembershipUpdateWithWhereUniqueWithoutMemberInput[]
    | MembershipUpdateWithWhereUniqueWithoutMemberInput
  >;
  upsert?: Maybe<
    | MembershipUpsertWithWhereUniqueWithoutMemberInput[]
    | MembershipUpsertWithWhereUniqueWithoutMemberInput
  >;
  deleteMany?: Maybe<MembershipScalarWhereInput[] | MembershipScalarWhereInput>;
  updateMany?: Maybe<
    | MembershipUpdateManyWithWhereNestedInput[]
    | MembershipUpdateManyWithWhereNestedInput
  >;
}

export interface UserUpsertWithoutProfilesInput {
  update: UserUpdateWithoutProfilesDataInput;
  create: UserCreateWithoutProfilesInput;
}

export interface MembershipUpdateWithWhereUniqueWithoutMemberInput {
  where: MembershipWhereUniqueInput;
  data: MembershipUpdateWithoutMemberDataInput;
}

export interface UserUpsertNestedInput {
  update: UserUpdateDataInput;
  create: UserCreateInput;
}

export interface MembershipUpdateWithoutMemberDataInput {
  parent?: Maybe<MembershipUpdateOneInput>;
  isBlocked?: Maybe<Boolean>;
  group?: Maybe<GroupUpdateOneRequiredWithoutMembersInput>;
  groupPinned?: Maybe<Boolean>;
  showHistory?: Maybe<Boolean>;
  hasLeft?: Maybe<Boolean>;
  hasJoined?: Maybe<Boolean>;
}

export interface SessionUpdateManyWithWhereNestedInput {
  where: SessionScalarWhereInput;
  data: SessionUpdateManyDataInput;
}

export interface MembershipUpdateOneInput {
  create?: Maybe<MembershipCreateInput>;
  update?: Maybe<MembershipUpdateDataInput>;
  upsert?: Maybe<MembershipUpsertNestedInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<MembershipWhereUniqueInput>;
}

export interface EventCreateOneInput {
  create?: Maybe<EventCreateInput>;
  connect?: Maybe<EventWhereUniqueInput>;
}

export interface TagWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  creator?: Maybe<ProfileWhereInput>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  parents_every?: Maybe<TagWhereInput>;
  parents_some?: Maybe<TagWhereInput>;
  parents_none?: Maybe<TagWhereInput>;
  AND?: Maybe<TagWhereInput[] | TagWhereInput>;
  OR?: Maybe<TagWhereInput[] | TagWhereInput>;
  NOT?: Maybe<TagWhereInput[] | TagWhereInput>;
}

export interface ProfileCreateInput {
  id?: Maybe<ID_Input>;
  creator: UserCreateOneWithoutProfilesInput;
  name: String;
  timezone?: Maybe<String>;
  status: StatusType;
  type: ProfileType;
  isHidden: Boolean;
  isBot: Boolean;
  slogan?: Maybe<String>;
  pictureAvatar: String;
  pictureBanner?: Maybe<String>;
  memberships?: Maybe<MembershipCreateManyWithoutMemberInput>;
}

export interface ProfileUpdateOneRequiredWithoutMembershipsInput {
  create?: Maybe<ProfileCreateWithoutMembershipsInput>;
  update?: Maybe<ProfileUpdateWithoutMembershipsDataInput>;
  upsert?: Maybe<ProfileUpsertWithoutMembershipsInput>;
  connect?: Maybe<ProfileWhereUniqueInput>;
}

export interface UserCreateWithoutProfilesInput {
  id?: Maybe<ID_Input>;
  parent?: Maybe<UserCreateOneInput>;
  firstName: String;
  lastName: String;
  timezone: String;
  email: String;
  mobilePhone?: Maybe<String>;
  passwordSalt: String;
  passwordHash: String;
  isVerified: Boolean;
  challenge?: Maybe<String>;
  sessions?: Maybe<SessionCreateManyWithoutUserInput>;
}

export interface ProfileUpdateWithoutMembershipsDataInput {
  creator?: Maybe<UserUpdateOneRequiredWithoutProfilesInput>;
  name?: Maybe<String>;
  timezone?: Maybe<String>;
  status?: Maybe<StatusType>;
  type?: Maybe<ProfileType>;
  isHidden?: Maybe<Boolean>;
  isBot?: Maybe<Boolean>;
  slogan?: Maybe<String>;
  pictureAvatar?: Maybe<String>;
  pictureBanner?: Maybe<String>;
}

export interface UserCreateInput {
  id?: Maybe<ID_Input>;
  parent?: Maybe<UserCreateOneInput>;
  firstName: String;
  lastName: String;
  timezone: String;
  email: String;
  mobilePhone?: Maybe<String>;
  passwordSalt: String;
  passwordHash: String;
  isVerified: Boolean;
  challenge?: Maybe<String>;
  profiles?: Maybe<ProfileCreateManyWithoutCreatorInput>;
  sessions?: Maybe<SessionCreateManyWithoutUserInput>;
}

export interface ProfileUpsertWithoutMembershipsInput {
  update: ProfileUpdateWithoutMembershipsDataInput;
  create: ProfileCreateWithoutMembershipsInput;
}

export interface ProfileCreateWithoutCreatorInput {
  id?: Maybe<ID_Input>;
  name: String;
  timezone?: Maybe<String>;
  status: StatusType;
  type: ProfileType;
  isHidden: Boolean;
  isBot: Boolean;
  slogan?: Maybe<String>;
  pictureAvatar: String;
  pictureBanner?: Maybe<String>;
  memberships?: Maybe<MembershipCreateManyWithoutMemberInput>;
}

export interface GroupUpdateOneRequiredWithoutMembersInput {
  create?: Maybe<GroupCreateWithoutMembersInput>;
  update?: Maybe<GroupUpdateWithoutMembersDataInput>;
  upsert?: Maybe<GroupUpsertWithoutMembersInput>;
  connect?: Maybe<GroupWhereUniqueInput>;
}

export interface MembershipCreateWithoutMemberInput {
  id?: Maybe<ID_Input>;
  parent?: Maybe<MembershipCreateOneInput>;
  isBlocked: Boolean;
  group: GroupCreateOneWithoutMembersInput;
  groupPinned: Boolean;
  showHistory: Boolean;
  hasLeft: Boolean;
  hasJoined: Boolean;
}

export interface GroupUpdateWithoutMembersDataInput {
  creator?: Maybe<ProfileUpdateOneRequiredInput>;
  name?: Maybe<String>;
  title?: Maybe<String>;
  description?: Maybe<String>;
  pictureLogo?: Maybe<String>;
  pictureBanner?: Maybe<String>;
  type?: Maybe<GroupType>;
  parent?: Maybe<GroupUpdateOneInput>;
  isHidden?: Maybe<Boolean>;
  isPublic?: Maybe<Boolean>;
  events?: Maybe<EventUpdateManyInput>;
  tags?: Maybe<TagUpdateManyInput>;
  location?: Maybe<LocationUpdateOneInput>;
  membersCount?: Maybe<Int>;
  membersOnline?: Maybe<Int>;
  eventsCount?: Maybe<Int>;
}

export interface MembershipCreateInput {
  id?: Maybe<ID_Input>;
  parent?: Maybe<MembershipCreateOneInput>;
  member: ProfileCreateOneWithoutMembershipsInput;
  isBlocked: Boolean;
  group: GroupCreateOneWithoutMembersInput;
  groupPinned: Boolean;
  showHistory: Boolean;
  hasLeft: Boolean;
  hasJoined: Boolean;
}

export interface GroupUpdateOneInput {
  create?: Maybe<GroupCreateInput>;
  update?: Maybe<GroupUpdateDataInput>;
  upsert?: Maybe<GroupUpsertNestedInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<GroupWhereUniqueInput>;
}

export interface ProfileCreateWithoutMembershipsInput {
  id?: Maybe<ID_Input>;
  creator: UserCreateOneWithoutProfilesInput;
  name: String;
  timezone?: Maybe<String>;
  status: StatusType;
  type: ProfileType;
  isHidden: Boolean;
  isBot: Boolean;
  slogan?: Maybe<String>;
  pictureAvatar: String;
  pictureBanner?: Maybe<String>;
}

export interface GroupUpdateDataInput {
  creator?: Maybe<ProfileUpdateOneRequiredInput>;
  name?: Maybe<String>;
  title?: Maybe<String>;
  description?: Maybe<String>;
  pictureLogo?: Maybe<String>;
  pictureBanner?: Maybe<String>;
  type?: Maybe<GroupType>;
  parent?: Maybe<GroupUpdateOneInput>;
  isHidden?: Maybe<Boolean>;
  isPublic?: Maybe<Boolean>;
  members?: Maybe<MembershipUpdateManyWithoutGroupInput>;
  events?: Maybe<EventUpdateManyInput>;
  tags?: Maybe<TagUpdateManyInput>;
  location?: Maybe<LocationUpdateOneInput>;
  membersCount?: Maybe<Int>;
  membersOnline?: Maybe<Int>;
  eventsCount?: Maybe<Int>;
}

export interface MembershipWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  parent?: Maybe<MembershipWhereInput>;
  member?: Maybe<ProfileWhereInput>;
  isBlocked?: Maybe<Boolean>;
  isBlocked_not?: Maybe<Boolean>;
  group?: Maybe<GroupWhereInput>;
  groupPinned?: Maybe<Boolean>;
  groupPinned_not?: Maybe<Boolean>;
  showHistory?: Maybe<Boolean>;
  showHistory_not?: Maybe<Boolean>;
  hasLeft?: Maybe<Boolean>;
  hasLeft_not?: Maybe<Boolean>;
  hasJoined?: Maybe<Boolean>;
  hasJoined_not?: Maybe<Boolean>;
  AND?: Maybe<MembershipWhereInput[] | MembershipWhereInput>;
  OR?: Maybe<MembershipWhereInput[] | MembershipWhereInput>;
  NOT?: Maybe<MembershipWhereInput[] | MembershipWhereInput>;
}

export interface MembershipUpdateManyWithoutGroupInput {
  create?: Maybe<
    MembershipCreateWithoutGroupInput[] | MembershipCreateWithoutGroupInput
  >;
  delete?: Maybe<MembershipWhereUniqueInput[] | MembershipWhereUniqueInput>;
  connect?: Maybe<MembershipWhereUniqueInput[] | MembershipWhereUniqueInput>;
  set?: Maybe<MembershipWhereUniqueInput[] | MembershipWhereUniqueInput>;
  disconnect?: Maybe<MembershipWhereUniqueInput[] | MembershipWhereUniqueInput>;
  update?: Maybe<
    | MembershipUpdateWithWhereUniqueWithoutGroupInput[]
    | MembershipUpdateWithWhereUniqueWithoutGroupInput
  >;
  upsert?: Maybe<
    | MembershipUpsertWithWhereUniqueWithoutGroupInput[]
    | MembershipUpsertWithWhereUniqueWithoutGroupInput
  >;
  deleteMany?: Maybe<MembershipScalarWhereInput[] | MembershipScalarWhereInput>;
  updateMany?: Maybe<
    | MembershipUpdateManyWithWhereNestedInput[]
    | MembershipUpdateManyWithWhereNestedInput
  >;
}

export interface LocationWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  creator?: Maybe<ProfileWhereInput>;
  type?: Maybe<LocationType>;
  type_not?: Maybe<LocationType>;
  type_in?: Maybe<LocationType[] | LocationType>;
  type_not_in?: Maybe<LocationType[] | LocationType>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  category?: Maybe<String>;
  category_not?: Maybe<String>;
  category_in?: Maybe<String[] | String>;
  category_not_in?: Maybe<String[] | String>;
  category_lt?: Maybe<String>;
  category_lte?: Maybe<String>;
  category_gt?: Maybe<String>;
  category_gte?: Maybe<String>;
  category_contains?: Maybe<String>;
  category_not_contains?: Maybe<String>;
  category_starts_with?: Maybe<String>;
  category_not_starts_with?: Maybe<String>;
  category_ends_with?: Maybe<String>;
  category_not_ends_with?: Maybe<String>;
  address?: Maybe<String>;
  address_not?: Maybe<String>;
  address_in?: Maybe<String[] | String>;
  address_not_in?: Maybe<String[] | String>;
  address_lt?: Maybe<String>;
  address_lte?: Maybe<String>;
  address_gt?: Maybe<String>;
  address_gte?: Maybe<String>;
  address_contains?: Maybe<String>;
  address_not_contains?: Maybe<String>;
  address_starts_with?: Maybe<String>;
  address_not_starts_with?: Maybe<String>;
  address_ends_with?: Maybe<String>;
  address_not_ends_with?: Maybe<String>;
  zipCode?: Maybe<String>;
  zipCode_not?: Maybe<String>;
  zipCode_in?: Maybe<String[] | String>;
  zipCode_not_in?: Maybe<String[] | String>;
  zipCode_lt?: Maybe<String>;
  zipCode_lte?: Maybe<String>;
  zipCode_gt?: Maybe<String>;
  zipCode_gte?: Maybe<String>;
  zipCode_contains?: Maybe<String>;
  zipCode_not_contains?: Maybe<String>;
  zipCode_starts_with?: Maybe<String>;
  zipCode_not_starts_with?: Maybe<String>;
  zipCode_ends_with?: Maybe<String>;
  zipCode_not_ends_with?: Maybe<String>;
  city?: Maybe<String>;
  city_not?: Maybe<String>;
  city_in?: Maybe<String[] | String>;
  city_not_in?: Maybe<String[] | String>;
  city_lt?: Maybe<String>;
  city_lte?: Maybe<String>;
  city_gt?: Maybe<String>;
  city_gte?: Maybe<String>;
  city_contains?: Maybe<String>;
  city_not_contains?: Maybe<String>;
  city_starts_with?: Maybe<String>;
  city_not_starts_with?: Maybe<String>;
  city_ends_with?: Maybe<String>;
  city_not_ends_with?: Maybe<String>;
  country?: Maybe<String>;
  country_not?: Maybe<String>;
  country_in?: Maybe<String[] | String>;
  country_not_in?: Maybe<String[] | String>;
  country_lt?: Maybe<String>;
  country_lte?: Maybe<String>;
  country_gt?: Maybe<String>;
  country_gte?: Maybe<String>;
  country_contains?: Maybe<String>;
  country_not_contains?: Maybe<String>;
  country_starts_with?: Maybe<String>;
  country_not_starts_with?: Maybe<String>;
  country_ends_with?: Maybe<String>;
  country_not_ends_with?: Maybe<String>;
  continent?: Maybe<String>;
  continent_not?: Maybe<String>;
  continent_in?: Maybe<String[] | String>;
  continent_not_in?: Maybe<String[] | String>;
  continent_lt?: Maybe<String>;
  continent_lte?: Maybe<String>;
  continent_gt?: Maybe<String>;
  continent_gte?: Maybe<String>;
  continent_contains?: Maybe<String>;
  continent_not_contains?: Maybe<String>;
  continent_starts_with?: Maybe<String>;
  continent_not_starts_with?: Maybe<String>;
  continent_ends_with?: Maybe<String>;
  continent_not_ends_with?: Maybe<String>;
  planet?: Maybe<String>;
  planet_not?: Maybe<String>;
  planet_in?: Maybe<String[] | String>;
  planet_not_in?: Maybe<String[] | String>;
  planet_lt?: Maybe<String>;
  planet_lte?: Maybe<String>;
  planet_gt?: Maybe<String>;
  planet_gte?: Maybe<String>;
  planet_contains?: Maybe<String>;
  planet_not_contains?: Maybe<String>;
  planet_starts_with?: Maybe<String>;
  planet_not_starts_with?: Maybe<String>;
  planet_ends_with?: Maybe<String>;
  planet_not_ends_with?: Maybe<String>;
  latitude?: Maybe<Float>;
  latitude_not?: Maybe<Float>;
  latitude_in?: Maybe<Float[] | Float>;
  latitude_not_in?: Maybe<Float[] | Float>;
  latitude_lt?: Maybe<Float>;
  latitude_lte?: Maybe<Float>;
  latitude_gt?: Maybe<Float>;
  latitude_gte?: Maybe<Float>;
  longitude?: Maybe<Float>;
  longitude_not?: Maybe<Float>;
  longitude_in?: Maybe<Float[] | Float>;
  longitude_not_in?: Maybe<Float[] | Float>;
  longitude_lt?: Maybe<Float>;
  longitude_lte?: Maybe<Float>;
  longitude_gt?: Maybe<Float>;
  longitude_gte?: Maybe<Float>;
  radiusMeter?: Maybe<Float>;
  radiusMeter_not?: Maybe<Float>;
  radiusMeter_in?: Maybe<Float[] | Float>;
  radiusMeter_not_in?: Maybe<Float[] | Float>;
  radiusMeter_lt?: Maybe<Float>;
  radiusMeter_lte?: Maybe<Float>;
  radiusMeter_gt?: Maybe<Float>;
  radiusMeter_gte?: Maybe<Float>;
  tags_every?: Maybe<TagWhereInput>;
  tags_some?: Maybe<TagWhereInput>;
  tags_none?: Maybe<TagWhereInput>;
  visitorsCount?: Maybe<Int>;
  visitorsCount_not?: Maybe<Int>;
  visitorsCount_in?: Maybe<Int[] | Int>;
  visitorsCount_not_in?: Maybe<Int[] | Int>;
  visitorsCount_lt?: Maybe<Int>;
  visitorsCount_lte?: Maybe<Int>;
  visitorsCount_gt?: Maybe<Int>;
  visitorsCount_gte?: Maybe<Int>;
  AND?: Maybe<LocationWhereInput[] | LocationWhereInput>;
  OR?: Maybe<LocationWhereInput[] | LocationWhereInput>;
  NOT?: Maybe<LocationWhereInput[] | LocationWhereInput>;
}

export interface MembershipUpdateWithWhereUniqueWithoutGroupInput {
  where: MembershipWhereUniqueInput;
  data: MembershipUpdateWithoutGroupDataInput;
}

export interface SessionSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<SessionWhereInput>;
  AND?: Maybe<SessionSubscriptionWhereInput[] | SessionSubscriptionWhereInput>;
  OR?: Maybe<SessionSubscriptionWhereInput[] | SessionSubscriptionWhereInput>;
  NOT?: Maybe<SessionSubscriptionWhereInput[] | SessionSubscriptionWhereInput>;
}

export interface MembershipUpdateWithoutGroupDataInput {
  parent?: Maybe<MembershipUpdateOneInput>;
  member?: Maybe<ProfileUpdateOneRequiredWithoutMembershipsInput>;
  isBlocked?: Maybe<Boolean>;
  groupPinned?: Maybe<Boolean>;
  showHistory?: Maybe<Boolean>;
  hasLeft?: Maybe<Boolean>;
  hasJoined?: Maybe<Boolean>;
}

export interface LocationSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<LocationWhereInput>;
  AND?: Maybe<
    LocationSubscriptionWhereInput[] | LocationSubscriptionWhereInput
  >;
  OR?: Maybe<LocationSubscriptionWhereInput[] | LocationSubscriptionWhereInput>;
  NOT?: Maybe<
    LocationSubscriptionWhereInput[] | LocationSubscriptionWhereInput
  >;
}

export interface MembershipUpsertWithWhereUniqueWithoutGroupInput {
  where: MembershipWhereUniqueInput;
  update: MembershipUpdateWithoutGroupDataInput;
  create: MembershipCreateWithoutGroupInput;
}

export interface UserUpdateInput {
  parent?: Maybe<UserUpdateOneInput>;
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  timezone?: Maybe<String>;
  email?: Maybe<String>;
  mobilePhone?: Maybe<String>;
  passwordSalt?: Maybe<String>;
  passwordHash?: Maybe<String>;
  isVerified?: Maybe<Boolean>;
  challenge?: Maybe<String>;
  profiles?: Maybe<ProfileUpdateManyWithoutCreatorInput>;
  sessions?: Maybe<SessionUpdateManyWithoutUserInput>;
}

export interface MembershipScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  isBlocked?: Maybe<Boolean>;
  isBlocked_not?: Maybe<Boolean>;
  groupPinned?: Maybe<Boolean>;
  groupPinned_not?: Maybe<Boolean>;
  showHistory?: Maybe<Boolean>;
  showHistory_not?: Maybe<Boolean>;
  hasLeft?: Maybe<Boolean>;
  hasLeft_not?: Maybe<Boolean>;
  hasJoined?: Maybe<Boolean>;
  hasJoined_not?: Maybe<Boolean>;
  AND?: Maybe<MembershipScalarWhereInput[] | MembershipScalarWhereInput>;
  OR?: Maybe<MembershipScalarWhereInput[] | MembershipScalarWhereInput>;
  NOT?: Maybe<MembershipScalarWhereInput[] | MembershipScalarWhereInput>;
}

export type GroupWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface MembershipUpdateManyWithWhereNestedInput {
  where: MembershipScalarWhereInput;
  data: MembershipUpdateManyDataInput;
}

export interface SessionUpdateInput {
  csrfToken?: Maybe<String>;
  authToken?: Maybe<String>;
  validTo?: Maybe<DateTimeInput>;
  timedOut?: Maybe<DateTimeInput>;
  loggedOut?: Maybe<DateTimeInput>;
  user?: Maybe<UserUpdateOneRequiredWithoutSessionsInput>;
  lastUsedProfile?: Maybe<ProfileUpdateOneRequiredInput>;
  location?: Maybe<LocationUpdateOneInput>;
  lastIpAddress?: Maybe<String>;
}

export interface MembershipUpdateManyDataInput {
  isBlocked?: Maybe<Boolean>;
  groupPinned?: Maybe<Boolean>;
  showHistory?: Maybe<Boolean>;
  hasLeft?: Maybe<Boolean>;
  hasJoined?: Maybe<Boolean>;
}

export interface SessionCreateInput {
  id?: Maybe<ID_Input>;
  csrfToken: String;
  authToken: String;
  validTo: DateTimeInput;
  timedOut?: Maybe<DateTimeInput>;
  loggedOut?: Maybe<DateTimeInput>;
  user: UserCreateOneWithoutSessionsInput;
  lastUsedProfile: ProfileCreateOneInput;
  location?: Maybe<LocationCreateOneInput>;
  lastIpAddress?: Maybe<String>;
}

export interface EventUpdateManyInput {
  create?: Maybe<EventCreateInput[] | EventCreateInput>;
  update?: Maybe<
    | EventUpdateWithWhereUniqueNestedInput[]
    | EventUpdateWithWhereUniqueNestedInput
  >;
  upsert?: Maybe<
    | EventUpsertWithWhereUniqueNestedInput[]
    | EventUpsertWithWhereUniqueNestedInput
  >;
  delete?: Maybe<EventWhereUniqueInput[] | EventWhereUniqueInput>;
  connect?: Maybe<EventWhereUniqueInput[] | EventWhereUniqueInput>;
  set?: Maybe<EventWhereUniqueInput[] | EventWhereUniqueInput>;
  disconnect?: Maybe<EventWhereUniqueInput[] | EventWhereUniqueInput>;
  deleteMany?: Maybe<EventScalarWhereInput[] | EventScalarWhereInput>;
  updateMany?: Maybe<
    EventUpdateManyWithWhereNestedInput[] | EventUpdateManyWithWhereNestedInput
  >;
}

export interface MembershipUpdateManyMutationInput {
  isBlocked?: Maybe<Boolean>;
  groupPinned?: Maybe<Boolean>;
  showHistory?: Maybe<Boolean>;
  hasLeft?: Maybe<Boolean>;
  hasJoined?: Maybe<Boolean>;
}

export interface EventUpdateWithWhereUniqueNestedInput {
  where: EventWhereUniqueInput;
  data: EventUpdateDataInput;
}

export interface LocationUpdateInput {
  creator?: Maybe<ProfileUpdateOneRequiredInput>;
  type?: Maybe<LocationType>;
  name?: Maybe<String>;
  category?: Maybe<String>;
  address?: Maybe<String>;
  zipCode?: Maybe<String>;
  city?: Maybe<String>;
  country?: Maybe<String>;
  continent?: Maybe<String>;
  planet?: Maybe<String>;
  latitude?: Maybe<Float>;
  longitude?: Maybe<Float>;
  radiusMeter?: Maybe<Float>;
  tags?: Maybe<TagUpdateManyInput>;
  visitorsCount?: Maybe<Int>;
}

export interface EventUpsertWithWhereUniqueNestedInput {
  where: EventWhereUniqueInput;
  update: EventUpdateDataInput;
  create: EventCreateInput;
}

export interface EventUpdateManyMutationInput {
  type?: Maybe<EventType>;
  isPinned?: Maybe<Boolean>;
  isRead?: Maybe<Boolean>;
  content?: Maybe<Json>;
}

export interface EventScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  type?: Maybe<EventType>;
  type_not?: Maybe<EventType>;
  type_in?: Maybe<EventType[] | EventType>;
  type_not_in?: Maybe<EventType[] | EventType>;
  isPinned?: Maybe<Boolean>;
  isPinned_not?: Maybe<Boolean>;
  isRead?: Maybe<Boolean>;
  isRead_not?: Maybe<Boolean>;
  AND?: Maybe<EventScalarWhereInput[] | EventScalarWhereInput>;
  OR?: Maybe<EventScalarWhereInput[] | EventScalarWhereInput>;
  NOT?: Maybe<EventScalarWhereInput[] | EventScalarWhereInput>;
}

export interface ProfileUpsertNestedInput {
  update: ProfileUpdateDataInput;
  create: ProfileCreateInput;
}

export interface EventUpdateManyWithWhereNestedInput {
  where: EventScalarWhereInput;
  data: EventUpdateManyDataInput;
}

export interface SessionUpdateManyDataInput {
  csrfToken?: Maybe<String>;
  authToken?: Maybe<String>;
  validTo?: Maybe<DateTimeInput>;
  timedOut?: Maybe<DateTimeInput>;
  loggedOut?: Maybe<DateTimeInput>;
  lastIpAddress?: Maybe<String>;
}

export interface EventUpdateManyDataInput {
  type?: Maybe<EventType>;
  isPinned?: Maybe<Boolean>;
  isRead?: Maybe<Boolean>;
  content?: Maybe<Json>;
}

export interface EventCreateInput {
  id?: Maybe<ID_Input>;
  parent?: Maybe<EventCreateOneInput>;
  creator: ProfileCreateOneInput;
  type: EventType;
  isPinned: Boolean;
  isRead: Boolean;
  content?: Maybe<Json>;
  location: LocationCreateOneInput;
  tags?: Maybe<TagCreateManyInput>;
}

export interface TagUpdateManyInput {
  create?: Maybe<TagCreateInput[] | TagCreateInput>;
  update?: Maybe<
    TagUpdateWithWhereUniqueNestedInput[] | TagUpdateWithWhereUniqueNestedInput
  >;
  upsert?: Maybe<
    TagUpsertWithWhereUniqueNestedInput[] | TagUpsertWithWhereUniqueNestedInput
  >;
  delete?: Maybe<TagWhereUniqueInput[] | TagWhereUniqueInput>;
  connect?: Maybe<TagWhereUniqueInput[] | TagWhereUniqueInput>;
  set?: Maybe<TagWhereUniqueInput[] | TagWhereUniqueInput>;
  disconnect?: Maybe<TagWhereUniqueInput[] | TagWhereUniqueInput>;
  deleteMany?: Maybe<TagScalarWhereInput[] | TagScalarWhereInput>;
  updateMany?: Maybe<
    TagUpdateManyWithWhereNestedInput[] | TagUpdateManyWithWhereNestedInput
  >;
}

export interface UserCreateOneWithoutProfilesInput {
  create?: Maybe<UserCreateWithoutProfilesInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface TagUpdateWithWhereUniqueNestedInput {
  where: TagWhereUniqueInput;
  data: TagUpdateDataInput;
}

export interface ProfileCreateManyWithoutCreatorInput {
  create?: Maybe<
    ProfileCreateWithoutCreatorInput[] | ProfileCreateWithoutCreatorInput
  >;
  connect?: Maybe<ProfileWhereUniqueInput[] | ProfileWhereUniqueInput>;
}

export interface TagUpdateDataInput {
  creator?: Maybe<ProfileUpdateOneRequiredInput>;
  name?: Maybe<String>;
  parents?: Maybe<TagUpdateManyInput>;
}

export interface MembershipCreateOneInput {
  create?: Maybe<MembershipCreateInput>;
  connect?: Maybe<MembershipWhereUniqueInput>;
}

export interface TagUpsertWithWhereUniqueNestedInput {
  where: TagWhereUniqueInput;
  update: TagUpdateDataInput;
  create: TagCreateInput;
}

export interface GroupCreateOneWithoutMembersInput {
  create?: Maybe<GroupCreateWithoutMembersInput>;
  connect?: Maybe<GroupWhereUniqueInput>;
}

export interface TagScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  AND?: Maybe<TagScalarWhereInput[] | TagScalarWhereInput>;
  OR?: Maybe<TagScalarWhereInput[] | TagScalarWhereInput>;
  NOT?: Maybe<TagScalarWhereInput[] | TagScalarWhereInput>;
}

export interface UserWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  parent?: Maybe<UserWhereInput>;
  firstName?: Maybe<String>;
  firstName_not?: Maybe<String>;
  firstName_in?: Maybe<String[] | String>;
  firstName_not_in?: Maybe<String[] | String>;
  firstName_lt?: Maybe<String>;
  firstName_lte?: Maybe<String>;
  firstName_gt?: Maybe<String>;
  firstName_gte?: Maybe<String>;
  firstName_contains?: Maybe<String>;
  firstName_not_contains?: Maybe<String>;
  firstName_starts_with?: Maybe<String>;
  firstName_not_starts_with?: Maybe<String>;
  firstName_ends_with?: Maybe<String>;
  firstName_not_ends_with?: Maybe<String>;
  lastName?: Maybe<String>;
  lastName_not?: Maybe<String>;
  lastName_in?: Maybe<String[] | String>;
  lastName_not_in?: Maybe<String[] | String>;
  lastName_lt?: Maybe<String>;
  lastName_lte?: Maybe<String>;
  lastName_gt?: Maybe<String>;
  lastName_gte?: Maybe<String>;
  lastName_contains?: Maybe<String>;
  lastName_not_contains?: Maybe<String>;
  lastName_starts_with?: Maybe<String>;
  lastName_not_starts_with?: Maybe<String>;
  lastName_ends_with?: Maybe<String>;
  lastName_not_ends_with?: Maybe<String>;
  timezone?: Maybe<String>;
  timezone_not?: Maybe<String>;
  timezone_in?: Maybe<String[] | String>;
  timezone_not_in?: Maybe<String[] | String>;
  timezone_lt?: Maybe<String>;
  timezone_lte?: Maybe<String>;
  timezone_gt?: Maybe<String>;
  timezone_gte?: Maybe<String>;
  timezone_contains?: Maybe<String>;
  timezone_not_contains?: Maybe<String>;
  timezone_starts_with?: Maybe<String>;
  timezone_not_starts_with?: Maybe<String>;
  timezone_ends_with?: Maybe<String>;
  timezone_not_ends_with?: Maybe<String>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  mobilePhone?: Maybe<String>;
  mobilePhone_not?: Maybe<String>;
  mobilePhone_in?: Maybe<String[] | String>;
  mobilePhone_not_in?: Maybe<String[] | String>;
  mobilePhone_lt?: Maybe<String>;
  mobilePhone_lte?: Maybe<String>;
  mobilePhone_gt?: Maybe<String>;
  mobilePhone_gte?: Maybe<String>;
  mobilePhone_contains?: Maybe<String>;
  mobilePhone_not_contains?: Maybe<String>;
  mobilePhone_starts_with?: Maybe<String>;
  mobilePhone_not_starts_with?: Maybe<String>;
  mobilePhone_ends_with?: Maybe<String>;
  mobilePhone_not_ends_with?: Maybe<String>;
  passwordSalt?: Maybe<String>;
  passwordSalt_not?: Maybe<String>;
  passwordSalt_in?: Maybe<String[] | String>;
  passwordSalt_not_in?: Maybe<String[] | String>;
  passwordSalt_lt?: Maybe<String>;
  passwordSalt_lte?: Maybe<String>;
  passwordSalt_gt?: Maybe<String>;
  passwordSalt_gte?: Maybe<String>;
  passwordSalt_contains?: Maybe<String>;
  passwordSalt_not_contains?: Maybe<String>;
  passwordSalt_starts_with?: Maybe<String>;
  passwordSalt_not_starts_with?: Maybe<String>;
  passwordSalt_ends_with?: Maybe<String>;
  passwordSalt_not_ends_with?: Maybe<String>;
  passwordHash?: Maybe<String>;
  passwordHash_not?: Maybe<String>;
  passwordHash_in?: Maybe<String[] | String>;
  passwordHash_not_in?: Maybe<String[] | String>;
  passwordHash_lt?: Maybe<String>;
  passwordHash_lte?: Maybe<String>;
  passwordHash_gt?: Maybe<String>;
  passwordHash_gte?: Maybe<String>;
  passwordHash_contains?: Maybe<String>;
  passwordHash_not_contains?: Maybe<String>;
  passwordHash_starts_with?: Maybe<String>;
  passwordHash_not_starts_with?: Maybe<String>;
  passwordHash_ends_with?: Maybe<String>;
  passwordHash_not_ends_with?: Maybe<String>;
  isVerified?: Maybe<Boolean>;
  isVerified_not?: Maybe<Boolean>;
  challenge?: Maybe<String>;
  challenge_not?: Maybe<String>;
  challenge_in?: Maybe<String[] | String>;
  challenge_not_in?: Maybe<String[] | String>;
  challenge_lt?: Maybe<String>;
  challenge_lte?: Maybe<String>;
  challenge_gt?: Maybe<String>;
  challenge_gte?: Maybe<String>;
  challenge_contains?: Maybe<String>;
  challenge_not_contains?: Maybe<String>;
  challenge_starts_with?: Maybe<String>;
  challenge_not_starts_with?: Maybe<String>;
  challenge_ends_with?: Maybe<String>;
  challenge_not_ends_with?: Maybe<String>;
  profiles_every?: Maybe<ProfileWhereInput>;
  profiles_some?: Maybe<ProfileWhereInput>;
  profiles_none?: Maybe<ProfileWhereInput>;
  sessions_every?: Maybe<SessionWhereInput>;
  sessions_some?: Maybe<SessionWhereInput>;
  sessions_none?: Maybe<SessionWhereInput>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
  OR?: Maybe<UserWhereInput[] | UserWhereInput>;
  NOT?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export interface TagUpdateManyWithWhereNestedInput {
  where: TagScalarWhereInput;
  data: TagUpdateManyDataInput;
}

export interface EventSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<EventWhereInput>;
  AND?: Maybe<EventSubscriptionWhereInput[] | EventSubscriptionWhereInput>;
  OR?: Maybe<EventSubscriptionWhereInput[] | EventSubscriptionWhereInput>;
  NOT?: Maybe<EventSubscriptionWhereInput[] | EventSubscriptionWhereInput>;
}

export interface TagUpdateManyDataInput {
  name?: Maybe<String>;
}

export interface UserUpdateWithoutSessionsDataInput {
  parent?: Maybe<UserUpdateOneInput>;
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  timezone?: Maybe<String>;
  email?: Maybe<String>;
  mobilePhone?: Maybe<String>;
  passwordSalt?: Maybe<String>;
  passwordHash?: Maybe<String>;
  isVerified?: Maybe<Boolean>;
  challenge?: Maybe<String>;
  profiles?: Maybe<ProfileUpdateManyWithoutCreatorInput>;
}

export interface LocationUpdateOneInput {
  create?: Maybe<LocationCreateInput>;
  update?: Maybe<LocationUpdateDataInput>;
  upsert?: Maybe<LocationUpsertNestedInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<LocationWhereUniqueInput>;
}

export type MembershipWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface LocationUpdateDataInput {
  creator?: Maybe<ProfileUpdateOneRequiredInput>;
  type?: Maybe<LocationType>;
  name?: Maybe<String>;
  category?: Maybe<String>;
  address?: Maybe<String>;
  zipCode?: Maybe<String>;
  city?: Maybe<String>;
  country?: Maybe<String>;
  continent?: Maybe<String>;
  planet?: Maybe<String>;
  latitude?: Maybe<Float>;
  longitude?: Maybe<Float>;
  radiusMeter?: Maybe<Float>;
  tags?: Maybe<TagUpdateManyInput>;
  visitorsCount?: Maybe<Int>;
}

export type SessionWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  csrfToken?: Maybe<String>;
  authToken?: Maybe<String>;
}>;

export interface LocationUpsertNestedInput {
  update: LocationUpdateDataInput;
  create: LocationCreateInput;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  email?: Maybe<String>;
}>;

export interface GroupUpsertNestedInput {
  update: GroupUpdateDataInput;
  create: GroupCreateInput;
}

export interface ProfileCreateOneInput {
  create?: Maybe<ProfileCreateInput>;
  connect?: Maybe<ProfileWhereUniqueInput>;
}

export interface GroupUpsertWithoutMembersInput {
  update: GroupUpdateWithoutMembersDataInput;
  create: GroupCreateWithoutMembersInput;
}

export interface MembershipCreateManyWithoutMemberInput {
  create?: Maybe<
    MembershipCreateWithoutMemberInput[] | MembershipCreateWithoutMemberInput
  >;
  connect?: Maybe<MembershipWhereUniqueInput[] | MembershipWhereUniqueInput>;
}

export interface MembershipUpsertNestedInput {
  update: MembershipUpdateDataInput;
  create: MembershipCreateInput;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  OR?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  NOT?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface MembershipUpsertWithWhereUniqueWithoutMemberInput {
  where: MembershipWhereUniqueInput;
  update: MembershipUpdateWithoutMemberDataInput;
  create: MembershipCreateWithoutMemberInput;
}

export interface TagUpdateInput {
  creator?: Maybe<ProfileUpdateOneRequiredInput>;
  name?: Maybe<String>;
  parents?: Maybe<TagUpdateManyInput>;
}

export interface ProfileUpsertWithWhereUniqueWithoutCreatorInput {
  where: ProfileWhereUniqueInput;
  update: ProfileUpdateWithoutCreatorDataInput;
  create: ProfileCreateWithoutCreatorInput;
}

export type ProfileWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface ProfileScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  timezone?: Maybe<String>;
  timezone_not?: Maybe<String>;
  timezone_in?: Maybe<String[] | String>;
  timezone_not_in?: Maybe<String[] | String>;
  timezone_lt?: Maybe<String>;
  timezone_lte?: Maybe<String>;
  timezone_gt?: Maybe<String>;
  timezone_gte?: Maybe<String>;
  timezone_contains?: Maybe<String>;
  timezone_not_contains?: Maybe<String>;
  timezone_starts_with?: Maybe<String>;
  timezone_not_starts_with?: Maybe<String>;
  timezone_ends_with?: Maybe<String>;
  timezone_not_ends_with?: Maybe<String>;
  status?: Maybe<StatusType>;
  status_not?: Maybe<StatusType>;
  status_in?: Maybe<StatusType[] | StatusType>;
  status_not_in?: Maybe<StatusType[] | StatusType>;
  type?: Maybe<ProfileType>;
  type_not?: Maybe<ProfileType>;
  type_in?: Maybe<ProfileType[] | ProfileType>;
  type_not_in?: Maybe<ProfileType[] | ProfileType>;
  isHidden?: Maybe<Boolean>;
  isHidden_not?: Maybe<Boolean>;
  isBot?: Maybe<Boolean>;
  isBot_not?: Maybe<Boolean>;
  slogan?: Maybe<String>;
  slogan_not?: Maybe<String>;
  slogan_in?: Maybe<String[] | String>;
  slogan_not_in?: Maybe<String[] | String>;
  slogan_lt?: Maybe<String>;
  slogan_lte?: Maybe<String>;
  slogan_gt?: Maybe<String>;
  slogan_gte?: Maybe<String>;
  slogan_contains?: Maybe<String>;
  slogan_not_contains?: Maybe<String>;
  slogan_starts_with?: Maybe<String>;
  slogan_not_starts_with?: Maybe<String>;
  slogan_ends_with?: Maybe<String>;
  slogan_not_ends_with?: Maybe<String>;
  pictureAvatar?: Maybe<String>;
  pictureAvatar_not?: Maybe<String>;
  pictureAvatar_in?: Maybe<String[] | String>;
  pictureAvatar_not_in?: Maybe<String[] | String>;
  pictureAvatar_lt?: Maybe<String>;
  pictureAvatar_lte?: Maybe<String>;
  pictureAvatar_gt?: Maybe<String>;
  pictureAvatar_gte?: Maybe<String>;
  pictureAvatar_contains?: Maybe<String>;
  pictureAvatar_not_contains?: Maybe<String>;
  pictureAvatar_starts_with?: Maybe<String>;
  pictureAvatar_not_starts_with?: Maybe<String>;
  pictureAvatar_ends_with?: Maybe<String>;
  pictureAvatar_not_ends_with?: Maybe<String>;
  pictureBanner?: Maybe<String>;
  pictureBanner_not?: Maybe<String>;
  pictureBanner_in?: Maybe<String[] | String>;
  pictureBanner_not_in?: Maybe<String[] | String>;
  pictureBanner_lt?: Maybe<String>;
  pictureBanner_lte?: Maybe<String>;
  pictureBanner_gt?: Maybe<String>;
  pictureBanner_gte?: Maybe<String>;
  pictureBanner_contains?: Maybe<String>;
  pictureBanner_not_contains?: Maybe<String>;
  pictureBanner_starts_with?: Maybe<String>;
  pictureBanner_not_starts_with?: Maybe<String>;
  pictureBanner_ends_with?: Maybe<String>;
  pictureBanner_not_ends_with?: Maybe<String>;
  AND?: Maybe<ProfileScalarWhereInput[] | ProfileScalarWhereInput>;
  OR?: Maybe<ProfileScalarWhereInput[] | ProfileScalarWhereInput>;
  NOT?: Maybe<ProfileScalarWhereInput[] | ProfileScalarWhereInput>;
}

export interface SessionScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  csrfToken?: Maybe<String>;
  csrfToken_not?: Maybe<String>;
  csrfToken_in?: Maybe<String[] | String>;
  csrfToken_not_in?: Maybe<String[] | String>;
  csrfToken_lt?: Maybe<String>;
  csrfToken_lte?: Maybe<String>;
  csrfToken_gt?: Maybe<String>;
  csrfToken_gte?: Maybe<String>;
  csrfToken_contains?: Maybe<String>;
  csrfToken_not_contains?: Maybe<String>;
  csrfToken_starts_with?: Maybe<String>;
  csrfToken_not_starts_with?: Maybe<String>;
  csrfToken_ends_with?: Maybe<String>;
  csrfToken_not_ends_with?: Maybe<String>;
  authToken?: Maybe<String>;
  authToken_not?: Maybe<String>;
  authToken_in?: Maybe<String[] | String>;
  authToken_not_in?: Maybe<String[] | String>;
  authToken_lt?: Maybe<String>;
  authToken_lte?: Maybe<String>;
  authToken_gt?: Maybe<String>;
  authToken_gte?: Maybe<String>;
  authToken_contains?: Maybe<String>;
  authToken_not_contains?: Maybe<String>;
  authToken_starts_with?: Maybe<String>;
  authToken_not_starts_with?: Maybe<String>;
  authToken_ends_with?: Maybe<String>;
  authToken_not_ends_with?: Maybe<String>;
  validTo?: Maybe<DateTimeInput>;
  validTo_not?: Maybe<DateTimeInput>;
  validTo_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  validTo_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  validTo_lt?: Maybe<DateTimeInput>;
  validTo_lte?: Maybe<DateTimeInput>;
  validTo_gt?: Maybe<DateTimeInput>;
  validTo_gte?: Maybe<DateTimeInput>;
  timedOut?: Maybe<DateTimeInput>;
  timedOut_not?: Maybe<DateTimeInput>;
  timedOut_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  timedOut_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  timedOut_lt?: Maybe<DateTimeInput>;
  timedOut_lte?: Maybe<DateTimeInput>;
  timedOut_gt?: Maybe<DateTimeInput>;
  timedOut_gte?: Maybe<DateTimeInput>;
  loggedOut?: Maybe<DateTimeInput>;
  loggedOut_not?: Maybe<DateTimeInput>;
  loggedOut_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  loggedOut_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  loggedOut_lt?: Maybe<DateTimeInput>;
  loggedOut_lte?: Maybe<DateTimeInput>;
  loggedOut_gt?: Maybe<DateTimeInput>;
  loggedOut_gte?: Maybe<DateTimeInput>;
  lastIpAddress?: Maybe<String>;
  lastIpAddress_not?: Maybe<String>;
  lastIpAddress_in?: Maybe<String[] | String>;
  lastIpAddress_not_in?: Maybe<String[] | String>;
  lastIpAddress_lt?: Maybe<String>;
  lastIpAddress_lte?: Maybe<String>;
  lastIpAddress_gt?: Maybe<String>;
  lastIpAddress_gte?: Maybe<String>;
  lastIpAddress_contains?: Maybe<String>;
  lastIpAddress_not_contains?: Maybe<String>;
  lastIpAddress_starts_with?: Maybe<String>;
  lastIpAddress_not_starts_with?: Maybe<String>;
  lastIpAddress_ends_with?: Maybe<String>;
  lastIpAddress_not_ends_with?: Maybe<String>;
  AND?: Maybe<SessionScalarWhereInput[] | SessionScalarWhereInput>;
  OR?: Maybe<SessionScalarWhereInput[] | SessionScalarWhereInput>;
  NOT?: Maybe<SessionScalarWhereInput[] | SessionScalarWhereInput>;
}

export interface SessionUpdateWithWhereUniqueWithoutUserInput {
  where: SessionWhereUniqueInput;
  data: SessionUpdateWithoutUserDataInput;
}

export interface SessionUpdateManyWithoutUserInput {
  create?: Maybe<
    SessionCreateWithoutUserInput[] | SessionCreateWithoutUserInput
  >;
  delete?: Maybe<SessionWhereUniqueInput[] | SessionWhereUniqueInput>;
  connect?: Maybe<SessionWhereUniqueInput[] | SessionWhereUniqueInput>;
  set?: Maybe<SessionWhereUniqueInput[] | SessionWhereUniqueInput>;
  disconnect?: Maybe<SessionWhereUniqueInput[] | SessionWhereUniqueInput>;
  update?: Maybe<
    | SessionUpdateWithWhereUniqueWithoutUserInput[]
    | SessionUpdateWithWhereUniqueWithoutUserInput
  >;
  upsert?: Maybe<
    | SessionUpsertWithWhereUniqueWithoutUserInput[]
    | SessionUpsertWithWhereUniqueWithoutUserInput
  >;
  deleteMany?: Maybe<SessionScalarWhereInput[] | SessionScalarWhereInput>;
  updateMany?: Maybe<
    | SessionUpdateManyWithWhereNestedInput[]
    | SessionUpdateManyWithWhereNestedInput
  >;
}

export interface ProfileUpdateManyDataInput {
  name?: Maybe<String>;
  timezone?: Maybe<String>;
  status?: Maybe<StatusType>;
  type?: Maybe<ProfileType>;
  isHidden?: Maybe<Boolean>;
  isBot?: Maybe<Boolean>;
  slogan?: Maybe<String>;
  pictureAvatar?: Maybe<String>;
  pictureBanner?: Maybe<String>;
}

export interface ProfileUpdateManyWithWhereNestedInput {
  where: ProfileScalarWhereInput;
  data: ProfileUpdateManyDataInput;
}

export interface UserCreateOneInput {
  create?: Maybe<UserCreateInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export type TagWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface UserCreateWithoutSessionsInput {
  id?: Maybe<ID_Input>;
  parent?: Maybe<UserCreateOneInput>;
  firstName: String;
  lastName: String;
  timezone: String;
  email: String;
  mobilePhone?: Maybe<String>;
  passwordSalt: String;
  passwordHash: String;
  isVerified: Boolean;
  challenge?: Maybe<String>;
  profiles?: Maybe<ProfileCreateManyWithoutCreatorInput>;
}

export interface ProfileSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ProfileWhereInput>;
  AND?: Maybe<ProfileSubscriptionWhereInput[] | ProfileSubscriptionWhereInput>;
  OR?: Maybe<ProfileSubscriptionWhereInput[] | ProfileSubscriptionWhereInput>;
  NOT?: Maybe<ProfileSubscriptionWhereInput[] | ProfileSubscriptionWhereInput>;
}

export interface ProfileCreateOneWithoutMembershipsInput {
  create?: Maybe<ProfileCreateWithoutMembershipsInput>;
  connect?: Maybe<ProfileWhereUniqueInput>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface UserPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt?: DateTimeOutput;
  firstName: String;
  lastName: String;
  timezone: String;
  email: String;
  mobilePhone?: String;
  passwordSalt: String;
  passwordHash: String;
  isVerified: Boolean;
  challenge?: String;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  firstName: () => Promise<String>;
  lastName: () => Promise<String>;
  timezone: () => Promise<String>;
  email: () => Promise<String>;
  mobilePhone: () => Promise<String>;
  passwordSalt: () => Promise<String>;
  passwordHash: () => Promise<String>;
  isVerified: () => Promise<Boolean>;
  challenge: () => Promise<String>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  firstName: () => Promise<AsyncIterator<String>>;
  lastName: () => Promise<AsyncIterator<String>>;
  timezone: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  mobilePhone: () => Promise<AsyncIterator<String>>;
  passwordSalt: () => Promise<AsyncIterator<String>>;
  passwordHash: () => Promise<AsyncIterator<String>>;
  isVerified: () => Promise<AsyncIterator<Boolean>>;
  challenge: () => Promise<AsyncIterator<String>>;
}

export interface GroupConnection {
  pageInfo: PageInfo;
  edges: GroupEdge[];
}

export interface GroupConnectionPromise
  extends Promise<GroupConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<GroupEdge>>() => T;
  aggregate: <T = AggregateGroupPromise>() => T;
}

export interface GroupConnectionSubscription
  extends Promise<AsyncIterator<GroupConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<GroupEdgeSubscription>>>() => T;
  aggregate: <T = AggregateGroupSubscription>() => T;
}

export interface SessionSubscriptionPayload {
  mutation: MutationType;
  node: Session;
  updatedFields: String[];
  previousValues: SessionPreviousValues;
}

export interface SessionSubscriptionPayloadPromise
  extends Promise<SessionSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = SessionPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = SessionPreviousValuesPromise>() => T;
}

export interface SessionSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<SessionSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = SessionSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = SessionPreviousValuesSubscription>() => T;
}

export interface User {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt?: DateTimeOutput;
  firstName: String;
  lastName: String;
  timezone: String;
  email: String;
  mobilePhone?: String;
  passwordSalt: String;
  passwordHash: String;
  isVerified: Boolean;
  challenge?: String;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  parent: <T = UserPromise>() => T;
  firstName: () => Promise<String>;
  lastName: () => Promise<String>;
  timezone: () => Promise<String>;
  email: () => Promise<String>;
  mobilePhone: () => Promise<String>;
  passwordSalt: () => Promise<String>;
  passwordHash: () => Promise<String>;
  isVerified: () => Promise<Boolean>;
  challenge: () => Promise<String>;
  profiles: <T = FragmentableArray<Profile>>(args?: {
    where?: ProfileWhereInput;
    orderBy?: ProfileOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  sessions: <T = FragmentableArray<Session>>(args?: {
    where?: SessionWhereInput;
    orderBy?: SessionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  parent: <T = UserSubscription>() => T;
  firstName: () => Promise<AsyncIterator<String>>;
  lastName: () => Promise<AsyncIterator<String>>;
  timezone: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  mobilePhone: () => Promise<AsyncIterator<String>>;
  passwordSalt: () => Promise<AsyncIterator<String>>;
  passwordHash: () => Promise<AsyncIterator<String>>;
  isVerified: () => Promise<AsyncIterator<Boolean>>;
  challenge: () => Promise<AsyncIterator<String>>;
  profiles: <T = Promise<AsyncIterator<ProfileSubscription>>>(args?: {
    where?: ProfileWhereInput;
    orderBy?: ProfileOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  sessions: <T = Promise<AsyncIterator<SessionSubscription>>>(args?: {
    where?: SessionWhereInput;
    orderBy?: SessionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  parent: <T = UserPromise>() => T;
  firstName: () => Promise<String>;
  lastName: () => Promise<String>;
  timezone: () => Promise<String>;
  email: () => Promise<String>;
  mobilePhone: () => Promise<String>;
  passwordSalt: () => Promise<String>;
  passwordHash: () => Promise<String>;
  isVerified: () => Promise<Boolean>;
  challenge: () => Promise<String>;
  profiles: <T = FragmentableArray<Profile>>(args?: {
    where?: ProfileWhereInput;
    orderBy?: ProfileOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  sessions: <T = FragmentableArray<Session>>(args?: {
    where?: SessionWhereInput;
    orderBy?: SessionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface EventEdge {
  node: Event;
  cursor: String;
}

export interface EventEdgePromise extends Promise<EventEdge>, Fragmentable {
  node: <T = EventPromise>() => T;
  cursor: () => Promise<String>;
}

export interface EventEdgeSubscription
  extends Promise<AsyncIterator<EventEdge>>,
    Fragmentable {
  node: <T = EventSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateEvent {
  count: Int;
}

export interface AggregateEventPromise
  extends Promise<AggregateEvent>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateEventSubscription
  extends Promise<AsyncIterator<AggregateEvent>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface AggregateTag {
  count: Int;
}

export interface AggregateTagPromise
  extends Promise<AggregateTag>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateTagSubscription
  extends Promise<AsyncIterator<AggregateTag>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface TagConnection {
  pageInfo: PageInfo;
  edges: TagEdge[];
}

export interface TagConnectionPromise
  extends Promise<TagConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<TagEdge>>() => T;
  aggregate: <T = AggregateTagPromise>() => T;
}

export interface TagConnectionSubscription
  extends Promise<AsyncIterator<TagConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<TagEdgeSubscription>>>() => T;
  aggregate: <T = AggregateTagSubscription>() => T;
}

export interface EventConnection {
  pageInfo: PageInfo;
  edges: EventEdge[];
}

export interface EventConnectionPromise
  extends Promise<EventConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<EventEdge>>() => T;
  aggregate: <T = AggregateEventPromise>() => T;
}

export interface EventConnectionSubscription
  extends Promise<AsyncIterator<EventConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<EventEdgeSubscription>>>() => T;
  aggregate: <T = AggregateEventSubscription>() => T;
}

export interface SessionEdge {
  node: Session;
  cursor: String;
}

export interface SessionEdgePromise extends Promise<SessionEdge>, Fragmentable {
  node: <T = SessionPromise>() => T;
  cursor: () => Promise<String>;
}

export interface SessionEdgeSubscription
  extends Promise<AsyncIterator<SessionEdge>>,
    Fragmentable {
  node: <T = SessionSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface TagSubscriptionPayload {
  mutation: MutationType;
  node: Tag;
  updatedFields: String[];
  previousValues: TagPreviousValues;
}

export interface TagSubscriptionPayloadPromise
  extends Promise<TagSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = TagPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = TagPreviousValuesPromise>() => T;
}

export interface TagSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<TagSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = TagSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = TagPreviousValuesSubscription>() => T;
}

export interface TagPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  name: String;
}

export interface TagPreviousValuesPromise
  extends Promise<TagPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  name: () => Promise<String>;
}

export interface TagPreviousValuesSubscription
  extends Promise<AsyncIterator<TagPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface Session {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt?: DateTimeOutput;
  csrfToken: String;
  authToken: String;
  validTo: DateTimeOutput;
  timedOut?: DateTimeOutput;
  loggedOut?: DateTimeOutput;
  lastIpAddress?: String;
}

export interface SessionPromise extends Promise<Session>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  csrfToken: () => Promise<String>;
  authToken: () => Promise<String>;
  validTo: () => Promise<DateTimeOutput>;
  timedOut: () => Promise<DateTimeOutput>;
  loggedOut: () => Promise<DateTimeOutput>;
  user: <T = UserPromise>() => T;
  lastUsedProfile: <T = ProfilePromise>() => T;
  location: <T = LocationPromise>() => T;
  lastIpAddress: () => Promise<String>;
}

export interface SessionSubscription
  extends Promise<AsyncIterator<Session>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  csrfToken: () => Promise<AsyncIterator<String>>;
  authToken: () => Promise<AsyncIterator<String>>;
  validTo: () => Promise<AsyncIterator<DateTimeOutput>>;
  timedOut: () => Promise<AsyncIterator<DateTimeOutput>>;
  loggedOut: () => Promise<AsyncIterator<DateTimeOutput>>;
  user: <T = UserSubscription>() => T;
  lastUsedProfile: <T = ProfileSubscription>() => T;
  location: <T = LocationSubscription>() => T;
  lastIpAddress: () => Promise<AsyncIterator<String>>;
}

export interface SessionNullablePromise
  extends Promise<Session | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  csrfToken: () => Promise<String>;
  authToken: () => Promise<String>;
  validTo: () => Promise<DateTimeOutput>;
  timedOut: () => Promise<DateTimeOutput>;
  loggedOut: () => Promise<DateTimeOutput>;
  user: <T = UserPromise>() => T;
  lastUsedProfile: <T = ProfilePromise>() => T;
  location: <T = LocationPromise>() => T;
  lastIpAddress: () => Promise<String>;
}

export interface AggregateProfile {
  count: Int;
}

export interface AggregateProfilePromise
  extends Promise<AggregateProfile>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateProfileSubscription
  extends Promise<AsyncIterator<AggregateProfile>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Event {
  id: ID_Output;
  createdAt: DateTimeOutput;
  type: EventType;
  isPinned: Boolean;
  isRead: Boolean;
  content?: Json;
}

export interface EventPromise extends Promise<Event>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  parent: <T = EventPromise>() => T;
  creator: <T = ProfilePromise>() => T;
  type: () => Promise<EventType>;
  isPinned: () => Promise<Boolean>;
  isRead: () => Promise<Boolean>;
  content: () => Promise<Json>;
  location: <T = LocationPromise>() => T;
  tags: <T = FragmentableArray<Tag>>(args?: {
    where?: TagWhereInput;
    orderBy?: TagOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface EventSubscription
  extends Promise<AsyncIterator<Event>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  parent: <T = EventSubscription>() => T;
  creator: <T = ProfileSubscription>() => T;
  type: () => Promise<AsyncIterator<EventType>>;
  isPinned: () => Promise<AsyncIterator<Boolean>>;
  isRead: () => Promise<AsyncIterator<Boolean>>;
  content: () => Promise<AsyncIterator<Json>>;
  location: <T = LocationSubscription>() => T;
  tags: <T = Promise<AsyncIterator<TagSubscription>>>(args?: {
    where?: TagWhereInput;
    orderBy?: TagOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface EventNullablePromise
  extends Promise<Event | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  parent: <T = EventPromise>() => T;
  creator: <T = ProfilePromise>() => T;
  type: () => Promise<EventType>;
  isPinned: () => Promise<Boolean>;
  isRead: () => Promise<Boolean>;
  content: () => Promise<Json>;
  location: <T = LocationPromise>() => T;
  tags: <T = FragmentableArray<Tag>>(args?: {
    where?: TagWhereInput;
    orderBy?: TagOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface ProfileConnection {
  pageInfo: PageInfo;
  edges: ProfileEdge[];
}

export interface ProfileConnectionPromise
  extends Promise<ProfileConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ProfileEdge>>() => T;
  aggregate: <T = AggregateProfilePromise>() => T;
}

export interface ProfileConnectionSubscription
  extends Promise<AsyncIterator<ProfileConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ProfileEdgeSubscription>>>() => T;
  aggregate: <T = AggregateProfileSubscription>() => T;
}

export interface EventSubscriptionPayload {
  mutation: MutationType;
  node: Event;
  updatedFields: String[];
  previousValues: EventPreviousValues;
}

export interface EventSubscriptionPayloadPromise
  extends Promise<EventSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = EventPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = EventPreviousValuesPromise>() => T;
}

export interface EventSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<EventSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = EventSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = EventPreviousValuesSubscription>() => T;
}

export interface MembershipEdge {
  node: Membership;
  cursor: String;
}

export interface MembershipEdgePromise
  extends Promise<MembershipEdge>,
    Fragmentable {
  node: <T = MembershipPromise>() => T;
  cursor: () => Promise<String>;
}

export interface MembershipEdgeSubscription
  extends Promise<AsyncIterator<MembershipEdge>>,
    Fragmentable {
  node: <T = MembershipSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface EventPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  type: EventType;
  isPinned: Boolean;
  isRead: Boolean;
  content?: Json;
}

export interface EventPreviousValuesPromise
  extends Promise<EventPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  type: () => Promise<EventType>;
  isPinned: () => Promise<Boolean>;
  isRead: () => Promise<Boolean>;
  content: () => Promise<Json>;
}

export interface EventPreviousValuesSubscription
  extends Promise<AsyncIterator<EventPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  type: () => Promise<AsyncIterator<EventType>>;
  isPinned: () => Promise<AsyncIterator<Boolean>>;
  isRead: () => Promise<AsyncIterator<Boolean>>;
  content: () => Promise<AsyncIterator<Json>>;
}

export interface AggregateLocation {
  count: Int;
}

export interface AggregateLocationPromise
  extends Promise<AggregateLocation>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateLocationSubscription
  extends Promise<AsyncIterator<AggregateLocation>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Group {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt?: DateTimeOutput;
  name: String;
  title?: String;
  description?: String;
  pictureLogo: String;
  pictureBanner?: String;
  type: GroupType;
  isHidden: Boolean;
  isPublic: Boolean;
  membersCount: Int;
  membersOnline: Int;
  eventsCount: Int;
}

export interface GroupPromise extends Promise<Group>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  creator: <T = ProfilePromise>() => T;
  name: () => Promise<String>;
  title: () => Promise<String>;
  description: () => Promise<String>;
  pictureLogo: () => Promise<String>;
  pictureBanner: () => Promise<String>;
  type: () => Promise<GroupType>;
  parent: <T = GroupPromise>() => T;
  isHidden: () => Promise<Boolean>;
  isPublic: () => Promise<Boolean>;
  members: <T = FragmentableArray<Membership>>(args?: {
    where?: MembershipWhereInput;
    orderBy?: MembershipOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  events: <T = FragmentableArray<Event>>(args?: {
    where?: EventWhereInput;
    orderBy?: EventOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  tags: <T = FragmentableArray<Tag>>(args?: {
    where?: TagWhereInput;
    orderBy?: TagOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  location: <T = LocationPromise>() => T;
  membersCount: () => Promise<Int>;
  membersOnline: () => Promise<Int>;
  eventsCount: () => Promise<Int>;
}

export interface GroupSubscription
  extends Promise<AsyncIterator<Group>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  creator: <T = ProfileSubscription>() => T;
  name: () => Promise<AsyncIterator<String>>;
  title: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  pictureLogo: () => Promise<AsyncIterator<String>>;
  pictureBanner: () => Promise<AsyncIterator<String>>;
  type: () => Promise<AsyncIterator<GroupType>>;
  parent: <T = GroupSubscription>() => T;
  isHidden: () => Promise<AsyncIterator<Boolean>>;
  isPublic: () => Promise<AsyncIterator<Boolean>>;
  members: <T = Promise<AsyncIterator<MembershipSubscription>>>(args?: {
    where?: MembershipWhereInput;
    orderBy?: MembershipOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  events: <T = Promise<AsyncIterator<EventSubscription>>>(args?: {
    where?: EventWhereInput;
    orderBy?: EventOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  tags: <T = Promise<AsyncIterator<TagSubscription>>>(args?: {
    where?: TagWhereInput;
    orderBy?: TagOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  location: <T = LocationSubscription>() => T;
  membersCount: () => Promise<AsyncIterator<Int>>;
  membersOnline: () => Promise<AsyncIterator<Int>>;
  eventsCount: () => Promise<AsyncIterator<Int>>;
}

export interface GroupNullablePromise
  extends Promise<Group | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  creator: <T = ProfilePromise>() => T;
  name: () => Promise<String>;
  title: () => Promise<String>;
  description: () => Promise<String>;
  pictureLogo: () => Promise<String>;
  pictureBanner: () => Promise<String>;
  type: () => Promise<GroupType>;
  parent: <T = GroupPromise>() => T;
  isHidden: () => Promise<Boolean>;
  isPublic: () => Promise<Boolean>;
  members: <T = FragmentableArray<Membership>>(args?: {
    where?: MembershipWhereInput;
    orderBy?: MembershipOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  events: <T = FragmentableArray<Event>>(args?: {
    where?: EventWhereInput;
    orderBy?: EventOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  tags: <T = FragmentableArray<Tag>>(args?: {
    where?: TagWhereInput;
    orderBy?: TagOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  location: <T = LocationPromise>() => T;
  membersCount: () => Promise<Int>;
  membersOnline: () => Promise<Int>;
  eventsCount: () => Promise<Int>;
}

export interface LocationConnection {
  pageInfo: PageInfo;
  edges: LocationEdge[];
}

export interface LocationConnectionPromise
  extends Promise<LocationConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<LocationEdge>>() => T;
  aggregate: <T = AggregateLocationPromise>() => T;
}

export interface LocationConnectionSubscription
  extends Promise<AsyncIterator<LocationConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<LocationEdgeSubscription>>>() => T;
  aggregate: <T = AggregateLocationSubscription>() => T;
}

export interface GroupSubscriptionPayload {
  mutation: MutationType;
  node: Group;
  updatedFields: String[];
  previousValues: GroupPreviousValues;
}

export interface GroupSubscriptionPayloadPromise
  extends Promise<GroupSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = GroupPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = GroupPreviousValuesPromise>() => T;
}

export interface GroupSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<GroupSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = GroupSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = GroupPreviousValuesSubscription>() => T;
}

export interface AggregateGroup {
  count: Int;
}

export interface AggregateGroupPromise
  extends Promise<AggregateGroup>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateGroupSubscription
  extends Promise<AsyncIterator<AggregateGroup>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface GroupPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt?: DateTimeOutput;
  name: String;
  title?: String;
  description?: String;
  pictureLogo: String;
  pictureBanner?: String;
  type: GroupType;
  isHidden: Boolean;
  isPublic: Boolean;
  membersCount: Int;
  membersOnline: Int;
  eventsCount: Int;
}

export interface GroupPreviousValuesPromise
  extends Promise<GroupPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  name: () => Promise<String>;
  title: () => Promise<String>;
  description: () => Promise<String>;
  pictureLogo: () => Promise<String>;
  pictureBanner: () => Promise<String>;
  type: () => Promise<GroupType>;
  isHidden: () => Promise<Boolean>;
  isPublic: () => Promise<Boolean>;
  membersCount: () => Promise<Int>;
  membersOnline: () => Promise<Int>;
  eventsCount: () => Promise<Int>;
}

export interface GroupPreviousValuesSubscription
  extends Promise<AsyncIterator<GroupPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  name: () => Promise<AsyncIterator<String>>;
  title: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  pictureLogo: () => Promise<AsyncIterator<String>>;
  pictureBanner: () => Promise<AsyncIterator<String>>;
  type: () => Promise<AsyncIterator<GroupType>>;
  isHidden: () => Promise<AsyncIterator<Boolean>>;
  isPublic: () => Promise<AsyncIterator<Boolean>>;
  membersCount: () => Promise<AsyncIterator<Int>>;
  membersOnline: () => Promise<AsyncIterator<Int>>;
  eventsCount: () => Promise<AsyncIterator<Int>>;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface Membership {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt?: DateTimeOutput;
  isBlocked: Boolean;
  groupPinned: Boolean;
  showHistory: Boolean;
  hasLeft: Boolean;
  hasJoined: Boolean;
}

export interface MembershipPromise extends Promise<Membership>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  parent: <T = MembershipPromise>() => T;
  member: <T = ProfilePromise>() => T;
  isBlocked: () => Promise<Boolean>;
  group: <T = GroupPromise>() => T;
  groupPinned: () => Promise<Boolean>;
  showHistory: () => Promise<Boolean>;
  hasLeft: () => Promise<Boolean>;
  hasJoined: () => Promise<Boolean>;
}

export interface MembershipSubscription
  extends Promise<AsyncIterator<Membership>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  parent: <T = MembershipSubscription>() => T;
  member: <T = ProfileSubscription>() => T;
  isBlocked: () => Promise<AsyncIterator<Boolean>>;
  group: <T = GroupSubscription>() => T;
  groupPinned: () => Promise<AsyncIterator<Boolean>>;
  showHistory: () => Promise<AsyncIterator<Boolean>>;
  hasLeft: () => Promise<AsyncIterator<Boolean>>;
  hasJoined: () => Promise<AsyncIterator<Boolean>>;
}

export interface MembershipNullablePromise
  extends Promise<Membership | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  parent: <T = MembershipPromise>() => T;
  member: <T = ProfilePromise>() => T;
  isBlocked: () => Promise<Boolean>;
  group: <T = GroupPromise>() => T;
  groupPinned: () => Promise<Boolean>;
  showHistory: () => Promise<Boolean>;
  hasLeft: () => Promise<Boolean>;
  hasJoined: () => Promise<Boolean>;
}

export interface TagEdge {
  node: Tag;
  cursor: String;
}

export interface TagEdgePromise extends Promise<TagEdge>, Fragmentable {
  node: <T = TagPromise>() => T;
  cursor: () => Promise<String>;
}

export interface TagEdgeSubscription
  extends Promise<AsyncIterator<TagEdge>>,
    Fragmentable {
  node: <T = TagSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface LocationSubscriptionPayload {
  mutation: MutationType;
  node: Location;
  updatedFields: String[];
  previousValues: LocationPreviousValues;
}

export interface LocationSubscriptionPayloadPromise
  extends Promise<LocationSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = LocationPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = LocationPreviousValuesPromise>() => T;
}

export interface LocationSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<LocationSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = LocationSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = LocationPreviousValuesSubscription>() => T;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface LocationPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  type: LocationType;
  name: String;
  category?: String;
  address?: String;
  zipCode?: String;
  city?: String;
  country?: String;
  continent?: String;
  planet?: String;
  latitude: Float;
  longitude: Float;
  radiusMeter?: Float;
  visitorsCount: Int;
}

export interface LocationPreviousValuesPromise
  extends Promise<LocationPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  type: () => Promise<LocationType>;
  name: () => Promise<String>;
  category: () => Promise<String>;
  address: () => Promise<String>;
  zipCode: () => Promise<String>;
  city: () => Promise<String>;
  country: () => Promise<String>;
  continent: () => Promise<String>;
  planet: () => Promise<String>;
  latitude: () => Promise<Float>;
  longitude: () => Promise<Float>;
  radiusMeter: () => Promise<Float>;
  visitorsCount: () => Promise<Int>;
}

export interface LocationPreviousValuesSubscription
  extends Promise<AsyncIterator<LocationPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  type: () => Promise<AsyncIterator<LocationType>>;
  name: () => Promise<AsyncIterator<String>>;
  category: () => Promise<AsyncIterator<String>>;
  address: () => Promise<AsyncIterator<String>>;
  zipCode: () => Promise<AsyncIterator<String>>;
  city: () => Promise<AsyncIterator<String>>;
  country: () => Promise<AsyncIterator<String>>;
  continent: () => Promise<AsyncIterator<String>>;
  planet: () => Promise<AsyncIterator<String>>;
  latitude: () => Promise<AsyncIterator<Float>>;
  longitude: () => Promise<AsyncIterator<Float>>;
  radiusMeter: () => Promise<AsyncIterator<Float>>;
  visitorsCount: () => Promise<AsyncIterator<Int>>;
}

export interface ProfileEdge {
  node: Profile;
  cursor: String;
}

export interface ProfileEdgePromise extends Promise<ProfileEdge>, Fragmentable {
  node: <T = ProfilePromise>() => T;
  cursor: () => Promise<String>;
}

export interface ProfileEdgeSubscription
  extends Promise<AsyncIterator<ProfileEdge>>,
    Fragmentable {
  node: <T = ProfileSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface SessionPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt?: DateTimeOutput;
  csrfToken: String;
  authToken: String;
  validTo: DateTimeOutput;
  timedOut?: DateTimeOutput;
  loggedOut?: DateTimeOutput;
  lastIpAddress?: String;
}

export interface SessionPreviousValuesPromise
  extends Promise<SessionPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  csrfToken: () => Promise<String>;
  authToken: () => Promise<String>;
  validTo: () => Promise<DateTimeOutput>;
  timedOut: () => Promise<DateTimeOutput>;
  loggedOut: () => Promise<DateTimeOutput>;
  lastIpAddress: () => Promise<String>;
}

export interface SessionPreviousValuesSubscription
  extends Promise<AsyncIterator<SessionPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  csrfToken: () => Promise<AsyncIterator<String>>;
  authToken: () => Promise<AsyncIterator<String>>;
  validTo: () => Promise<AsyncIterator<DateTimeOutput>>;
  timedOut: () => Promise<AsyncIterator<DateTimeOutput>>;
  loggedOut: () => Promise<AsyncIterator<DateTimeOutput>>;
  lastIpAddress: () => Promise<AsyncIterator<String>>;
}

export interface MembershipConnection {
  pageInfo: PageInfo;
  edges: MembershipEdge[];
}

export interface MembershipConnectionPromise
  extends Promise<MembershipConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<MembershipEdge>>() => T;
  aggregate: <T = AggregateMembershipPromise>() => T;
}

export interface MembershipConnectionSubscription
  extends Promise<AsyncIterator<MembershipConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<MembershipEdgeSubscription>>>() => T;
  aggregate: <T = AggregateMembershipSubscription>() => T;
}

export interface MembershipSubscriptionPayload {
  mutation: MutationType;
  node: Membership;
  updatedFields: String[];
  previousValues: MembershipPreviousValues;
}

export interface MembershipSubscriptionPayloadPromise
  extends Promise<MembershipSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = MembershipPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = MembershipPreviousValuesPromise>() => T;
}

export interface MembershipSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<MembershipSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = MembershipSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = MembershipPreviousValuesSubscription>() => T;
}

export interface Profile {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt?: DateTimeOutput;
  name: String;
  timezone?: String;
  status: StatusType;
  type: ProfileType;
  isHidden: Boolean;
  isBot: Boolean;
  slogan?: String;
  pictureAvatar: String;
  pictureBanner?: String;
}

export interface ProfilePromise extends Promise<Profile>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  creator: <T = UserPromise>() => T;
  name: () => Promise<String>;
  timezone: () => Promise<String>;
  status: () => Promise<StatusType>;
  type: () => Promise<ProfileType>;
  isHidden: () => Promise<Boolean>;
  isBot: () => Promise<Boolean>;
  slogan: () => Promise<String>;
  pictureAvatar: () => Promise<String>;
  pictureBanner: () => Promise<String>;
  memberships: <T = FragmentableArray<Membership>>(args?: {
    where?: MembershipWhereInput;
    orderBy?: MembershipOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface ProfileSubscription
  extends Promise<AsyncIterator<Profile>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  creator: <T = UserSubscription>() => T;
  name: () => Promise<AsyncIterator<String>>;
  timezone: () => Promise<AsyncIterator<String>>;
  status: () => Promise<AsyncIterator<StatusType>>;
  type: () => Promise<AsyncIterator<ProfileType>>;
  isHidden: () => Promise<AsyncIterator<Boolean>>;
  isBot: () => Promise<AsyncIterator<Boolean>>;
  slogan: () => Promise<AsyncIterator<String>>;
  pictureAvatar: () => Promise<AsyncIterator<String>>;
  pictureBanner: () => Promise<AsyncIterator<String>>;
  memberships: <T = Promise<AsyncIterator<MembershipSubscription>>>(args?: {
    where?: MembershipWhereInput;
    orderBy?: MembershipOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface ProfileNullablePromise
  extends Promise<Profile | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  creator: <T = UserPromise>() => T;
  name: () => Promise<String>;
  timezone: () => Promise<String>;
  status: () => Promise<StatusType>;
  type: () => Promise<ProfileType>;
  isHidden: () => Promise<Boolean>;
  isBot: () => Promise<Boolean>;
  slogan: () => Promise<String>;
  pictureAvatar: () => Promise<String>;
  pictureBanner: () => Promise<String>;
  memberships: <T = FragmentableArray<Membership>>(args?: {
    where?: MembershipWhereInput;
    orderBy?: MembershipOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface MembershipPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt?: DateTimeOutput;
  isBlocked: Boolean;
  groupPinned: Boolean;
  showHistory: Boolean;
  hasLeft: Boolean;
  hasJoined: Boolean;
}

export interface MembershipPreviousValuesPromise
  extends Promise<MembershipPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  isBlocked: () => Promise<Boolean>;
  groupPinned: () => Promise<Boolean>;
  showHistory: () => Promise<Boolean>;
  hasLeft: () => Promise<Boolean>;
  hasJoined: () => Promise<Boolean>;
}

export interface MembershipPreviousValuesSubscription
  extends Promise<AsyncIterator<MembershipPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  isBlocked: () => Promise<AsyncIterator<Boolean>>;
  groupPinned: () => Promise<AsyncIterator<Boolean>>;
  showHistory: () => Promise<AsyncIterator<Boolean>>;
  hasLeft: () => Promise<AsyncIterator<Boolean>>;
  hasJoined: () => Promise<AsyncIterator<Boolean>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface SessionConnection {
  pageInfo: PageInfo;
  edges: SessionEdge[];
}

export interface SessionConnectionPromise
  extends Promise<SessionConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<SessionEdge>>() => T;
  aggregate: <T = AggregateSessionPromise>() => T;
}

export interface SessionConnectionSubscription
  extends Promise<AsyncIterator<SessionConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<SessionEdgeSubscription>>>() => T;
  aggregate: <T = AggregateSessionSubscription>() => T;
}

export interface Location {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  type: LocationType;
  name: String;
  category?: String;
  address?: String;
  zipCode?: String;
  city?: String;
  country?: String;
  continent?: String;
  planet?: String;
  latitude: Float;
  longitude: Float;
  radiusMeter?: Float;
  visitorsCount: Int;
}

export interface LocationPromise extends Promise<Location>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  creator: <T = ProfilePromise>() => T;
  type: () => Promise<LocationType>;
  name: () => Promise<String>;
  category: () => Promise<String>;
  address: () => Promise<String>;
  zipCode: () => Promise<String>;
  city: () => Promise<String>;
  country: () => Promise<String>;
  continent: () => Promise<String>;
  planet: () => Promise<String>;
  latitude: () => Promise<Float>;
  longitude: () => Promise<Float>;
  radiusMeter: () => Promise<Float>;
  tags: <T = FragmentableArray<Tag>>(args?: {
    where?: TagWhereInput;
    orderBy?: TagOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  visitorsCount: () => Promise<Int>;
}

export interface LocationSubscription
  extends Promise<AsyncIterator<Location>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  creator: <T = ProfileSubscription>() => T;
  type: () => Promise<AsyncIterator<LocationType>>;
  name: () => Promise<AsyncIterator<String>>;
  category: () => Promise<AsyncIterator<String>>;
  address: () => Promise<AsyncIterator<String>>;
  zipCode: () => Promise<AsyncIterator<String>>;
  city: () => Promise<AsyncIterator<String>>;
  country: () => Promise<AsyncIterator<String>>;
  continent: () => Promise<AsyncIterator<String>>;
  planet: () => Promise<AsyncIterator<String>>;
  latitude: () => Promise<AsyncIterator<Float>>;
  longitude: () => Promise<AsyncIterator<Float>>;
  radiusMeter: () => Promise<AsyncIterator<Float>>;
  tags: <T = Promise<AsyncIterator<TagSubscription>>>(args?: {
    where?: TagWhereInput;
    orderBy?: TagOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  visitorsCount: () => Promise<AsyncIterator<Int>>;
}

export interface LocationNullablePromise
  extends Promise<Location | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  creator: <T = ProfilePromise>() => T;
  type: () => Promise<LocationType>;
  name: () => Promise<String>;
  category: () => Promise<String>;
  address: () => Promise<String>;
  zipCode: () => Promise<String>;
  city: () => Promise<String>;
  country: () => Promise<String>;
  continent: () => Promise<String>;
  planet: () => Promise<String>;
  latitude: () => Promise<Float>;
  longitude: () => Promise<Float>;
  radiusMeter: () => Promise<Float>;
  tags: <T = FragmentableArray<Tag>>(args?: {
    where?: TagWhereInput;
    orderBy?: TagOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  visitorsCount: () => Promise<Int>;
}

export interface ProfilePreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt?: DateTimeOutput;
  name: String;
  timezone?: String;
  status: StatusType;
  type: ProfileType;
  isHidden: Boolean;
  isBot: Boolean;
  slogan?: String;
  pictureAvatar: String;
  pictureBanner?: String;
}

export interface ProfilePreviousValuesPromise
  extends Promise<ProfilePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  name: () => Promise<String>;
  timezone: () => Promise<String>;
  status: () => Promise<StatusType>;
  type: () => Promise<ProfileType>;
  isHidden: () => Promise<Boolean>;
  isBot: () => Promise<Boolean>;
  slogan: () => Promise<String>;
  pictureAvatar: () => Promise<String>;
  pictureBanner: () => Promise<String>;
}

export interface ProfilePreviousValuesSubscription
  extends Promise<AsyncIterator<ProfilePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  name: () => Promise<AsyncIterator<String>>;
  timezone: () => Promise<AsyncIterator<String>>;
  status: () => Promise<AsyncIterator<StatusType>>;
  type: () => Promise<AsyncIterator<ProfileType>>;
  isHidden: () => Promise<AsyncIterator<Boolean>>;
  isBot: () => Promise<AsyncIterator<Boolean>>;
  slogan: () => Promise<AsyncIterator<String>>;
  pictureAvatar: () => Promise<AsyncIterator<String>>;
  pictureBanner: () => Promise<AsyncIterator<String>>;
}

export interface ProfileSubscriptionPayload {
  mutation: MutationType;
  node: Profile;
  updatedFields: String[];
  previousValues: ProfilePreviousValues;
}

export interface ProfileSubscriptionPayloadPromise
  extends Promise<ProfileSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ProfilePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ProfilePreviousValuesPromise>() => T;
}

export interface ProfileSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ProfileSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ProfileSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ProfilePreviousValuesSubscription>() => T;
}

export interface Tag {
  id: ID_Output;
  createdAt: DateTimeOutput;
  name: String;
}

export interface TagPromise extends Promise<Tag>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  creator: <T = ProfilePromise>() => T;
  name: () => Promise<String>;
  parents: <T = FragmentableArray<Tag>>(args?: {
    where?: TagWhereInput;
    orderBy?: TagOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface TagSubscription
  extends Promise<AsyncIterator<Tag>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  creator: <T = ProfileSubscription>() => T;
  name: () => Promise<AsyncIterator<String>>;
  parents: <T = Promise<AsyncIterator<TagSubscription>>>(args?: {
    where?: TagWhereInput;
    orderBy?: TagOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface TagNullablePromise extends Promise<Tag | null>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  creator: <T = ProfilePromise>() => T;
  name: () => Promise<String>;
  parents: <T = FragmentableArray<Tag>>(args?: {
    where?: TagWhereInput;
    orderBy?: TagOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface AggregateMembership {
  count: Int;
}

export interface AggregateMembershipPromise
  extends Promise<AggregateMembership>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateMembershipSubscription
  extends Promise<AsyncIterator<AggregateMembership>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface AggregateSession {
  count: Int;
}

export interface AggregateSessionPromise
  extends Promise<AggregateSession>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateSessionSubscription
  extends Promise<AsyncIterator<AggregateSession>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface GroupEdge {
  node: Group;
  cursor: String;
}

export interface GroupEdgePromise extends Promise<GroupEdge>, Fragmentable {
  node: <T = GroupPromise>() => T;
  cursor: () => Promise<String>;
}

export interface GroupEdgeSubscription
  extends Promise<AsyncIterator<GroupEdge>>,
    Fragmentable {
  node: <T = GroupSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface LocationEdge {
  node: Location;
  cursor: String;
}

export interface LocationEdgePromise
  extends Promise<LocationEdge>,
    Fragmentable {
  node: <T = LocationPromise>() => T;
  cursor: () => Promise<String>;
}

export interface LocationEdgeSubscription
  extends Promise<AsyncIterator<LocationEdge>>,
    Fragmentable {
  node: <T = LocationSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point).
*/
export type Float = number;

export type Long = string;

export type Json = any;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "User",
    embedded: false
  },
  {
    name: "Session",
    embedded: false
  },
  {
    name: "Profile",
    embedded: false
  },
  {
    name: "StatusType",
    embedded: false
  },
  {
    name: "ProfileType",
    embedded: false
  },
  {
    name: "Membership",
    embedded: false
  },
  {
    name: "Group",
    embedded: false
  },
  {
    name: "GroupType",
    embedded: false
  },
  {
    name: "Tag",
    embedded: false
  },
  {
    name: "Location",
    embedded: false
  },
  {
    name: "LocationType",
    embedded: false
  },
  {
    name: "Event",
    embedded: false
  },
  {
    name: "EventType",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const Prisma = makePrismaClientClass<ClientConstructor<Prisma>>({
  typeDefs,
  models,
  endpoint: `http://192.168.99.100:4466/AbisStarterkit/dev`
});
export const prisma = new Prisma();
