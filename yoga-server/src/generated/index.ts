// Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  agent: (where?: AgentWhereInput) => Promise<boolean>;
  contentEncoding: (where?: ContentEncodingWhereInput) => Promise<boolean>;
  entry: (where?: EntryWhereInput) => Promise<boolean>;
  group: (where?: GroupWhereInput) => Promise<boolean>;
  location: (where?: LocationWhereInput) => Promise<boolean>;
  membership: (where?: MembershipWhereInput) => Promise<boolean>;
  session: (where?: SessionWhereInput) => Promise<boolean>;
  tag: (where?: TagWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  agent: (where: AgentWhereUniqueInput) => AgentNullablePromise;
  agents: (args?: {
    where?: AgentWhereInput;
    orderBy?: AgentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Agent>;
  agentsConnection: (args?: {
    where?: AgentWhereInput;
    orderBy?: AgentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => AgentConnectionPromise;
  contentEncoding: (
    where: ContentEncodingWhereUniqueInput
  ) => ContentEncodingNullablePromise;
  contentEncodings: (args?: {
    where?: ContentEncodingWhereInput;
    orderBy?: ContentEncodingOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<ContentEncoding>;
  contentEncodingsConnection: (args?: {
    where?: ContentEncodingWhereInput;
    orderBy?: ContentEncodingOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ContentEncodingConnectionPromise;
  entry: (where: EntryWhereUniqueInput) => EntryNullablePromise;
  entries: (args?: {
    where?: EntryWhereInput;
    orderBy?: EntryOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Entry>;
  entriesConnection: (args?: {
    where?: EntryWhereInput;
    orderBy?: EntryOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => EntryConnectionPromise;
  group: (where: GroupWhereUniqueInput) => GroupNullablePromise;
  groups: (args?: {
    where?: GroupWhereInput;
    orderBy?: GroupOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Group>;
  groupsConnection: (args?: {
    where?: GroupWhereInput;
    orderBy?: GroupOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => GroupConnectionPromise;
  location: (where: LocationWhereUniqueInput) => LocationNullablePromise;
  locations: (args?: {
    where?: LocationWhereInput;
    orderBy?: LocationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Location>;
  locationsConnection: (args?: {
    where?: LocationWhereInput;
    orderBy?: LocationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => LocationConnectionPromise;
  membership: (where: MembershipWhereUniqueInput) => MembershipNullablePromise;
  memberships: (args?: {
    where?: MembershipWhereInput;
    orderBy?: MembershipOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Membership>;
  membershipsConnection: (args?: {
    where?: MembershipWhereInput;
    orderBy?: MembershipOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => MembershipConnectionPromise;
  session: (where: SessionWhereUniqueInput) => SessionNullablePromise;
  sessions: (args?: {
    where?: SessionWhereInput;
    orderBy?: SessionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Session>;
  sessionsConnection: (args?: {
    where?: SessionWhereInput;
    orderBy?: SessionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => SessionConnectionPromise;
  tag: (where: TagWhereUniqueInput) => TagNullablePromise;
  tags: (args?: {
    where?: TagWhereInput;
    orderBy?: TagOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Tag>;
  tagsConnection: (args?: {
    where?: TagWhereInput;
    orderBy?: TagOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => TagConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createAgent: (data: AgentCreateInput) => AgentPromise;
  updateAgent: (args: {
    data: AgentUpdateInput;
    where: AgentWhereUniqueInput;
  }) => AgentPromise;
  updateManyAgents: (args: {
    data: AgentUpdateManyMutationInput;
    where?: AgentWhereInput;
  }) => BatchPayloadPromise;
  upsertAgent: (args: {
    where: AgentWhereUniqueInput;
    create: AgentCreateInput;
    update: AgentUpdateInput;
  }) => AgentPromise;
  deleteAgent: (where: AgentWhereUniqueInput) => AgentPromise;
  deleteManyAgents: (where?: AgentWhereInput) => BatchPayloadPromise;
  createContentEncoding: (
    data: ContentEncodingCreateInput
  ) => ContentEncodingPromise;
  updateContentEncoding: (args: {
    data: ContentEncodingUpdateInput;
    where: ContentEncodingWhereUniqueInput;
  }) => ContentEncodingPromise;
  updateManyContentEncodings: (args: {
    data: ContentEncodingUpdateManyMutationInput;
    where?: ContentEncodingWhereInput;
  }) => BatchPayloadPromise;
  upsertContentEncoding: (args: {
    where: ContentEncodingWhereUniqueInput;
    create: ContentEncodingCreateInput;
    update: ContentEncodingUpdateInput;
  }) => ContentEncodingPromise;
  deleteContentEncoding: (
    where: ContentEncodingWhereUniqueInput
  ) => ContentEncodingPromise;
  deleteManyContentEncodings: (
    where?: ContentEncodingWhereInput
  ) => BatchPayloadPromise;
  createEntry: (data: EntryCreateInput) => EntryPromise;
  updateEntry: (args: {
    data: EntryUpdateInput;
    where: EntryWhereUniqueInput;
  }) => EntryPromise;
  updateManyEntries: (args: {
    data: EntryUpdateManyMutationInput;
    where?: EntryWhereInput;
  }) => BatchPayloadPromise;
  upsertEntry: (args: {
    where: EntryWhereUniqueInput;
    create: EntryCreateInput;
    update: EntryUpdateInput;
  }) => EntryPromise;
  deleteEntry: (where: EntryWhereUniqueInput) => EntryPromise;
  deleteManyEntries: (where?: EntryWhereInput) => BatchPayloadPromise;
  createGroup: (data: GroupCreateInput) => GroupPromise;
  updateGroup: (args: {
    data: GroupUpdateInput;
    where: GroupWhereUniqueInput;
  }) => GroupPromise;
  updateManyGroups: (args: {
    data: GroupUpdateManyMutationInput;
    where?: GroupWhereInput;
  }) => BatchPayloadPromise;
  upsertGroup: (args: {
    where: GroupWhereUniqueInput;
    create: GroupCreateInput;
    update: GroupUpdateInput;
  }) => GroupPromise;
  deleteGroup: (where: GroupWhereUniqueInput) => GroupPromise;
  deleteManyGroups: (where?: GroupWhereInput) => BatchPayloadPromise;
  createLocation: (data: LocationCreateInput) => LocationPromise;
  updateLocation: (args: {
    data: LocationUpdateInput;
    where: LocationWhereUniqueInput;
  }) => LocationPromise;
  updateManyLocations: (args: {
    data: LocationUpdateManyMutationInput;
    where?: LocationWhereInput;
  }) => BatchPayloadPromise;
  upsertLocation: (args: {
    where: LocationWhereUniqueInput;
    create: LocationCreateInput;
    update: LocationUpdateInput;
  }) => LocationPromise;
  deleteLocation: (where: LocationWhereUniqueInput) => LocationPromise;
  deleteManyLocations: (where?: LocationWhereInput) => BatchPayloadPromise;
  createMembership: (data: MembershipCreateInput) => MembershipPromise;
  updateMembership: (args: {
    data: MembershipUpdateInput;
    where: MembershipWhereUniqueInput;
  }) => MembershipPromise;
  updateManyMemberships: (args: {
    data: MembershipUpdateManyMutationInput;
    where?: MembershipWhereInput;
  }) => BatchPayloadPromise;
  upsertMembership: (args: {
    where: MembershipWhereUniqueInput;
    create: MembershipCreateInput;
    update: MembershipUpdateInput;
  }) => MembershipPromise;
  deleteMembership: (where: MembershipWhereUniqueInput) => MembershipPromise;
  deleteManyMemberships: (where?: MembershipWhereInput) => BatchPayloadPromise;
  createSession: (data: SessionCreateInput) => SessionPromise;
  updateSession: (args: {
    data: SessionUpdateInput;
    where: SessionWhereUniqueInput;
  }) => SessionPromise;
  updateManySessions: (args: {
    data: SessionUpdateManyMutationInput;
    where?: SessionWhereInput;
  }) => BatchPayloadPromise;
  upsertSession: (args: {
    where: SessionWhereUniqueInput;
    create: SessionCreateInput;
    update: SessionUpdateInput;
  }) => SessionPromise;
  deleteSession: (where: SessionWhereUniqueInput) => SessionPromise;
  deleteManySessions: (where?: SessionWhereInput) => BatchPayloadPromise;
  createTag: (data: TagCreateInput) => TagPromise;
  updateTag: (args: {
    data: TagUpdateInput;
    where: TagWhereUniqueInput;
  }) => TagPromise;
  updateManyTags: (args: {
    data: TagUpdateManyMutationInput;
    where?: TagWhereInput;
  }) => BatchPayloadPromise;
  upsertTag: (args: {
    where: TagWhereUniqueInput;
    create: TagCreateInput;
    update: TagUpdateInput;
  }) => TagPromise;
  deleteTag: (where: TagWhereUniqueInput) => TagPromise;
  deleteManyTags: (where?: TagWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  agent: (
    where?: AgentSubscriptionWhereInput
  ) => AgentSubscriptionPayloadSubscription;
  contentEncoding: (
    where?: ContentEncodingSubscriptionWhereInput
  ) => ContentEncodingSubscriptionPayloadSubscription;
  entry: (
    where?: EntrySubscriptionWhereInput
  ) => EntrySubscriptionPayloadSubscription;
  group: (
    where?: GroupSubscriptionWhereInput
  ) => GroupSubscriptionPayloadSubscription;
  location: (
    where?: LocationSubscriptionWhereInput
  ) => LocationSubscriptionPayloadSubscription;
  membership: (
    where?: MembershipSubscriptionWhereInput
  ) => MembershipSubscriptionPayloadSubscription;
  session: (
    where?: SessionSubscriptionWhereInput
  ) => SessionSubscriptionPayloadSubscription;
  tag: (
    where?: TagSubscriptionWhereInput
  ) => TagSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type TagOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "type_ASC"
  | "type_DESC"
  | "owner_ASC"
  | "owner_DESC"
  | "createdBy_ASC"
  | "createdBy_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "value_ASC"
  | "value_DESC";

export type EncodingType =
  | "Custom"
  | "Base64"
  | "Microformat"
  | "TableSchema"
  | "JsonSchema"
  | "XmlSchema"
  | "GqlSchema"
  | "RdfSchema"
  | "Owl";

export type MembershipOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "type_ASC"
  | "type_DESC"
  | "createdBy_ASC"
  | "createdBy_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedBy_ASC"
  | "updatedBy_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "showHistory_ASC"
  | "showHistory_DESC";

export type AgentType = "Profile" | "Service" | "Inbox";

export type MembershipType = "Invite" | "Single" | "Multi";

export type SessionOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "sessionToken_ASC"
  | "sessionToken_DESC"
  | "csrfToken_ASC"
  | "csrfToken_DESC"
  | "bearerToken_ASC"
  | "bearerToken_DESC"
  | "clientTime_ASC"
  | "clientTime_DESC"
  | "validTo_ASC"
  | "validTo_DESC"
  | "timedOut_ASC"
  | "timedOut_DESC"
  | "loggedOut_ASC"
  | "loggedOut_DESC"
  | "ipAddress_ASC"
  | "ipAddress_DESC";

export type ProfileType = "Business" | "Private" | "Anonymous";

export type UserType = "Person" | "System";

export type GroupType = "Stash" | "Channel" | "Room";

export type LocationOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "type_ASC"
  | "type_DESC"
  | "owner_ASC"
  | "owner_DESC"
  | "createdBy_ASC"
  | "createdBy_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedBy_ASC"
  | "updatedBy_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "name_ASC"
  | "name_DESC"
  | "osmNodeId_ASC"
  | "osmNodeId_DESC"
  | "addressLine1_ASC"
  | "addressLine1_DESC"
  | "addressLine2_ASC"
  | "addressLine2_DESC"
  | "addressCity_ASC"
  | "addressCity_DESC"
  | "addressZipCode_ASC"
  | "addressZipCode_DESC"
  | "addressCountry_ASC"
  | "addressCountry_DESC"
  | "geoPointLatitude_ASC"
  | "geoPointLatitude_DESC"
  | "geoPointLongitude_ASC"
  | "geoPointLongitude_DESC"
  | "geoPointRadiusMeter_ASC"
  | "geoPointRadiusMeter_DESC";

export type ContentEncodingOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "type_ASC"
  | "type_DESC"
  | "maintainer_ASC"
  | "maintainer_DESC"
  | "createdBy_ASC"
  | "createdBy_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedBy_ASC"
  | "updatedBy_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "name_ASC"
  | "name_DESC"
  | "charset_ASC"
  | "charset_DESC";

export type EntryType =
  | "Empty"
  | "Json"
  | "Table"
  | "Document"
  | "Picture"
  | "File"
  | "Thing";

export type AgentOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "type_ASC"
  | "type_DESC"
  | "owner_ASC"
  | "owner_DESC"
  | "createdBy_ASC"
  | "createdBy_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedBy_ASC"
  | "updatedBy_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "name_ASC"
  | "name_DESC"
  | "status_ASC"
  | "status_DESC"
  | "timezone_ASC"
  | "timezone_DESC"
  | "profileSlogan_ASC"
  | "profileSlogan_DESC"
  | "profileAvatar_ASC"
  | "profileAvatar_DESC"
  | "profileJobTitle_ASC"
  | "profileJobTitle_DESC"
  | "profileBanner_ASC"
  | "profileBanner_DESC"
  | "profileType_ASC"
  | "profileType_DESC"
  | "serviceDescription_ASC"
  | "serviceDescription_DESC"
  | "inboxDescription_ASC"
  | "inboxDescription_DESC";

export type EntryOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "type_ASC"
  | "type_DESC"
  | "owner_ASC"
  | "owner_DESC"
  | "createdBy_ASC"
  | "createdBy_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedBy_ASC"
  | "updatedBy_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "name_ASC"
  | "name_DESC"
  | "content_ASC"
  | "content_DESC"
  | "contentEncoding_ASC"
  | "contentEncoding_DESC";

export type GroupOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "type_ASC"
  | "type_DESC"
  | "owner_ASC"
  | "owner_DESC"
  | "createdBy_ASC"
  | "createdBy_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedBy_ASC"
  | "updatedBy_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "isPublic_ASC"
  | "isPublic_DESC"
  | "name_ASC"
  | "name_DESC"
  | "title_ASC"
  | "title_DESC"
  | "description_ASC"
  | "description_DESC"
  | "logo_ASC"
  | "logo_DESC"
  | "banner_ASC"
  | "banner_DESC"
  | "inbox_ASC"
  | "inbox_DESC";

export type LocationType = "OpenStreetMap" | "Address" | "GeoPoint";

export type AgentStatus =
  | "Offline"
  | "DoNotDisturb"
  | "Away"
  | "Available"
  | "Running"
  | "Suspended"
  | "Failed"
  | "Succeeded"
  | "Open"
  | "Closed";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "type_ASC"
  | "type_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "email_ASC"
  | "email_DESC"
  | "timezone_ASC"
  | "timezone_DESC"
  | "challenge_ASC"
  | "challenge_DESC"
  | "passwordSalt_ASC"
  | "passwordSalt_DESC"
  | "passwordHash_ASC"
  | "passwordHash_DESC"
  | "firstName_ASC"
  | "firstName_DESC"
  | "lastName_ASC"
  | "lastName_DESC"
  | "phone_ASC"
  | "phone_DESC"
  | "mobilePhone_ASC"
  | "mobilePhone_DESC"
  | "organizationName_ASC"
  | "organizationName_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface TagUpdateManyDataInput {
  type?: Maybe<String>;
  owner?: Maybe<ID_Input>;
  createdBy?: Maybe<ID_Input>;
  value?: Maybe<String>;
}

export type AgentWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  email?: Maybe<String>;
}>;

export interface EntryUpdateManyWithWhereNestedInput {
  where: EntryScalarWhereInput;
  data: EntryUpdateManyDataInput;
}

export interface UserCreateOneWithoutSessionsInput {
  create?: Maybe<UserCreateWithoutSessionsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface GroupCreateInput {
  id?: Maybe<ID_Input>;
  type: GroupType;
  owner: ID_Input;
  createdBy: ID_Input;
  updatedBy?: Maybe<ID_Input>;
  isPublic: Boolean;
  memberships?: Maybe<MembershipCreateManyInput>;
  name: String;
  title?: Maybe<String>;
  description?: Maybe<String>;
  logo: String;
  banner?: Maybe<String>;
  entries?: Maybe<EntryCreateManyInput>;
  inbox?: Maybe<ID_Input>;
  tags?: Maybe<TagCreateManyInput>;
}

export interface SessionCreateInput {
  id?: Maybe<ID_Input>;
  sessionToken: String;
  csrfToken?: Maybe<String>;
  bearerToken?: Maybe<String>;
  clientTime?: Maybe<String>;
  validTo: DateTimeInput;
  timedOut?: Maybe<DateTimeInput>;
  loggedOut?: Maybe<DateTimeInput>;
  user: UserCreateOneWithoutSessionsInput;
  agent: AgentCreateOneInput;
  location?: Maybe<LocationCreateOneInput>;
  ipAddress?: Maybe<String>;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  OR?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  NOT?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface MembershipUpdateManyMutationInput {
  type?: Maybe<MembershipType>;
  createdBy?: Maybe<ID_Input>;
  updatedBy?: Maybe<ID_Input>;
  showHistory?: Maybe<Boolean>;
}

export interface ContentEncodingWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  type?: Maybe<EncodingType>;
  type_not?: Maybe<EncodingType>;
  type_in?: Maybe<EncodingType[] | EncodingType>;
  type_not_in?: Maybe<EncodingType[] | EncodingType>;
  maintainer?: Maybe<ID_Input>;
  maintainer_not?: Maybe<ID_Input>;
  maintainer_in?: Maybe<ID_Input[] | ID_Input>;
  maintainer_not_in?: Maybe<ID_Input[] | ID_Input>;
  maintainer_lt?: Maybe<ID_Input>;
  maintainer_lte?: Maybe<ID_Input>;
  maintainer_gt?: Maybe<ID_Input>;
  maintainer_gte?: Maybe<ID_Input>;
  maintainer_contains?: Maybe<ID_Input>;
  maintainer_not_contains?: Maybe<ID_Input>;
  maintainer_starts_with?: Maybe<ID_Input>;
  maintainer_not_starts_with?: Maybe<ID_Input>;
  maintainer_ends_with?: Maybe<ID_Input>;
  maintainer_not_ends_with?: Maybe<ID_Input>;
  createdBy?: Maybe<ID_Input>;
  createdBy_not?: Maybe<ID_Input>;
  createdBy_in?: Maybe<ID_Input[] | ID_Input>;
  createdBy_not_in?: Maybe<ID_Input[] | ID_Input>;
  createdBy_lt?: Maybe<ID_Input>;
  createdBy_lte?: Maybe<ID_Input>;
  createdBy_gt?: Maybe<ID_Input>;
  createdBy_gte?: Maybe<ID_Input>;
  createdBy_contains?: Maybe<ID_Input>;
  createdBy_not_contains?: Maybe<ID_Input>;
  createdBy_starts_with?: Maybe<ID_Input>;
  createdBy_not_starts_with?: Maybe<ID_Input>;
  createdBy_ends_with?: Maybe<ID_Input>;
  createdBy_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedBy?: Maybe<ID_Input>;
  updatedBy_not?: Maybe<ID_Input>;
  updatedBy_in?: Maybe<ID_Input[] | ID_Input>;
  updatedBy_not_in?: Maybe<ID_Input[] | ID_Input>;
  updatedBy_lt?: Maybe<ID_Input>;
  updatedBy_lte?: Maybe<ID_Input>;
  updatedBy_gt?: Maybe<ID_Input>;
  updatedBy_gte?: Maybe<ID_Input>;
  updatedBy_contains?: Maybe<ID_Input>;
  updatedBy_not_contains?: Maybe<ID_Input>;
  updatedBy_starts_with?: Maybe<ID_Input>;
  updatedBy_not_starts_with?: Maybe<ID_Input>;
  updatedBy_ends_with?: Maybe<ID_Input>;
  updatedBy_not_ends_with?: Maybe<ID_Input>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  charset?: Maybe<String>;
  charset_not?: Maybe<String>;
  charset_in?: Maybe<String[] | String>;
  charset_not_in?: Maybe<String[] | String>;
  charset_lt?: Maybe<String>;
  charset_lte?: Maybe<String>;
  charset_gt?: Maybe<String>;
  charset_gte?: Maybe<String>;
  charset_contains?: Maybe<String>;
  charset_not_contains?: Maybe<String>;
  charset_starts_with?: Maybe<String>;
  charset_not_starts_with?: Maybe<String>;
  charset_ends_with?: Maybe<String>;
  charset_not_ends_with?: Maybe<String>;
  AND?: Maybe<ContentEncodingWhereInput[] | ContentEncodingWhereInput>;
  OR?: Maybe<ContentEncodingWhereInput[] | ContentEncodingWhereInput>;
  NOT?: Maybe<ContentEncodingWhereInput[] | ContentEncodingWhereInput>;
}

export interface MembershipUpdateInput {
  type?: Maybe<MembershipType>;
  createdBy?: Maybe<ID_Input>;
  updatedBy?: Maybe<ID_Input>;
  member?: Maybe<AgentUpdateOneRequiredInput>;
  showHistory?: Maybe<Boolean>;
}

export interface MembershipSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<MembershipWhereInput>;
  AND?: Maybe<
    MembershipSubscriptionWhereInput[] | MembershipSubscriptionWhereInput
  >;
  OR?: Maybe<
    MembershipSubscriptionWhereInput[] | MembershipSubscriptionWhereInput
  >;
  NOT?: Maybe<
    MembershipSubscriptionWhereInput[] | MembershipSubscriptionWhereInput
  >;
}

export interface GroupSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<GroupWhereInput>;
  AND?: Maybe<GroupSubscriptionWhereInput[] | GroupSubscriptionWhereInput>;
  OR?: Maybe<GroupSubscriptionWhereInput[] | GroupSubscriptionWhereInput>;
  NOT?: Maybe<GroupSubscriptionWhereInput[] | GroupSubscriptionWhereInput>;
}

export interface EntrySubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<EntryWhereInput>;
  AND?: Maybe<EntrySubscriptionWhereInput[] | EntrySubscriptionWhereInput>;
  OR?: Maybe<EntrySubscriptionWhereInput[] | EntrySubscriptionWhereInput>;
  NOT?: Maybe<EntrySubscriptionWhereInput[] | EntrySubscriptionWhereInput>;
}

export interface AgentCreateInput {
  id?: Maybe<ID_Input>;
  type: AgentType;
  owner: ID_Input;
  createdBy: ID_Input;
  updatedBy?: Maybe<ID_Input>;
  name: String;
  status: AgentStatus;
  timezone?: Maybe<String>;
  location?: Maybe<LocationCreateOneInput>;
  profileSlogan?: Maybe<String>;
  profileAvatar?: Maybe<String>;
  profileJobTitle?: Maybe<String>;
  profileBanner?: Maybe<String>;
  profileType?: Maybe<ProfileType>;
  serviceDescription?: Maybe<String>;
  inboxDescription?: Maybe<String>;
}

export interface AgentSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<AgentWhereInput>;
  AND?: Maybe<AgentSubscriptionWhereInput[] | AgentSubscriptionWhereInput>;
  OR?: Maybe<AgentSubscriptionWhereInput[] | AgentSubscriptionWhereInput>;
  NOT?: Maybe<AgentSubscriptionWhereInput[] | AgentSubscriptionWhereInput>;
}

export interface LocationCreateOneInput {
  create?: Maybe<LocationCreateInput>;
  connect?: Maybe<LocationWhereUniqueInput>;
}

export interface LocationWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  type?: Maybe<LocationType>;
  type_not?: Maybe<LocationType>;
  type_in?: Maybe<LocationType[] | LocationType>;
  type_not_in?: Maybe<LocationType[] | LocationType>;
  owner?: Maybe<ID_Input>;
  owner_not?: Maybe<ID_Input>;
  owner_in?: Maybe<ID_Input[] | ID_Input>;
  owner_not_in?: Maybe<ID_Input[] | ID_Input>;
  owner_lt?: Maybe<ID_Input>;
  owner_lte?: Maybe<ID_Input>;
  owner_gt?: Maybe<ID_Input>;
  owner_gte?: Maybe<ID_Input>;
  owner_contains?: Maybe<ID_Input>;
  owner_not_contains?: Maybe<ID_Input>;
  owner_starts_with?: Maybe<ID_Input>;
  owner_not_starts_with?: Maybe<ID_Input>;
  owner_ends_with?: Maybe<ID_Input>;
  owner_not_ends_with?: Maybe<ID_Input>;
  createdBy?: Maybe<ID_Input>;
  createdBy_not?: Maybe<ID_Input>;
  createdBy_in?: Maybe<ID_Input[] | ID_Input>;
  createdBy_not_in?: Maybe<ID_Input[] | ID_Input>;
  createdBy_lt?: Maybe<ID_Input>;
  createdBy_lte?: Maybe<ID_Input>;
  createdBy_gt?: Maybe<ID_Input>;
  createdBy_gte?: Maybe<ID_Input>;
  createdBy_contains?: Maybe<ID_Input>;
  createdBy_not_contains?: Maybe<ID_Input>;
  createdBy_starts_with?: Maybe<ID_Input>;
  createdBy_not_starts_with?: Maybe<ID_Input>;
  createdBy_ends_with?: Maybe<ID_Input>;
  createdBy_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedBy?: Maybe<ID_Input>;
  updatedBy_not?: Maybe<ID_Input>;
  updatedBy_in?: Maybe<ID_Input[] | ID_Input>;
  updatedBy_not_in?: Maybe<ID_Input[] | ID_Input>;
  updatedBy_lt?: Maybe<ID_Input>;
  updatedBy_lte?: Maybe<ID_Input>;
  updatedBy_gt?: Maybe<ID_Input>;
  updatedBy_gte?: Maybe<ID_Input>;
  updatedBy_contains?: Maybe<ID_Input>;
  updatedBy_not_contains?: Maybe<ID_Input>;
  updatedBy_starts_with?: Maybe<ID_Input>;
  updatedBy_not_starts_with?: Maybe<ID_Input>;
  updatedBy_ends_with?: Maybe<ID_Input>;
  updatedBy_not_ends_with?: Maybe<ID_Input>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  osmNodeId?: Maybe<String>;
  osmNodeId_not?: Maybe<String>;
  osmNodeId_in?: Maybe<String[] | String>;
  osmNodeId_not_in?: Maybe<String[] | String>;
  osmNodeId_lt?: Maybe<String>;
  osmNodeId_lte?: Maybe<String>;
  osmNodeId_gt?: Maybe<String>;
  osmNodeId_gte?: Maybe<String>;
  osmNodeId_contains?: Maybe<String>;
  osmNodeId_not_contains?: Maybe<String>;
  osmNodeId_starts_with?: Maybe<String>;
  osmNodeId_not_starts_with?: Maybe<String>;
  osmNodeId_ends_with?: Maybe<String>;
  osmNodeId_not_ends_with?: Maybe<String>;
  addressLine1?: Maybe<String>;
  addressLine1_not?: Maybe<String>;
  addressLine1_in?: Maybe<String[] | String>;
  addressLine1_not_in?: Maybe<String[] | String>;
  addressLine1_lt?: Maybe<String>;
  addressLine1_lte?: Maybe<String>;
  addressLine1_gt?: Maybe<String>;
  addressLine1_gte?: Maybe<String>;
  addressLine1_contains?: Maybe<String>;
  addressLine1_not_contains?: Maybe<String>;
  addressLine1_starts_with?: Maybe<String>;
  addressLine1_not_starts_with?: Maybe<String>;
  addressLine1_ends_with?: Maybe<String>;
  addressLine1_not_ends_with?: Maybe<String>;
  addressLine2?: Maybe<String>;
  addressLine2_not?: Maybe<String>;
  addressLine2_in?: Maybe<String[] | String>;
  addressLine2_not_in?: Maybe<String[] | String>;
  addressLine2_lt?: Maybe<String>;
  addressLine2_lte?: Maybe<String>;
  addressLine2_gt?: Maybe<String>;
  addressLine2_gte?: Maybe<String>;
  addressLine2_contains?: Maybe<String>;
  addressLine2_not_contains?: Maybe<String>;
  addressLine2_starts_with?: Maybe<String>;
  addressLine2_not_starts_with?: Maybe<String>;
  addressLine2_ends_with?: Maybe<String>;
  addressLine2_not_ends_with?: Maybe<String>;
  addressCity?: Maybe<String>;
  addressCity_not?: Maybe<String>;
  addressCity_in?: Maybe<String[] | String>;
  addressCity_not_in?: Maybe<String[] | String>;
  addressCity_lt?: Maybe<String>;
  addressCity_lte?: Maybe<String>;
  addressCity_gt?: Maybe<String>;
  addressCity_gte?: Maybe<String>;
  addressCity_contains?: Maybe<String>;
  addressCity_not_contains?: Maybe<String>;
  addressCity_starts_with?: Maybe<String>;
  addressCity_not_starts_with?: Maybe<String>;
  addressCity_ends_with?: Maybe<String>;
  addressCity_not_ends_with?: Maybe<String>;
  addressZipCode?: Maybe<String>;
  addressZipCode_not?: Maybe<String>;
  addressZipCode_in?: Maybe<String[] | String>;
  addressZipCode_not_in?: Maybe<String[] | String>;
  addressZipCode_lt?: Maybe<String>;
  addressZipCode_lte?: Maybe<String>;
  addressZipCode_gt?: Maybe<String>;
  addressZipCode_gte?: Maybe<String>;
  addressZipCode_contains?: Maybe<String>;
  addressZipCode_not_contains?: Maybe<String>;
  addressZipCode_starts_with?: Maybe<String>;
  addressZipCode_not_starts_with?: Maybe<String>;
  addressZipCode_ends_with?: Maybe<String>;
  addressZipCode_not_ends_with?: Maybe<String>;
  addressCountry?: Maybe<String>;
  addressCountry_not?: Maybe<String>;
  addressCountry_in?: Maybe<String[] | String>;
  addressCountry_not_in?: Maybe<String[] | String>;
  addressCountry_lt?: Maybe<String>;
  addressCountry_lte?: Maybe<String>;
  addressCountry_gt?: Maybe<String>;
  addressCountry_gte?: Maybe<String>;
  addressCountry_contains?: Maybe<String>;
  addressCountry_not_contains?: Maybe<String>;
  addressCountry_starts_with?: Maybe<String>;
  addressCountry_not_starts_with?: Maybe<String>;
  addressCountry_ends_with?: Maybe<String>;
  addressCountry_not_ends_with?: Maybe<String>;
  geoPointLatitude?: Maybe<Float>;
  geoPointLatitude_not?: Maybe<Float>;
  geoPointLatitude_in?: Maybe<Float[] | Float>;
  geoPointLatitude_not_in?: Maybe<Float[] | Float>;
  geoPointLatitude_lt?: Maybe<Float>;
  geoPointLatitude_lte?: Maybe<Float>;
  geoPointLatitude_gt?: Maybe<Float>;
  geoPointLatitude_gte?: Maybe<Float>;
  geoPointLongitude?: Maybe<Float>;
  geoPointLongitude_not?: Maybe<Float>;
  geoPointLongitude_in?: Maybe<Float[] | Float>;
  geoPointLongitude_not_in?: Maybe<Float[] | Float>;
  geoPointLongitude_lt?: Maybe<Float>;
  geoPointLongitude_lte?: Maybe<Float>;
  geoPointLongitude_gt?: Maybe<Float>;
  geoPointLongitude_gte?: Maybe<Float>;
  geoPointRadiusMeter?: Maybe<Float>;
  geoPointRadiusMeter_not?: Maybe<Float>;
  geoPointRadiusMeter_in?: Maybe<Float[] | Float>;
  geoPointRadiusMeter_not_in?: Maybe<Float[] | Float>;
  geoPointRadiusMeter_lt?: Maybe<Float>;
  geoPointRadiusMeter_lte?: Maybe<Float>;
  geoPointRadiusMeter_gt?: Maybe<Float>;
  geoPointRadiusMeter_gte?: Maybe<Float>;
  tags_every?: Maybe<TagWhereInput>;
  tags_some?: Maybe<TagWhereInput>;
  tags_none?: Maybe<TagWhereInput>;
  AND?: Maybe<LocationWhereInput[] | LocationWhereInput>;
  OR?: Maybe<LocationWhereInput[] | LocationWhereInput>;
  NOT?: Maybe<LocationWhereInput[] | LocationWhereInput>;
}

export interface LocationCreateInput {
  id?: Maybe<ID_Input>;
  type: LocationType;
  owner: ID_Input;
  createdBy: ID_Input;
  updatedBy?: Maybe<ID_Input>;
  name?: Maybe<String>;
  osmNodeId?: Maybe<String>;
  addressLine1?: Maybe<String>;
  addressLine2?: Maybe<String>;
  addressCity?: Maybe<String>;
  addressZipCode?: Maybe<String>;
  addressCountry?: Maybe<String>;
  geoPointLatitude?: Maybe<Float>;
  geoPointLongitude?: Maybe<Float>;
  geoPointRadiusMeter?: Maybe<Float>;
  tags?: Maybe<TagCreateManyInput>;
}

export interface SessionUpdateManyDataInput {
  sessionToken?: Maybe<String>;
  csrfToken?: Maybe<String>;
  bearerToken?: Maybe<String>;
  clientTime?: Maybe<String>;
  validTo?: Maybe<DateTimeInput>;
  timedOut?: Maybe<DateTimeInput>;
  loggedOut?: Maybe<DateTimeInput>;
  ipAddress?: Maybe<String>;
}

export interface TagCreateManyInput {
  create?: Maybe<TagCreateInput[] | TagCreateInput>;
  connect?: Maybe<TagWhereUniqueInput[] | TagWhereUniqueInput>;
}

export type GroupWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface TagCreateInput {
  id?: Maybe<ID_Input>;
  type: String;
  owner: ID_Input;
  createdBy: ID_Input;
  value: String;
}

export interface AgentWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  type?: Maybe<AgentType>;
  type_not?: Maybe<AgentType>;
  type_in?: Maybe<AgentType[] | AgentType>;
  type_not_in?: Maybe<AgentType[] | AgentType>;
  owner?: Maybe<ID_Input>;
  owner_not?: Maybe<ID_Input>;
  owner_in?: Maybe<ID_Input[] | ID_Input>;
  owner_not_in?: Maybe<ID_Input[] | ID_Input>;
  owner_lt?: Maybe<ID_Input>;
  owner_lte?: Maybe<ID_Input>;
  owner_gt?: Maybe<ID_Input>;
  owner_gte?: Maybe<ID_Input>;
  owner_contains?: Maybe<ID_Input>;
  owner_not_contains?: Maybe<ID_Input>;
  owner_starts_with?: Maybe<ID_Input>;
  owner_not_starts_with?: Maybe<ID_Input>;
  owner_ends_with?: Maybe<ID_Input>;
  owner_not_ends_with?: Maybe<ID_Input>;
  createdBy?: Maybe<ID_Input>;
  createdBy_not?: Maybe<ID_Input>;
  createdBy_in?: Maybe<ID_Input[] | ID_Input>;
  createdBy_not_in?: Maybe<ID_Input[] | ID_Input>;
  createdBy_lt?: Maybe<ID_Input>;
  createdBy_lte?: Maybe<ID_Input>;
  createdBy_gt?: Maybe<ID_Input>;
  createdBy_gte?: Maybe<ID_Input>;
  createdBy_contains?: Maybe<ID_Input>;
  createdBy_not_contains?: Maybe<ID_Input>;
  createdBy_starts_with?: Maybe<ID_Input>;
  createdBy_not_starts_with?: Maybe<ID_Input>;
  createdBy_ends_with?: Maybe<ID_Input>;
  createdBy_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedBy?: Maybe<ID_Input>;
  updatedBy_not?: Maybe<ID_Input>;
  updatedBy_in?: Maybe<ID_Input[] | ID_Input>;
  updatedBy_not_in?: Maybe<ID_Input[] | ID_Input>;
  updatedBy_lt?: Maybe<ID_Input>;
  updatedBy_lte?: Maybe<ID_Input>;
  updatedBy_gt?: Maybe<ID_Input>;
  updatedBy_gte?: Maybe<ID_Input>;
  updatedBy_contains?: Maybe<ID_Input>;
  updatedBy_not_contains?: Maybe<ID_Input>;
  updatedBy_starts_with?: Maybe<ID_Input>;
  updatedBy_not_starts_with?: Maybe<ID_Input>;
  updatedBy_ends_with?: Maybe<ID_Input>;
  updatedBy_not_ends_with?: Maybe<ID_Input>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  status?: Maybe<AgentStatus>;
  status_not?: Maybe<AgentStatus>;
  status_in?: Maybe<AgentStatus[] | AgentStatus>;
  status_not_in?: Maybe<AgentStatus[] | AgentStatus>;
  timezone?: Maybe<String>;
  timezone_not?: Maybe<String>;
  timezone_in?: Maybe<String[] | String>;
  timezone_not_in?: Maybe<String[] | String>;
  timezone_lt?: Maybe<String>;
  timezone_lte?: Maybe<String>;
  timezone_gt?: Maybe<String>;
  timezone_gte?: Maybe<String>;
  timezone_contains?: Maybe<String>;
  timezone_not_contains?: Maybe<String>;
  timezone_starts_with?: Maybe<String>;
  timezone_not_starts_with?: Maybe<String>;
  timezone_ends_with?: Maybe<String>;
  timezone_not_ends_with?: Maybe<String>;
  location?: Maybe<LocationWhereInput>;
  profileSlogan?: Maybe<String>;
  profileSlogan_not?: Maybe<String>;
  profileSlogan_in?: Maybe<String[] | String>;
  profileSlogan_not_in?: Maybe<String[] | String>;
  profileSlogan_lt?: Maybe<String>;
  profileSlogan_lte?: Maybe<String>;
  profileSlogan_gt?: Maybe<String>;
  profileSlogan_gte?: Maybe<String>;
  profileSlogan_contains?: Maybe<String>;
  profileSlogan_not_contains?: Maybe<String>;
  profileSlogan_starts_with?: Maybe<String>;
  profileSlogan_not_starts_with?: Maybe<String>;
  profileSlogan_ends_with?: Maybe<String>;
  profileSlogan_not_ends_with?: Maybe<String>;
  profileAvatar?: Maybe<String>;
  profileAvatar_not?: Maybe<String>;
  profileAvatar_in?: Maybe<String[] | String>;
  profileAvatar_not_in?: Maybe<String[] | String>;
  profileAvatar_lt?: Maybe<String>;
  profileAvatar_lte?: Maybe<String>;
  profileAvatar_gt?: Maybe<String>;
  profileAvatar_gte?: Maybe<String>;
  profileAvatar_contains?: Maybe<String>;
  profileAvatar_not_contains?: Maybe<String>;
  profileAvatar_starts_with?: Maybe<String>;
  profileAvatar_not_starts_with?: Maybe<String>;
  profileAvatar_ends_with?: Maybe<String>;
  profileAvatar_not_ends_with?: Maybe<String>;
  profileJobTitle?: Maybe<String>;
  profileJobTitle_not?: Maybe<String>;
  profileJobTitle_in?: Maybe<String[] | String>;
  profileJobTitle_not_in?: Maybe<String[] | String>;
  profileJobTitle_lt?: Maybe<String>;
  profileJobTitle_lte?: Maybe<String>;
  profileJobTitle_gt?: Maybe<String>;
  profileJobTitle_gte?: Maybe<String>;
  profileJobTitle_contains?: Maybe<String>;
  profileJobTitle_not_contains?: Maybe<String>;
  profileJobTitle_starts_with?: Maybe<String>;
  profileJobTitle_not_starts_with?: Maybe<String>;
  profileJobTitle_ends_with?: Maybe<String>;
  profileJobTitle_not_ends_with?: Maybe<String>;
  profileBanner?: Maybe<String>;
  profileBanner_not?: Maybe<String>;
  profileBanner_in?: Maybe<String[] | String>;
  profileBanner_not_in?: Maybe<String[] | String>;
  profileBanner_lt?: Maybe<String>;
  profileBanner_lte?: Maybe<String>;
  profileBanner_gt?: Maybe<String>;
  profileBanner_gte?: Maybe<String>;
  profileBanner_contains?: Maybe<String>;
  profileBanner_not_contains?: Maybe<String>;
  profileBanner_starts_with?: Maybe<String>;
  profileBanner_not_starts_with?: Maybe<String>;
  profileBanner_ends_with?: Maybe<String>;
  profileBanner_not_ends_with?: Maybe<String>;
  profileType?: Maybe<ProfileType>;
  profileType_not?: Maybe<ProfileType>;
  profileType_in?: Maybe<ProfileType[] | ProfileType>;
  profileType_not_in?: Maybe<ProfileType[] | ProfileType>;
  serviceDescription?: Maybe<String>;
  serviceDescription_not?: Maybe<String>;
  serviceDescription_in?: Maybe<String[] | String>;
  serviceDescription_not_in?: Maybe<String[] | String>;
  serviceDescription_lt?: Maybe<String>;
  serviceDescription_lte?: Maybe<String>;
  serviceDescription_gt?: Maybe<String>;
  serviceDescription_gte?: Maybe<String>;
  serviceDescription_contains?: Maybe<String>;
  serviceDescription_not_contains?: Maybe<String>;
  serviceDescription_starts_with?: Maybe<String>;
  serviceDescription_not_starts_with?: Maybe<String>;
  serviceDescription_ends_with?: Maybe<String>;
  serviceDescription_not_ends_with?: Maybe<String>;
  inboxDescription?: Maybe<String>;
  inboxDescription_not?: Maybe<String>;
  inboxDescription_in?: Maybe<String[] | String>;
  inboxDescription_not_in?: Maybe<String[] | String>;
  inboxDescription_lt?: Maybe<String>;
  inboxDescription_lte?: Maybe<String>;
  inboxDescription_gt?: Maybe<String>;
  inboxDescription_gte?: Maybe<String>;
  inboxDescription_contains?: Maybe<String>;
  inboxDescription_not_contains?: Maybe<String>;
  inboxDescription_starts_with?: Maybe<String>;
  inboxDescription_not_starts_with?: Maybe<String>;
  inboxDescription_ends_with?: Maybe<String>;
  inboxDescription_not_ends_with?: Maybe<String>;
  AND?: Maybe<AgentWhereInput[] | AgentWhereInput>;
  OR?: Maybe<AgentWhereInput[] | AgentWhereInput>;
  NOT?: Maybe<AgentWhereInput[] | AgentWhereInput>;
}

export interface AgentUpdateInput {
  type?: Maybe<AgentType>;
  owner?: Maybe<ID_Input>;
  createdBy?: Maybe<ID_Input>;
  updatedBy?: Maybe<ID_Input>;
  name?: Maybe<String>;
  status?: Maybe<AgentStatus>;
  timezone?: Maybe<String>;
  location?: Maybe<LocationUpdateOneInput>;
  profileSlogan?: Maybe<String>;
  profileAvatar?: Maybe<String>;
  profileJobTitle?: Maybe<String>;
  profileBanner?: Maybe<String>;
  profileType?: Maybe<ProfileType>;
  serviceDescription?: Maybe<String>;
  inboxDescription?: Maybe<String>;
}

export interface SessionUpsertWithWhereUniqueWithoutUserInput {
  where: SessionWhereUniqueInput;
  update: SessionUpdateWithoutUserDataInput;
  create: SessionCreateWithoutUserInput;
}

export interface LocationUpdateOneInput {
  create?: Maybe<LocationCreateInput>;
  update?: Maybe<LocationUpdateDataInput>;
  upsert?: Maybe<LocationUpsertNestedInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<LocationWhereUniqueInput>;
}

export interface SessionUpdateWithWhereUniqueWithoutUserInput {
  where: SessionWhereUniqueInput;
  data: SessionUpdateWithoutUserDataInput;
}

export interface LocationUpdateDataInput {
  type?: Maybe<LocationType>;
  owner?: Maybe<ID_Input>;
  createdBy?: Maybe<ID_Input>;
  updatedBy?: Maybe<ID_Input>;
  name?: Maybe<String>;
  osmNodeId?: Maybe<String>;
  addressLine1?: Maybe<String>;
  addressLine2?: Maybe<String>;
  addressCity?: Maybe<String>;
  addressZipCode?: Maybe<String>;
  addressCountry?: Maybe<String>;
  geoPointLatitude?: Maybe<Float>;
  geoPointLongitude?: Maybe<Float>;
  geoPointRadiusMeter?: Maybe<Float>;
  tags?: Maybe<TagUpdateManyInput>;
}

export interface TagWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  type?: Maybe<String>;
  type_not?: Maybe<String>;
  type_in?: Maybe<String[] | String>;
  type_not_in?: Maybe<String[] | String>;
  type_lt?: Maybe<String>;
  type_lte?: Maybe<String>;
  type_gt?: Maybe<String>;
  type_gte?: Maybe<String>;
  type_contains?: Maybe<String>;
  type_not_contains?: Maybe<String>;
  type_starts_with?: Maybe<String>;
  type_not_starts_with?: Maybe<String>;
  type_ends_with?: Maybe<String>;
  type_not_ends_with?: Maybe<String>;
  owner?: Maybe<ID_Input>;
  owner_not?: Maybe<ID_Input>;
  owner_in?: Maybe<ID_Input[] | ID_Input>;
  owner_not_in?: Maybe<ID_Input[] | ID_Input>;
  owner_lt?: Maybe<ID_Input>;
  owner_lte?: Maybe<ID_Input>;
  owner_gt?: Maybe<ID_Input>;
  owner_gte?: Maybe<ID_Input>;
  owner_contains?: Maybe<ID_Input>;
  owner_not_contains?: Maybe<ID_Input>;
  owner_starts_with?: Maybe<ID_Input>;
  owner_not_starts_with?: Maybe<ID_Input>;
  owner_ends_with?: Maybe<ID_Input>;
  owner_not_ends_with?: Maybe<ID_Input>;
  createdBy?: Maybe<ID_Input>;
  createdBy_not?: Maybe<ID_Input>;
  createdBy_in?: Maybe<ID_Input[] | ID_Input>;
  createdBy_not_in?: Maybe<ID_Input[] | ID_Input>;
  createdBy_lt?: Maybe<ID_Input>;
  createdBy_lte?: Maybe<ID_Input>;
  createdBy_gt?: Maybe<ID_Input>;
  createdBy_gte?: Maybe<ID_Input>;
  createdBy_contains?: Maybe<ID_Input>;
  createdBy_not_contains?: Maybe<ID_Input>;
  createdBy_starts_with?: Maybe<ID_Input>;
  createdBy_not_starts_with?: Maybe<ID_Input>;
  createdBy_ends_with?: Maybe<ID_Input>;
  createdBy_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  value?: Maybe<String>;
  value_not?: Maybe<String>;
  value_in?: Maybe<String[] | String>;
  value_not_in?: Maybe<String[] | String>;
  value_lt?: Maybe<String>;
  value_lte?: Maybe<String>;
  value_gt?: Maybe<String>;
  value_gte?: Maybe<String>;
  value_contains?: Maybe<String>;
  value_not_contains?: Maybe<String>;
  value_starts_with?: Maybe<String>;
  value_not_starts_with?: Maybe<String>;
  value_ends_with?: Maybe<String>;
  value_not_ends_with?: Maybe<String>;
  AND?: Maybe<TagWhereInput[] | TagWhereInput>;
  OR?: Maybe<TagWhereInput[] | TagWhereInput>;
  NOT?: Maybe<TagWhereInput[] | TagWhereInput>;
}

export interface TagUpdateManyInput {
  create?: Maybe<TagCreateInput[] | TagCreateInput>;
  update?: Maybe<
    TagUpdateWithWhereUniqueNestedInput[] | TagUpdateWithWhereUniqueNestedInput
  >;
  upsert?: Maybe<
    TagUpsertWithWhereUniqueNestedInput[] | TagUpsertWithWhereUniqueNestedInput
  >;
  delete?: Maybe<TagWhereUniqueInput[] | TagWhereUniqueInput>;
  connect?: Maybe<TagWhereUniqueInput[] | TagWhereUniqueInput>;
  set?: Maybe<TagWhereUniqueInput[] | TagWhereUniqueInput>;
  disconnect?: Maybe<TagWhereUniqueInput[] | TagWhereUniqueInput>;
  deleteMany?: Maybe<TagScalarWhereInput[] | TagScalarWhereInput>;
  updateMany?: Maybe<
    TagUpdateManyWithWhereNestedInput[] | TagUpdateManyWithWhereNestedInput
  >;
}

export interface UserUpdateInput {
  type?: Maybe<UserType>;
  email?: Maybe<String>;
  timezone?: Maybe<String>;
  challenge?: Maybe<String>;
  passwordSalt?: Maybe<String>;
  passwordHash?: Maybe<String>;
  agents?: Maybe<AgentUpdateManyInput>;
  sessions?: Maybe<SessionUpdateManyWithoutUserInput>;
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  phone?: Maybe<String>;
  mobilePhone?: Maybe<String>;
  organizationName?: Maybe<String>;
}

export interface TagUpdateWithWhereUniqueNestedInput {
  where: TagWhereUniqueInput;
  data: TagUpdateDataInput;
}

export type LocationWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface TagUpdateDataInput {
  type?: Maybe<String>;
  owner?: Maybe<ID_Input>;
  createdBy?: Maybe<ID_Input>;
  value?: Maybe<String>;
}

export interface UserCreateInput {
  id?: Maybe<ID_Input>;
  type: UserType;
  email: String;
  timezone: String;
  challenge?: Maybe<String>;
  passwordSalt?: Maybe<String>;
  passwordHash?: Maybe<String>;
  agents?: Maybe<AgentCreateManyInput>;
  sessions?: Maybe<SessionCreateManyWithoutUserInput>;
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  phone?: Maybe<String>;
  mobilePhone?: Maybe<String>;
  organizationName?: Maybe<String>;
}

export interface TagUpsertWithWhereUniqueNestedInput {
  where: TagWhereUniqueInput;
  update: TagUpdateDataInput;
  create: TagCreateInput;
}

export interface TagUpdateInput {
  type?: Maybe<String>;
  owner?: Maybe<ID_Input>;
  createdBy?: Maybe<ID_Input>;
  value?: Maybe<String>;
}

export interface TagScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  type?: Maybe<String>;
  type_not?: Maybe<String>;
  type_in?: Maybe<String[] | String>;
  type_not_in?: Maybe<String[] | String>;
  type_lt?: Maybe<String>;
  type_lte?: Maybe<String>;
  type_gt?: Maybe<String>;
  type_gte?: Maybe<String>;
  type_contains?: Maybe<String>;
  type_not_contains?: Maybe<String>;
  type_starts_with?: Maybe<String>;
  type_not_starts_with?: Maybe<String>;
  type_ends_with?: Maybe<String>;
  type_not_ends_with?: Maybe<String>;
  owner?: Maybe<ID_Input>;
  owner_not?: Maybe<ID_Input>;
  owner_in?: Maybe<ID_Input[] | ID_Input>;
  owner_not_in?: Maybe<ID_Input[] | ID_Input>;
  owner_lt?: Maybe<ID_Input>;
  owner_lte?: Maybe<ID_Input>;
  owner_gt?: Maybe<ID_Input>;
  owner_gte?: Maybe<ID_Input>;
  owner_contains?: Maybe<ID_Input>;
  owner_not_contains?: Maybe<ID_Input>;
  owner_starts_with?: Maybe<ID_Input>;
  owner_not_starts_with?: Maybe<ID_Input>;
  owner_ends_with?: Maybe<ID_Input>;
  owner_not_ends_with?: Maybe<ID_Input>;
  createdBy?: Maybe<ID_Input>;
  createdBy_not?: Maybe<ID_Input>;
  createdBy_in?: Maybe<ID_Input[] | ID_Input>;
  createdBy_not_in?: Maybe<ID_Input[] | ID_Input>;
  createdBy_lt?: Maybe<ID_Input>;
  createdBy_lte?: Maybe<ID_Input>;
  createdBy_gt?: Maybe<ID_Input>;
  createdBy_gte?: Maybe<ID_Input>;
  createdBy_contains?: Maybe<ID_Input>;
  createdBy_not_contains?: Maybe<ID_Input>;
  createdBy_starts_with?: Maybe<ID_Input>;
  createdBy_not_starts_with?: Maybe<ID_Input>;
  createdBy_ends_with?: Maybe<ID_Input>;
  createdBy_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  value?: Maybe<String>;
  value_not?: Maybe<String>;
  value_in?: Maybe<String[] | String>;
  value_not_in?: Maybe<String[] | String>;
  value_lt?: Maybe<String>;
  value_lte?: Maybe<String>;
  value_gt?: Maybe<String>;
  value_gte?: Maybe<String>;
  value_contains?: Maybe<String>;
  value_not_contains?: Maybe<String>;
  value_starts_with?: Maybe<String>;
  value_not_starts_with?: Maybe<String>;
  value_ends_with?: Maybe<String>;
  value_not_ends_with?: Maybe<String>;
  AND?: Maybe<TagScalarWhereInput[] | TagScalarWhereInput>;
  OR?: Maybe<TagScalarWhereInput[] | TagScalarWhereInput>;
  NOT?: Maybe<TagScalarWhereInput[] | TagScalarWhereInput>;
}

export interface SessionUpdateManyMutationInput {
  sessionToken?: Maybe<String>;
  csrfToken?: Maybe<String>;
  bearerToken?: Maybe<String>;
  clientTime?: Maybe<String>;
  validTo?: Maybe<DateTimeInput>;
  timedOut?: Maybe<DateTimeInput>;
  loggedOut?: Maybe<DateTimeInput>;
  ipAddress?: Maybe<String>;
}

export interface TagUpdateManyWithWhereNestedInput {
  where: TagScalarWhereInput;
  data: TagUpdateManyDataInput;
}

export interface AgentUpdateManyDataInput {
  type?: Maybe<AgentType>;
  owner?: Maybe<ID_Input>;
  createdBy?: Maybe<ID_Input>;
  updatedBy?: Maybe<ID_Input>;
  name?: Maybe<String>;
  status?: Maybe<AgentStatus>;
  timezone?: Maybe<String>;
  profileSlogan?: Maybe<String>;
  profileAvatar?: Maybe<String>;
  profileJobTitle?: Maybe<String>;
  profileBanner?: Maybe<String>;
  profileType?: Maybe<ProfileType>;
  serviceDescription?: Maybe<String>;
  inboxDescription?: Maybe<String>;
}

export interface LocationUpdateManyMutationInput {
  type?: Maybe<LocationType>;
  owner?: Maybe<ID_Input>;
  createdBy?: Maybe<ID_Input>;
  updatedBy?: Maybe<ID_Input>;
  name?: Maybe<String>;
  osmNodeId?: Maybe<String>;
  addressLine1?: Maybe<String>;
  addressLine2?: Maybe<String>;
  addressCity?: Maybe<String>;
  addressZipCode?: Maybe<String>;
  addressCountry?: Maybe<String>;
  geoPointLatitude?: Maybe<Float>;
  geoPointLongitude?: Maybe<Float>;
  geoPointRadiusMeter?: Maybe<Float>;
}

export interface AgentUpdateManyWithWhereNestedInput {
  where: AgentScalarWhereInput;
  data: AgentUpdateManyDataInput;
}

export interface LocationUpsertNestedInput {
  update: LocationUpdateDataInput;
  create: LocationCreateInput;
}

export interface AgentUpsertWithWhereUniqueNestedInput {
  where: AgentWhereUniqueInput;
  update: AgentUpdateDataInput;
  create: AgentCreateInput;
}

export interface AgentUpdateManyMutationInput {
  type?: Maybe<AgentType>;
  owner?: Maybe<ID_Input>;
  createdBy?: Maybe<ID_Input>;
  updatedBy?: Maybe<ID_Input>;
  name?: Maybe<String>;
  status?: Maybe<AgentStatus>;
  timezone?: Maybe<String>;
  profileSlogan?: Maybe<String>;
  profileAvatar?: Maybe<String>;
  profileJobTitle?: Maybe<String>;
  profileBanner?: Maybe<String>;
  profileType?: Maybe<ProfileType>;
  serviceDescription?: Maybe<String>;
  inboxDescription?: Maybe<String>;
}

export interface UserWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  type?: Maybe<UserType>;
  type_not?: Maybe<UserType>;
  type_in?: Maybe<UserType[] | UserType>;
  type_not_in?: Maybe<UserType[] | UserType>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  timezone?: Maybe<String>;
  timezone_not?: Maybe<String>;
  timezone_in?: Maybe<String[] | String>;
  timezone_not_in?: Maybe<String[] | String>;
  timezone_lt?: Maybe<String>;
  timezone_lte?: Maybe<String>;
  timezone_gt?: Maybe<String>;
  timezone_gte?: Maybe<String>;
  timezone_contains?: Maybe<String>;
  timezone_not_contains?: Maybe<String>;
  timezone_starts_with?: Maybe<String>;
  timezone_not_starts_with?: Maybe<String>;
  timezone_ends_with?: Maybe<String>;
  timezone_not_ends_with?: Maybe<String>;
  challenge?: Maybe<String>;
  challenge_not?: Maybe<String>;
  challenge_in?: Maybe<String[] | String>;
  challenge_not_in?: Maybe<String[] | String>;
  challenge_lt?: Maybe<String>;
  challenge_lte?: Maybe<String>;
  challenge_gt?: Maybe<String>;
  challenge_gte?: Maybe<String>;
  challenge_contains?: Maybe<String>;
  challenge_not_contains?: Maybe<String>;
  challenge_starts_with?: Maybe<String>;
  challenge_not_starts_with?: Maybe<String>;
  challenge_ends_with?: Maybe<String>;
  challenge_not_ends_with?: Maybe<String>;
  passwordSalt?: Maybe<String>;
  passwordSalt_not?: Maybe<String>;
  passwordSalt_in?: Maybe<String[] | String>;
  passwordSalt_not_in?: Maybe<String[] | String>;
  passwordSalt_lt?: Maybe<String>;
  passwordSalt_lte?: Maybe<String>;
  passwordSalt_gt?: Maybe<String>;
  passwordSalt_gte?: Maybe<String>;
  passwordSalt_contains?: Maybe<String>;
  passwordSalt_not_contains?: Maybe<String>;
  passwordSalt_starts_with?: Maybe<String>;
  passwordSalt_not_starts_with?: Maybe<String>;
  passwordSalt_ends_with?: Maybe<String>;
  passwordSalt_not_ends_with?: Maybe<String>;
  passwordHash?: Maybe<String>;
  passwordHash_not?: Maybe<String>;
  passwordHash_in?: Maybe<String[] | String>;
  passwordHash_not_in?: Maybe<String[] | String>;
  passwordHash_lt?: Maybe<String>;
  passwordHash_lte?: Maybe<String>;
  passwordHash_gt?: Maybe<String>;
  passwordHash_gte?: Maybe<String>;
  passwordHash_contains?: Maybe<String>;
  passwordHash_not_contains?: Maybe<String>;
  passwordHash_starts_with?: Maybe<String>;
  passwordHash_not_starts_with?: Maybe<String>;
  passwordHash_ends_with?: Maybe<String>;
  passwordHash_not_ends_with?: Maybe<String>;
  agents_every?: Maybe<AgentWhereInput>;
  agents_some?: Maybe<AgentWhereInput>;
  agents_none?: Maybe<AgentWhereInput>;
  sessions_every?: Maybe<SessionWhereInput>;
  sessions_some?: Maybe<SessionWhereInput>;
  sessions_none?: Maybe<SessionWhereInput>;
  firstName?: Maybe<String>;
  firstName_not?: Maybe<String>;
  firstName_in?: Maybe<String[] | String>;
  firstName_not_in?: Maybe<String[] | String>;
  firstName_lt?: Maybe<String>;
  firstName_lte?: Maybe<String>;
  firstName_gt?: Maybe<String>;
  firstName_gte?: Maybe<String>;
  firstName_contains?: Maybe<String>;
  firstName_not_contains?: Maybe<String>;
  firstName_starts_with?: Maybe<String>;
  firstName_not_starts_with?: Maybe<String>;
  firstName_ends_with?: Maybe<String>;
  firstName_not_ends_with?: Maybe<String>;
  lastName?: Maybe<String>;
  lastName_not?: Maybe<String>;
  lastName_in?: Maybe<String[] | String>;
  lastName_not_in?: Maybe<String[] | String>;
  lastName_lt?: Maybe<String>;
  lastName_lte?: Maybe<String>;
  lastName_gt?: Maybe<String>;
  lastName_gte?: Maybe<String>;
  lastName_contains?: Maybe<String>;
  lastName_not_contains?: Maybe<String>;
  lastName_starts_with?: Maybe<String>;
  lastName_not_starts_with?: Maybe<String>;
  lastName_ends_with?: Maybe<String>;
  lastName_not_ends_with?: Maybe<String>;
  phone?: Maybe<String>;
  phone_not?: Maybe<String>;
  phone_in?: Maybe<String[] | String>;
  phone_not_in?: Maybe<String[] | String>;
  phone_lt?: Maybe<String>;
  phone_lte?: Maybe<String>;
  phone_gt?: Maybe<String>;
  phone_gte?: Maybe<String>;
  phone_contains?: Maybe<String>;
  phone_not_contains?: Maybe<String>;
  phone_starts_with?: Maybe<String>;
  phone_not_starts_with?: Maybe<String>;
  phone_ends_with?: Maybe<String>;
  phone_not_ends_with?: Maybe<String>;
  mobilePhone?: Maybe<String>;
  mobilePhone_not?: Maybe<String>;
  mobilePhone_in?: Maybe<String[] | String>;
  mobilePhone_not_in?: Maybe<String[] | String>;
  mobilePhone_lt?: Maybe<String>;
  mobilePhone_lte?: Maybe<String>;
  mobilePhone_gt?: Maybe<String>;
  mobilePhone_gte?: Maybe<String>;
  mobilePhone_contains?: Maybe<String>;
  mobilePhone_not_contains?: Maybe<String>;
  mobilePhone_starts_with?: Maybe<String>;
  mobilePhone_not_starts_with?: Maybe<String>;
  mobilePhone_ends_with?: Maybe<String>;
  mobilePhone_not_ends_with?: Maybe<String>;
  organizationName?: Maybe<String>;
  organizationName_not?: Maybe<String>;
  organizationName_in?: Maybe<String[] | String>;
  organizationName_not_in?: Maybe<String[] | String>;
  organizationName_lt?: Maybe<String>;
  organizationName_lte?: Maybe<String>;
  organizationName_gt?: Maybe<String>;
  organizationName_gte?: Maybe<String>;
  organizationName_contains?: Maybe<String>;
  organizationName_not_contains?: Maybe<String>;
  organizationName_starts_with?: Maybe<String>;
  organizationName_not_starts_with?: Maybe<String>;
  organizationName_ends_with?: Maybe<String>;
  organizationName_not_ends_with?: Maybe<String>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
  OR?: Maybe<UserWhereInput[] | UserWhereInput>;
  NOT?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export interface LocationUpdateInput {
  type?: Maybe<LocationType>;
  owner?: Maybe<ID_Input>;
  createdBy?: Maybe<ID_Input>;
  updatedBy?: Maybe<ID_Input>;
  name?: Maybe<String>;
  osmNodeId?: Maybe<String>;
  addressLine1?: Maybe<String>;
  addressLine2?: Maybe<String>;
  addressCity?: Maybe<String>;
  addressZipCode?: Maybe<String>;
  addressCountry?: Maybe<String>;
  geoPointLatitude?: Maybe<Float>;
  geoPointLongitude?: Maybe<Float>;
  geoPointRadiusMeter?: Maybe<Float>;
  tags?: Maybe<TagUpdateManyInput>;
}

export interface AgentUpdateManyInput {
  create?: Maybe<AgentCreateInput[] | AgentCreateInput>;
  update?: Maybe<
    | AgentUpdateWithWhereUniqueNestedInput[]
    | AgentUpdateWithWhereUniqueNestedInput
  >;
  upsert?: Maybe<
    | AgentUpsertWithWhereUniqueNestedInput[]
    | AgentUpsertWithWhereUniqueNestedInput
  >;
  delete?: Maybe<AgentWhereUniqueInput[] | AgentWhereUniqueInput>;
  connect?: Maybe<AgentWhereUniqueInput[] | AgentWhereUniqueInput>;
  set?: Maybe<AgentWhereUniqueInput[] | AgentWhereUniqueInput>;
  disconnect?: Maybe<AgentWhereUniqueInput[] | AgentWhereUniqueInput>;
  deleteMany?: Maybe<AgentScalarWhereInput[] | AgentScalarWhereInput>;
  updateMany?: Maybe<
    AgentUpdateManyWithWhereNestedInput[] | AgentUpdateManyWithWhereNestedInput
  >;
}

export interface GroupUpdateManyMutationInput {
  type?: Maybe<GroupType>;
  owner?: Maybe<ID_Input>;
  createdBy?: Maybe<ID_Input>;
  updatedBy?: Maybe<ID_Input>;
  isPublic?: Maybe<Boolean>;
  name?: Maybe<String>;
  title?: Maybe<String>;
  description?: Maybe<String>;
  logo?: Maybe<String>;
  banner?: Maybe<String>;
  inbox?: Maybe<ID_Input>;
}

export interface UserUpdateOneRequiredWithoutSessionsInput {
  create?: Maybe<UserCreateWithoutSessionsInput>;
  update?: Maybe<UserUpdateWithoutSessionsDataInput>;
  upsert?: Maybe<UserUpsertWithoutSessionsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface ContentEncodingCreateInput {
  id?: Maybe<ID_Input>;
  type: EncodingType;
  maintainer: ID_Input;
  createdBy: ID_Input;
  updatedBy?: Maybe<ID_Input>;
  name: String;
  charset: String;
}

export interface SessionUpdateInput {
  sessionToken?: Maybe<String>;
  csrfToken?: Maybe<String>;
  bearerToken?: Maybe<String>;
  clientTime?: Maybe<String>;
  validTo?: Maybe<DateTimeInput>;
  timedOut?: Maybe<DateTimeInput>;
  loggedOut?: Maybe<DateTimeInput>;
  user?: Maybe<UserUpdateOneRequiredWithoutSessionsInput>;
  agent?: Maybe<AgentUpdateOneRequiredInput>;
  location?: Maybe<LocationUpdateOneInput>;
  ipAddress?: Maybe<String>;
}

export interface ContentEncodingUpdateInput {
  type?: Maybe<EncodingType>;
  maintainer?: Maybe<ID_Input>;
  createdBy?: Maybe<ID_Input>;
  updatedBy?: Maybe<ID_Input>;
  name?: Maybe<String>;
  charset?: Maybe<String>;
}

export interface UserCreateWithoutSessionsInput {
  id?: Maybe<ID_Input>;
  type: UserType;
  email: String;
  timezone: String;
  challenge?: Maybe<String>;
  passwordSalt?: Maybe<String>;
  passwordHash?: Maybe<String>;
  agents?: Maybe<AgentCreateManyInput>;
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  phone?: Maybe<String>;
  mobilePhone?: Maybe<String>;
  organizationName?: Maybe<String>;
}

export interface ContentEncodingUpdateManyMutationInput {
  type?: Maybe<EncodingType>;
  maintainer?: Maybe<ID_Input>;
  createdBy?: Maybe<ID_Input>;
  updatedBy?: Maybe<ID_Input>;
  name?: Maybe<String>;
  charset?: Maybe<String>;
}

export interface TagSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<TagWhereInput>;
  AND?: Maybe<TagSubscriptionWhereInput[] | TagSubscriptionWhereInput>;
  OR?: Maybe<TagSubscriptionWhereInput[] | TagSubscriptionWhereInput>;
  NOT?: Maybe<TagSubscriptionWhereInput[] | TagSubscriptionWhereInput>;
}

export interface EntryCreateInput {
  id?: Maybe<ID_Input>;
  type: EntryType;
  owner: ID_Input;
  createdBy: ID_Input;
  updatedBy?: Maybe<ID_Input>;
  name?: Maybe<String>;
  content?: Maybe<Json>;
  contentEncoding?: Maybe<ID_Input>;
  tags?: Maybe<TagCreateManyInput>;
}

export interface LocationSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<LocationWhereInput>;
  AND?: Maybe<
    LocationSubscriptionWhereInput[] | LocationSubscriptionWhereInput
  >;
  OR?: Maybe<LocationSubscriptionWhereInput[] | LocationSubscriptionWhereInput>;
  NOT?: Maybe<
    LocationSubscriptionWhereInput[] | LocationSubscriptionWhereInput
  >;
}

export interface EntryUpdateInput {
  type?: Maybe<EntryType>;
  owner?: Maybe<ID_Input>;
  createdBy?: Maybe<ID_Input>;
  updatedBy?: Maybe<ID_Input>;
  name?: Maybe<String>;
  content?: Maybe<Json>;
  contentEncoding?: Maybe<ID_Input>;
  tags?: Maybe<TagUpdateManyInput>;
}

export interface ContentEncodingSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ContentEncodingWhereInput>;
  AND?: Maybe<
    | ContentEncodingSubscriptionWhereInput[]
    | ContentEncodingSubscriptionWhereInput
  >;
  OR?: Maybe<
    | ContentEncodingSubscriptionWhereInput[]
    | ContentEncodingSubscriptionWhereInput
  >;
  NOT?: Maybe<
    | ContentEncodingSubscriptionWhereInput[]
    | ContentEncodingSubscriptionWhereInput
  >;
}

export interface EntryUpdateManyMutationInput {
  type?: Maybe<EntryType>;
  owner?: Maybe<ID_Input>;
  createdBy?: Maybe<ID_Input>;
  updatedBy?: Maybe<ID_Input>;
  name?: Maybe<String>;
  content?: Maybe<Json>;
  contentEncoding?: Maybe<ID_Input>;
}

export interface UserUpdateManyMutationInput {
  type?: Maybe<UserType>;
  email?: Maybe<String>;
  timezone?: Maybe<String>;
  challenge?: Maybe<String>;
  passwordSalt?: Maybe<String>;
  passwordHash?: Maybe<String>;
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  phone?: Maybe<String>;
  mobilePhone?: Maybe<String>;
  organizationName?: Maybe<String>;
}

export interface EntryUpdateManyDataInput {
  type?: Maybe<EntryType>;
  owner?: Maybe<ID_Input>;
  createdBy?: Maybe<ID_Input>;
  updatedBy?: Maybe<ID_Input>;
  name?: Maybe<String>;
  content?: Maybe<Json>;
  contentEncoding?: Maybe<ID_Input>;
}

export interface SessionScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  sessionToken?: Maybe<String>;
  sessionToken_not?: Maybe<String>;
  sessionToken_in?: Maybe<String[] | String>;
  sessionToken_not_in?: Maybe<String[] | String>;
  sessionToken_lt?: Maybe<String>;
  sessionToken_lte?: Maybe<String>;
  sessionToken_gt?: Maybe<String>;
  sessionToken_gte?: Maybe<String>;
  sessionToken_contains?: Maybe<String>;
  sessionToken_not_contains?: Maybe<String>;
  sessionToken_starts_with?: Maybe<String>;
  sessionToken_not_starts_with?: Maybe<String>;
  sessionToken_ends_with?: Maybe<String>;
  sessionToken_not_ends_with?: Maybe<String>;
  csrfToken?: Maybe<String>;
  csrfToken_not?: Maybe<String>;
  csrfToken_in?: Maybe<String[] | String>;
  csrfToken_not_in?: Maybe<String[] | String>;
  csrfToken_lt?: Maybe<String>;
  csrfToken_lte?: Maybe<String>;
  csrfToken_gt?: Maybe<String>;
  csrfToken_gte?: Maybe<String>;
  csrfToken_contains?: Maybe<String>;
  csrfToken_not_contains?: Maybe<String>;
  csrfToken_starts_with?: Maybe<String>;
  csrfToken_not_starts_with?: Maybe<String>;
  csrfToken_ends_with?: Maybe<String>;
  csrfToken_not_ends_with?: Maybe<String>;
  bearerToken?: Maybe<String>;
  bearerToken_not?: Maybe<String>;
  bearerToken_in?: Maybe<String[] | String>;
  bearerToken_not_in?: Maybe<String[] | String>;
  bearerToken_lt?: Maybe<String>;
  bearerToken_lte?: Maybe<String>;
  bearerToken_gt?: Maybe<String>;
  bearerToken_gte?: Maybe<String>;
  bearerToken_contains?: Maybe<String>;
  bearerToken_not_contains?: Maybe<String>;
  bearerToken_starts_with?: Maybe<String>;
  bearerToken_not_starts_with?: Maybe<String>;
  bearerToken_ends_with?: Maybe<String>;
  bearerToken_not_ends_with?: Maybe<String>;
  clientTime?: Maybe<String>;
  clientTime_not?: Maybe<String>;
  clientTime_in?: Maybe<String[] | String>;
  clientTime_not_in?: Maybe<String[] | String>;
  clientTime_lt?: Maybe<String>;
  clientTime_lte?: Maybe<String>;
  clientTime_gt?: Maybe<String>;
  clientTime_gte?: Maybe<String>;
  clientTime_contains?: Maybe<String>;
  clientTime_not_contains?: Maybe<String>;
  clientTime_starts_with?: Maybe<String>;
  clientTime_not_starts_with?: Maybe<String>;
  clientTime_ends_with?: Maybe<String>;
  clientTime_not_ends_with?: Maybe<String>;
  validTo?: Maybe<DateTimeInput>;
  validTo_not?: Maybe<DateTimeInput>;
  validTo_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  validTo_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  validTo_lt?: Maybe<DateTimeInput>;
  validTo_lte?: Maybe<DateTimeInput>;
  validTo_gt?: Maybe<DateTimeInput>;
  validTo_gte?: Maybe<DateTimeInput>;
  timedOut?: Maybe<DateTimeInput>;
  timedOut_not?: Maybe<DateTimeInput>;
  timedOut_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  timedOut_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  timedOut_lt?: Maybe<DateTimeInput>;
  timedOut_lte?: Maybe<DateTimeInput>;
  timedOut_gt?: Maybe<DateTimeInput>;
  timedOut_gte?: Maybe<DateTimeInput>;
  loggedOut?: Maybe<DateTimeInput>;
  loggedOut_not?: Maybe<DateTimeInput>;
  loggedOut_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  loggedOut_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  loggedOut_lt?: Maybe<DateTimeInput>;
  loggedOut_lte?: Maybe<DateTimeInput>;
  loggedOut_gt?: Maybe<DateTimeInput>;
  loggedOut_gte?: Maybe<DateTimeInput>;
  ipAddress?: Maybe<String>;
  ipAddress_not?: Maybe<String>;
  ipAddress_in?: Maybe<String[] | String>;
  ipAddress_not_in?: Maybe<String[] | String>;
  ipAddress_lt?: Maybe<String>;
  ipAddress_lte?: Maybe<String>;
  ipAddress_gt?: Maybe<String>;
  ipAddress_gte?: Maybe<String>;
  ipAddress_contains?: Maybe<String>;
  ipAddress_not_contains?: Maybe<String>;
  ipAddress_starts_with?: Maybe<String>;
  ipAddress_not_starts_with?: Maybe<String>;
  ipAddress_ends_with?: Maybe<String>;
  ipAddress_not_ends_with?: Maybe<String>;
  AND?: Maybe<SessionScalarWhereInput[] | SessionScalarWhereInput>;
  OR?: Maybe<SessionScalarWhereInput[] | SessionScalarWhereInput>;
  NOT?: Maybe<SessionScalarWhereInput[] | SessionScalarWhereInput>;
}

export interface MembershipCreateManyInput {
  create?: Maybe<MembershipCreateInput[] | MembershipCreateInput>;
  connect?: Maybe<MembershipWhereUniqueInput[] | MembershipWhereUniqueInput>;
}

export interface SessionUpdateWithoutUserDataInput {
  sessionToken?: Maybe<String>;
  csrfToken?: Maybe<String>;
  bearerToken?: Maybe<String>;
  clientTime?: Maybe<String>;
  validTo?: Maybe<DateTimeInput>;
  timedOut?: Maybe<DateTimeInput>;
  loggedOut?: Maybe<DateTimeInput>;
  agent?: Maybe<AgentUpdateOneRequiredInput>;
  location?: Maybe<LocationUpdateOneInput>;
  ipAddress?: Maybe<String>;
}

export interface MembershipCreateInput {
  id?: Maybe<ID_Input>;
  type: MembershipType;
  createdBy: ID_Input;
  updatedBy?: Maybe<ID_Input>;
  member: AgentCreateOneInput;
  showHistory: Boolean;
}

export interface SessionUpdateManyWithoutUserInput {
  create?: Maybe<
    SessionCreateWithoutUserInput[] | SessionCreateWithoutUserInput
  >;
  delete?: Maybe<SessionWhereUniqueInput[] | SessionWhereUniqueInput>;
  connect?: Maybe<SessionWhereUniqueInput[] | SessionWhereUniqueInput>;
  set?: Maybe<SessionWhereUniqueInput[] | SessionWhereUniqueInput>;
  disconnect?: Maybe<SessionWhereUniqueInput[] | SessionWhereUniqueInput>;
  update?: Maybe<
    | SessionUpdateWithWhereUniqueWithoutUserInput[]
    | SessionUpdateWithWhereUniqueWithoutUserInput
  >;
  upsert?: Maybe<
    | SessionUpsertWithWhereUniqueWithoutUserInput[]
    | SessionUpsertWithWhereUniqueWithoutUserInput
  >;
  deleteMany?: Maybe<SessionScalarWhereInput[] | SessionScalarWhereInput>;
  updateMany?: Maybe<
    | SessionUpdateManyWithWhereNestedInput[]
    | SessionUpdateManyWithWhereNestedInput
  >;
}

export interface AgentCreateOneInput {
  create?: Maybe<AgentCreateInput>;
  connect?: Maybe<AgentWhereUniqueInput>;
}

export interface SessionCreateManyWithoutUserInput {
  create?: Maybe<
    SessionCreateWithoutUserInput[] | SessionCreateWithoutUserInput
  >;
  connect?: Maybe<SessionWhereUniqueInput[] | SessionWhereUniqueInput>;
}

export interface EntryCreateManyInput {
  create?: Maybe<EntryCreateInput[] | EntryCreateInput>;
  connect?: Maybe<EntryWhereUniqueInput[] | EntryWhereUniqueInput>;
}

export type MembershipWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface GroupUpdateInput {
  type?: Maybe<GroupType>;
  owner?: Maybe<ID_Input>;
  createdBy?: Maybe<ID_Input>;
  updatedBy?: Maybe<ID_Input>;
  isPublic?: Maybe<Boolean>;
  memberships?: Maybe<MembershipUpdateManyInput>;
  name?: Maybe<String>;
  title?: Maybe<String>;
  description?: Maybe<String>;
  logo?: Maybe<String>;
  banner?: Maybe<String>;
  entries?: Maybe<EntryUpdateManyInput>;
  inbox?: Maybe<ID_Input>;
  tags?: Maybe<TagUpdateManyInput>;
}

export type SessionWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  sessionToken?: Maybe<String>;
}>;

export interface MembershipUpdateManyInput {
  create?: Maybe<MembershipCreateInput[] | MembershipCreateInput>;
  update?: Maybe<
    | MembershipUpdateWithWhereUniqueNestedInput[]
    | MembershipUpdateWithWhereUniqueNestedInput
  >;
  upsert?: Maybe<
    | MembershipUpsertWithWhereUniqueNestedInput[]
    | MembershipUpsertWithWhereUniqueNestedInput
  >;
  delete?: Maybe<MembershipWhereUniqueInput[] | MembershipWhereUniqueInput>;
  connect?: Maybe<MembershipWhereUniqueInput[] | MembershipWhereUniqueInput>;
  set?: Maybe<MembershipWhereUniqueInput[] | MembershipWhereUniqueInput>;
  disconnect?: Maybe<MembershipWhereUniqueInput[] | MembershipWhereUniqueInput>;
  deleteMany?: Maybe<MembershipScalarWhereInput[] | MembershipScalarWhereInput>;
  updateMany?: Maybe<
    | MembershipUpdateManyWithWhereNestedInput[]
    | MembershipUpdateManyWithWhereNestedInput
  >;
}

export interface SessionWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  sessionToken?: Maybe<String>;
  sessionToken_not?: Maybe<String>;
  sessionToken_in?: Maybe<String[] | String>;
  sessionToken_not_in?: Maybe<String[] | String>;
  sessionToken_lt?: Maybe<String>;
  sessionToken_lte?: Maybe<String>;
  sessionToken_gt?: Maybe<String>;
  sessionToken_gte?: Maybe<String>;
  sessionToken_contains?: Maybe<String>;
  sessionToken_not_contains?: Maybe<String>;
  sessionToken_starts_with?: Maybe<String>;
  sessionToken_not_starts_with?: Maybe<String>;
  sessionToken_ends_with?: Maybe<String>;
  sessionToken_not_ends_with?: Maybe<String>;
  csrfToken?: Maybe<String>;
  csrfToken_not?: Maybe<String>;
  csrfToken_in?: Maybe<String[] | String>;
  csrfToken_not_in?: Maybe<String[] | String>;
  csrfToken_lt?: Maybe<String>;
  csrfToken_lte?: Maybe<String>;
  csrfToken_gt?: Maybe<String>;
  csrfToken_gte?: Maybe<String>;
  csrfToken_contains?: Maybe<String>;
  csrfToken_not_contains?: Maybe<String>;
  csrfToken_starts_with?: Maybe<String>;
  csrfToken_not_starts_with?: Maybe<String>;
  csrfToken_ends_with?: Maybe<String>;
  csrfToken_not_ends_with?: Maybe<String>;
  bearerToken?: Maybe<String>;
  bearerToken_not?: Maybe<String>;
  bearerToken_in?: Maybe<String[] | String>;
  bearerToken_not_in?: Maybe<String[] | String>;
  bearerToken_lt?: Maybe<String>;
  bearerToken_lte?: Maybe<String>;
  bearerToken_gt?: Maybe<String>;
  bearerToken_gte?: Maybe<String>;
  bearerToken_contains?: Maybe<String>;
  bearerToken_not_contains?: Maybe<String>;
  bearerToken_starts_with?: Maybe<String>;
  bearerToken_not_starts_with?: Maybe<String>;
  bearerToken_ends_with?: Maybe<String>;
  bearerToken_not_ends_with?: Maybe<String>;
  clientTime?: Maybe<String>;
  clientTime_not?: Maybe<String>;
  clientTime_in?: Maybe<String[] | String>;
  clientTime_not_in?: Maybe<String[] | String>;
  clientTime_lt?: Maybe<String>;
  clientTime_lte?: Maybe<String>;
  clientTime_gt?: Maybe<String>;
  clientTime_gte?: Maybe<String>;
  clientTime_contains?: Maybe<String>;
  clientTime_not_contains?: Maybe<String>;
  clientTime_starts_with?: Maybe<String>;
  clientTime_not_starts_with?: Maybe<String>;
  clientTime_ends_with?: Maybe<String>;
  clientTime_not_ends_with?: Maybe<String>;
  validTo?: Maybe<DateTimeInput>;
  validTo_not?: Maybe<DateTimeInput>;
  validTo_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  validTo_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  validTo_lt?: Maybe<DateTimeInput>;
  validTo_lte?: Maybe<DateTimeInput>;
  validTo_gt?: Maybe<DateTimeInput>;
  validTo_gte?: Maybe<DateTimeInput>;
  timedOut?: Maybe<DateTimeInput>;
  timedOut_not?: Maybe<DateTimeInput>;
  timedOut_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  timedOut_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  timedOut_lt?: Maybe<DateTimeInput>;
  timedOut_lte?: Maybe<DateTimeInput>;
  timedOut_gt?: Maybe<DateTimeInput>;
  timedOut_gte?: Maybe<DateTimeInput>;
  loggedOut?: Maybe<DateTimeInput>;
  loggedOut_not?: Maybe<DateTimeInput>;
  loggedOut_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  loggedOut_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  loggedOut_lt?: Maybe<DateTimeInput>;
  loggedOut_lte?: Maybe<DateTimeInput>;
  loggedOut_gt?: Maybe<DateTimeInput>;
  loggedOut_gte?: Maybe<DateTimeInput>;
  user?: Maybe<UserWhereInput>;
  agent?: Maybe<AgentWhereInput>;
  location?: Maybe<LocationWhereInput>;
  ipAddress?: Maybe<String>;
  ipAddress_not?: Maybe<String>;
  ipAddress_in?: Maybe<String[] | String>;
  ipAddress_not_in?: Maybe<String[] | String>;
  ipAddress_lt?: Maybe<String>;
  ipAddress_lte?: Maybe<String>;
  ipAddress_gt?: Maybe<String>;
  ipAddress_gte?: Maybe<String>;
  ipAddress_contains?: Maybe<String>;
  ipAddress_not_contains?: Maybe<String>;
  ipAddress_starts_with?: Maybe<String>;
  ipAddress_not_starts_with?: Maybe<String>;
  ipAddress_ends_with?: Maybe<String>;
  ipAddress_not_ends_with?: Maybe<String>;
  AND?: Maybe<SessionWhereInput[] | SessionWhereInput>;
  OR?: Maybe<SessionWhereInput[] | SessionWhereInput>;
  NOT?: Maybe<SessionWhereInput[] | SessionWhereInput>;
}

export interface MembershipUpdateWithWhereUniqueNestedInput {
  where: MembershipWhereUniqueInput;
  data: MembershipUpdateDataInput;
}

export interface UserUpdateWithoutSessionsDataInput {
  type?: Maybe<UserType>;
  email?: Maybe<String>;
  timezone?: Maybe<String>;
  challenge?: Maybe<String>;
  passwordSalt?: Maybe<String>;
  passwordHash?: Maybe<String>;
  agents?: Maybe<AgentUpdateManyInput>;
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  phone?: Maybe<String>;
  mobilePhone?: Maybe<String>;
  organizationName?: Maybe<String>;
}

export interface MembershipUpdateDataInput {
  type?: Maybe<MembershipType>;
  createdBy?: Maybe<ID_Input>;
  updatedBy?: Maybe<ID_Input>;
  member?: Maybe<AgentUpdateOneRequiredInput>;
  showHistory?: Maybe<Boolean>;
}

export interface AgentCreateManyInput {
  create?: Maybe<AgentCreateInput[] | AgentCreateInput>;
  connect?: Maybe<AgentWhereUniqueInput[] | AgentWhereUniqueInput>;
}

export interface AgentUpdateOneRequiredInput {
  create?: Maybe<AgentCreateInput>;
  update?: Maybe<AgentUpdateDataInput>;
  upsert?: Maybe<AgentUpsertNestedInput>;
  connect?: Maybe<AgentWhereUniqueInput>;
}

export interface SessionSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<SessionWhereInput>;
  AND?: Maybe<SessionSubscriptionWhereInput[] | SessionSubscriptionWhereInput>;
  OR?: Maybe<SessionSubscriptionWhereInput[] | SessionSubscriptionWhereInput>;
  NOT?: Maybe<SessionSubscriptionWhereInput[] | SessionSubscriptionWhereInput>;
}

export interface AgentUpdateDataInput {
  type?: Maybe<AgentType>;
  owner?: Maybe<ID_Input>;
  createdBy?: Maybe<ID_Input>;
  updatedBy?: Maybe<ID_Input>;
  name?: Maybe<String>;
  status?: Maybe<AgentStatus>;
  timezone?: Maybe<String>;
  location?: Maybe<LocationUpdateOneInput>;
  profileSlogan?: Maybe<String>;
  profileAvatar?: Maybe<String>;
  profileJobTitle?: Maybe<String>;
  profileBanner?: Maybe<String>;
  profileType?: Maybe<ProfileType>;
  serviceDescription?: Maybe<String>;
  inboxDescription?: Maybe<String>;
}

export interface EntryWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  type?: Maybe<EntryType>;
  type_not?: Maybe<EntryType>;
  type_in?: Maybe<EntryType[] | EntryType>;
  type_not_in?: Maybe<EntryType[] | EntryType>;
  owner?: Maybe<ID_Input>;
  owner_not?: Maybe<ID_Input>;
  owner_in?: Maybe<ID_Input[] | ID_Input>;
  owner_not_in?: Maybe<ID_Input[] | ID_Input>;
  owner_lt?: Maybe<ID_Input>;
  owner_lte?: Maybe<ID_Input>;
  owner_gt?: Maybe<ID_Input>;
  owner_gte?: Maybe<ID_Input>;
  owner_contains?: Maybe<ID_Input>;
  owner_not_contains?: Maybe<ID_Input>;
  owner_starts_with?: Maybe<ID_Input>;
  owner_not_starts_with?: Maybe<ID_Input>;
  owner_ends_with?: Maybe<ID_Input>;
  owner_not_ends_with?: Maybe<ID_Input>;
  createdBy?: Maybe<ID_Input>;
  createdBy_not?: Maybe<ID_Input>;
  createdBy_in?: Maybe<ID_Input[] | ID_Input>;
  createdBy_not_in?: Maybe<ID_Input[] | ID_Input>;
  createdBy_lt?: Maybe<ID_Input>;
  createdBy_lte?: Maybe<ID_Input>;
  createdBy_gt?: Maybe<ID_Input>;
  createdBy_gte?: Maybe<ID_Input>;
  createdBy_contains?: Maybe<ID_Input>;
  createdBy_not_contains?: Maybe<ID_Input>;
  createdBy_starts_with?: Maybe<ID_Input>;
  createdBy_not_starts_with?: Maybe<ID_Input>;
  createdBy_ends_with?: Maybe<ID_Input>;
  createdBy_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedBy?: Maybe<ID_Input>;
  updatedBy_not?: Maybe<ID_Input>;
  updatedBy_in?: Maybe<ID_Input[] | ID_Input>;
  updatedBy_not_in?: Maybe<ID_Input[] | ID_Input>;
  updatedBy_lt?: Maybe<ID_Input>;
  updatedBy_lte?: Maybe<ID_Input>;
  updatedBy_gt?: Maybe<ID_Input>;
  updatedBy_gte?: Maybe<ID_Input>;
  updatedBy_contains?: Maybe<ID_Input>;
  updatedBy_not_contains?: Maybe<ID_Input>;
  updatedBy_starts_with?: Maybe<ID_Input>;
  updatedBy_not_starts_with?: Maybe<ID_Input>;
  updatedBy_ends_with?: Maybe<ID_Input>;
  updatedBy_not_ends_with?: Maybe<ID_Input>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  contentEncoding?: Maybe<ID_Input>;
  contentEncoding_not?: Maybe<ID_Input>;
  contentEncoding_in?: Maybe<ID_Input[] | ID_Input>;
  contentEncoding_not_in?: Maybe<ID_Input[] | ID_Input>;
  contentEncoding_lt?: Maybe<ID_Input>;
  contentEncoding_lte?: Maybe<ID_Input>;
  contentEncoding_gt?: Maybe<ID_Input>;
  contentEncoding_gte?: Maybe<ID_Input>;
  contentEncoding_contains?: Maybe<ID_Input>;
  contentEncoding_not_contains?: Maybe<ID_Input>;
  contentEncoding_starts_with?: Maybe<ID_Input>;
  contentEncoding_not_starts_with?: Maybe<ID_Input>;
  contentEncoding_ends_with?: Maybe<ID_Input>;
  contentEncoding_not_ends_with?: Maybe<ID_Input>;
  tags_every?: Maybe<TagWhereInput>;
  tags_some?: Maybe<TagWhereInput>;
  tags_none?: Maybe<TagWhereInput>;
  AND?: Maybe<EntryWhereInput[] | EntryWhereInput>;
  OR?: Maybe<EntryWhereInput[] | EntryWhereInput>;
  NOT?: Maybe<EntryWhereInput[] | EntryWhereInput>;
}

export interface AgentUpsertNestedInput {
  update: AgentUpdateDataInput;
  create: AgentCreateInput;
}

export interface MembershipWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  type?: Maybe<MembershipType>;
  type_not?: Maybe<MembershipType>;
  type_in?: Maybe<MembershipType[] | MembershipType>;
  type_not_in?: Maybe<MembershipType[] | MembershipType>;
  createdBy?: Maybe<ID_Input>;
  createdBy_not?: Maybe<ID_Input>;
  createdBy_in?: Maybe<ID_Input[] | ID_Input>;
  createdBy_not_in?: Maybe<ID_Input[] | ID_Input>;
  createdBy_lt?: Maybe<ID_Input>;
  createdBy_lte?: Maybe<ID_Input>;
  createdBy_gt?: Maybe<ID_Input>;
  createdBy_gte?: Maybe<ID_Input>;
  createdBy_contains?: Maybe<ID_Input>;
  createdBy_not_contains?: Maybe<ID_Input>;
  createdBy_starts_with?: Maybe<ID_Input>;
  createdBy_not_starts_with?: Maybe<ID_Input>;
  createdBy_ends_with?: Maybe<ID_Input>;
  createdBy_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedBy?: Maybe<ID_Input>;
  updatedBy_not?: Maybe<ID_Input>;
  updatedBy_in?: Maybe<ID_Input[] | ID_Input>;
  updatedBy_not_in?: Maybe<ID_Input[] | ID_Input>;
  updatedBy_lt?: Maybe<ID_Input>;
  updatedBy_lte?: Maybe<ID_Input>;
  updatedBy_gt?: Maybe<ID_Input>;
  updatedBy_gte?: Maybe<ID_Input>;
  updatedBy_contains?: Maybe<ID_Input>;
  updatedBy_not_contains?: Maybe<ID_Input>;
  updatedBy_starts_with?: Maybe<ID_Input>;
  updatedBy_not_starts_with?: Maybe<ID_Input>;
  updatedBy_ends_with?: Maybe<ID_Input>;
  updatedBy_not_ends_with?: Maybe<ID_Input>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  member?: Maybe<AgentWhereInput>;
  showHistory?: Maybe<Boolean>;
  showHistory_not?: Maybe<Boolean>;
  AND?: Maybe<MembershipWhereInput[] | MembershipWhereInput>;
  OR?: Maybe<MembershipWhereInput[] | MembershipWhereInput>;
  NOT?: Maybe<MembershipWhereInput[] | MembershipWhereInput>;
}

export interface MembershipUpsertWithWhereUniqueNestedInput {
  where: MembershipWhereUniqueInput;
  update: MembershipUpdateDataInput;
  create: MembershipCreateInput;
}

export interface SessionCreateWithoutUserInput {
  id?: Maybe<ID_Input>;
  sessionToken: String;
  csrfToken?: Maybe<String>;
  bearerToken?: Maybe<String>;
  clientTime?: Maybe<String>;
  validTo: DateTimeInput;
  timedOut?: Maybe<DateTimeInput>;
  loggedOut?: Maybe<DateTimeInput>;
  agent: AgentCreateOneInput;
  location?: Maybe<LocationCreateOneInput>;
  ipAddress?: Maybe<String>;
}

export interface MembershipScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  type?: Maybe<MembershipType>;
  type_not?: Maybe<MembershipType>;
  type_in?: Maybe<MembershipType[] | MembershipType>;
  type_not_in?: Maybe<MembershipType[] | MembershipType>;
  createdBy?: Maybe<ID_Input>;
  createdBy_not?: Maybe<ID_Input>;
  createdBy_in?: Maybe<ID_Input[] | ID_Input>;
  createdBy_not_in?: Maybe<ID_Input[] | ID_Input>;
  createdBy_lt?: Maybe<ID_Input>;
  createdBy_lte?: Maybe<ID_Input>;
  createdBy_gt?: Maybe<ID_Input>;
  createdBy_gte?: Maybe<ID_Input>;
  createdBy_contains?: Maybe<ID_Input>;
  createdBy_not_contains?: Maybe<ID_Input>;
  createdBy_starts_with?: Maybe<ID_Input>;
  createdBy_not_starts_with?: Maybe<ID_Input>;
  createdBy_ends_with?: Maybe<ID_Input>;
  createdBy_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedBy?: Maybe<ID_Input>;
  updatedBy_not?: Maybe<ID_Input>;
  updatedBy_in?: Maybe<ID_Input[] | ID_Input>;
  updatedBy_not_in?: Maybe<ID_Input[] | ID_Input>;
  updatedBy_lt?: Maybe<ID_Input>;
  updatedBy_lte?: Maybe<ID_Input>;
  updatedBy_gt?: Maybe<ID_Input>;
  updatedBy_gte?: Maybe<ID_Input>;
  updatedBy_contains?: Maybe<ID_Input>;
  updatedBy_not_contains?: Maybe<ID_Input>;
  updatedBy_starts_with?: Maybe<ID_Input>;
  updatedBy_not_starts_with?: Maybe<ID_Input>;
  updatedBy_ends_with?: Maybe<ID_Input>;
  updatedBy_not_ends_with?: Maybe<ID_Input>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  showHistory?: Maybe<Boolean>;
  showHistory_not?: Maybe<Boolean>;
  AND?: Maybe<MembershipScalarWhereInput[] | MembershipScalarWhereInput>;
  OR?: Maybe<MembershipScalarWhereInput[] | MembershipScalarWhereInput>;
  NOT?: Maybe<MembershipScalarWhereInput[] | MembershipScalarWhereInput>;
}

export interface UserUpsertWithoutSessionsInput {
  update: UserUpdateWithoutSessionsDataInput;
  create: UserCreateWithoutSessionsInput;
}

export interface MembershipUpdateManyWithWhereNestedInput {
  where: MembershipScalarWhereInput;
  data: MembershipUpdateManyDataInput;
}

export interface AgentUpdateWithWhereUniqueNestedInput {
  where: AgentWhereUniqueInput;
  data: AgentUpdateDataInput;
}

export interface MembershipUpdateManyDataInput {
  type?: Maybe<MembershipType>;
  createdBy?: Maybe<ID_Input>;
  updatedBy?: Maybe<ID_Input>;
  showHistory?: Maybe<Boolean>;
}

export type ContentEncodingWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface EntryUpdateManyInput {
  create?: Maybe<EntryCreateInput[] | EntryCreateInput>;
  update?: Maybe<
    | EntryUpdateWithWhereUniqueNestedInput[]
    | EntryUpdateWithWhereUniqueNestedInput
  >;
  upsert?: Maybe<
    | EntryUpsertWithWhereUniqueNestedInput[]
    | EntryUpsertWithWhereUniqueNestedInput
  >;
  delete?: Maybe<EntryWhereUniqueInput[] | EntryWhereUniqueInput>;
  connect?: Maybe<EntryWhereUniqueInput[] | EntryWhereUniqueInput>;
  set?: Maybe<EntryWhereUniqueInput[] | EntryWhereUniqueInput>;
  disconnect?: Maybe<EntryWhereUniqueInput[] | EntryWhereUniqueInput>;
  deleteMany?: Maybe<EntryScalarWhereInput[] | EntryScalarWhereInput>;
  updateMany?: Maybe<
    EntryUpdateManyWithWhereNestedInput[] | EntryUpdateManyWithWhereNestedInput
  >;
}

export interface SessionUpdateManyWithWhereNestedInput {
  where: SessionScalarWhereInput;
  data: SessionUpdateManyDataInput;
}

export interface EntryScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  type?: Maybe<EntryType>;
  type_not?: Maybe<EntryType>;
  type_in?: Maybe<EntryType[] | EntryType>;
  type_not_in?: Maybe<EntryType[] | EntryType>;
  owner?: Maybe<ID_Input>;
  owner_not?: Maybe<ID_Input>;
  owner_in?: Maybe<ID_Input[] | ID_Input>;
  owner_not_in?: Maybe<ID_Input[] | ID_Input>;
  owner_lt?: Maybe<ID_Input>;
  owner_lte?: Maybe<ID_Input>;
  owner_gt?: Maybe<ID_Input>;
  owner_gte?: Maybe<ID_Input>;
  owner_contains?: Maybe<ID_Input>;
  owner_not_contains?: Maybe<ID_Input>;
  owner_starts_with?: Maybe<ID_Input>;
  owner_not_starts_with?: Maybe<ID_Input>;
  owner_ends_with?: Maybe<ID_Input>;
  owner_not_ends_with?: Maybe<ID_Input>;
  createdBy?: Maybe<ID_Input>;
  createdBy_not?: Maybe<ID_Input>;
  createdBy_in?: Maybe<ID_Input[] | ID_Input>;
  createdBy_not_in?: Maybe<ID_Input[] | ID_Input>;
  createdBy_lt?: Maybe<ID_Input>;
  createdBy_lte?: Maybe<ID_Input>;
  createdBy_gt?: Maybe<ID_Input>;
  createdBy_gte?: Maybe<ID_Input>;
  createdBy_contains?: Maybe<ID_Input>;
  createdBy_not_contains?: Maybe<ID_Input>;
  createdBy_starts_with?: Maybe<ID_Input>;
  createdBy_not_starts_with?: Maybe<ID_Input>;
  createdBy_ends_with?: Maybe<ID_Input>;
  createdBy_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedBy?: Maybe<ID_Input>;
  updatedBy_not?: Maybe<ID_Input>;
  updatedBy_in?: Maybe<ID_Input[] | ID_Input>;
  updatedBy_not_in?: Maybe<ID_Input[] | ID_Input>;
  updatedBy_lt?: Maybe<ID_Input>;
  updatedBy_lte?: Maybe<ID_Input>;
  updatedBy_gt?: Maybe<ID_Input>;
  updatedBy_gte?: Maybe<ID_Input>;
  updatedBy_contains?: Maybe<ID_Input>;
  updatedBy_not_contains?: Maybe<ID_Input>;
  updatedBy_starts_with?: Maybe<ID_Input>;
  updatedBy_not_starts_with?: Maybe<ID_Input>;
  updatedBy_ends_with?: Maybe<ID_Input>;
  updatedBy_not_ends_with?: Maybe<ID_Input>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  contentEncoding?: Maybe<ID_Input>;
  contentEncoding_not?: Maybe<ID_Input>;
  contentEncoding_in?: Maybe<ID_Input[] | ID_Input>;
  contentEncoding_not_in?: Maybe<ID_Input[] | ID_Input>;
  contentEncoding_lt?: Maybe<ID_Input>;
  contentEncoding_lte?: Maybe<ID_Input>;
  contentEncoding_gt?: Maybe<ID_Input>;
  contentEncoding_gte?: Maybe<ID_Input>;
  contentEncoding_contains?: Maybe<ID_Input>;
  contentEncoding_not_contains?: Maybe<ID_Input>;
  contentEncoding_starts_with?: Maybe<ID_Input>;
  contentEncoding_not_starts_with?: Maybe<ID_Input>;
  contentEncoding_ends_with?: Maybe<ID_Input>;
  contentEncoding_not_ends_with?: Maybe<ID_Input>;
  AND?: Maybe<EntryScalarWhereInput[] | EntryScalarWhereInput>;
  OR?: Maybe<EntryScalarWhereInput[] | EntryScalarWhereInput>;
  NOT?: Maybe<EntryScalarWhereInput[] | EntryScalarWhereInput>;
}

export interface EntryUpsertWithWhereUniqueNestedInput {
  where: EntryWhereUniqueInput;
  update: EntryUpdateDataInput;
  create: EntryCreateInput;
}

export interface EntryUpdateDataInput {
  type?: Maybe<EntryType>;
  owner?: Maybe<ID_Input>;
  createdBy?: Maybe<ID_Input>;
  updatedBy?: Maybe<ID_Input>;
  name?: Maybe<String>;
  content?: Maybe<Json>;
  contentEncoding?: Maybe<ID_Input>;
  tags?: Maybe<TagUpdateManyInput>;
}

export interface EntryUpdateWithWhereUniqueNestedInput {
  where: EntryWhereUniqueInput;
  data: EntryUpdateDataInput;
}

export interface GroupWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  type?: Maybe<GroupType>;
  type_not?: Maybe<GroupType>;
  type_in?: Maybe<GroupType[] | GroupType>;
  type_not_in?: Maybe<GroupType[] | GroupType>;
  owner?: Maybe<ID_Input>;
  owner_not?: Maybe<ID_Input>;
  owner_in?: Maybe<ID_Input[] | ID_Input>;
  owner_not_in?: Maybe<ID_Input[] | ID_Input>;
  owner_lt?: Maybe<ID_Input>;
  owner_lte?: Maybe<ID_Input>;
  owner_gt?: Maybe<ID_Input>;
  owner_gte?: Maybe<ID_Input>;
  owner_contains?: Maybe<ID_Input>;
  owner_not_contains?: Maybe<ID_Input>;
  owner_starts_with?: Maybe<ID_Input>;
  owner_not_starts_with?: Maybe<ID_Input>;
  owner_ends_with?: Maybe<ID_Input>;
  owner_not_ends_with?: Maybe<ID_Input>;
  createdBy?: Maybe<ID_Input>;
  createdBy_not?: Maybe<ID_Input>;
  createdBy_in?: Maybe<ID_Input[] | ID_Input>;
  createdBy_not_in?: Maybe<ID_Input[] | ID_Input>;
  createdBy_lt?: Maybe<ID_Input>;
  createdBy_lte?: Maybe<ID_Input>;
  createdBy_gt?: Maybe<ID_Input>;
  createdBy_gte?: Maybe<ID_Input>;
  createdBy_contains?: Maybe<ID_Input>;
  createdBy_not_contains?: Maybe<ID_Input>;
  createdBy_starts_with?: Maybe<ID_Input>;
  createdBy_not_starts_with?: Maybe<ID_Input>;
  createdBy_ends_with?: Maybe<ID_Input>;
  createdBy_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedBy?: Maybe<ID_Input>;
  updatedBy_not?: Maybe<ID_Input>;
  updatedBy_in?: Maybe<ID_Input[] | ID_Input>;
  updatedBy_not_in?: Maybe<ID_Input[] | ID_Input>;
  updatedBy_lt?: Maybe<ID_Input>;
  updatedBy_lte?: Maybe<ID_Input>;
  updatedBy_gt?: Maybe<ID_Input>;
  updatedBy_gte?: Maybe<ID_Input>;
  updatedBy_contains?: Maybe<ID_Input>;
  updatedBy_not_contains?: Maybe<ID_Input>;
  updatedBy_starts_with?: Maybe<ID_Input>;
  updatedBy_not_starts_with?: Maybe<ID_Input>;
  updatedBy_ends_with?: Maybe<ID_Input>;
  updatedBy_not_ends_with?: Maybe<ID_Input>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  isPublic?: Maybe<Boolean>;
  isPublic_not?: Maybe<Boolean>;
  memberships_every?: Maybe<MembershipWhereInput>;
  memberships_some?: Maybe<MembershipWhereInput>;
  memberships_none?: Maybe<MembershipWhereInput>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  logo?: Maybe<String>;
  logo_not?: Maybe<String>;
  logo_in?: Maybe<String[] | String>;
  logo_not_in?: Maybe<String[] | String>;
  logo_lt?: Maybe<String>;
  logo_lte?: Maybe<String>;
  logo_gt?: Maybe<String>;
  logo_gte?: Maybe<String>;
  logo_contains?: Maybe<String>;
  logo_not_contains?: Maybe<String>;
  logo_starts_with?: Maybe<String>;
  logo_not_starts_with?: Maybe<String>;
  logo_ends_with?: Maybe<String>;
  logo_not_ends_with?: Maybe<String>;
  banner?: Maybe<String>;
  banner_not?: Maybe<String>;
  banner_in?: Maybe<String[] | String>;
  banner_not_in?: Maybe<String[] | String>;
  banner_lt?: Maybe<String>;
  banner_lte?: Maybe<String>;
  banner_gt?: Maybe<String>;
  banner_gte?: Maybe<String>;
  banner_contains?: Maybe<String>;
  banner_not_contains?: Maybe<String>;
  banner_starts_with?: Maybe<String>;
  banner_not_starts_with?: Maybe<String>;
  banner_ends_with?: Maybe<String>;
  banner_not_ends_with?: Maybe<String>;
  entries_every?: Maybe<EntryWhereInput>;
  entries_some?: Maybe<EntryWhereInput>;
  entries_none?: Maybe<EntryWhereInput>;
  inbox?: Maybe<ID_Input>;
  inbox_not?: Maybe<ID_Input>;
  inbox_in?: Maybe<ID_Input[] | ID_Input>;
  inbox_not_in?: Maybe<ID_Input[] | ID_Input>;
  inbox_lt?: Maybe<ID_Input>;
  inbox_lte?: Maybe<ID_Input>;
  inbox_gt?: Maybe<ID_Input>;
  inbox_gte?: Maybe<ID_Input>;
  inbox_contains?: Maybe<ID_Input>;
  inbox_not_contains?: Maybe<ID_Input>;
  inbox_starts_with?: Maybe<ID_Input>;
  inbox_not_starts_with?: Maybe<ID_Input>;
  inbox_ends_with?: Maybe<ID_Input>;
  inbox_not_ends_with?: Maybe<ID_Input>;
  tags_every?: Maybe<TagWhereInput>;
  tags_some?: Maybe<TagWhereInput>;
  tags_none?: Maybe<TagWhereInput>;
  AND?: Maybe<GroupWhereInput[] | GroupWhereInput>;
  OR?: Maybe<GroupWhereInput[] | GroupWhereInput>;
  NOT?: Maybe<GroupWhereInput[] | GroupWhereInput>;
}

export type EntryWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type TagWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface AgentScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  type?: Maybe<AgentType>;
  type_not?: Maybe<AgentType>;
  type_in?: Maybe<AgentType[] | AgentType>;
  type_not_in?: Maybe<AgentType[] | AgentType>;
  owner?: Maybe<ID_Input>;
  owner_not?: Maybe<ID_Input>;
  owner_in?: Maybe<ID_Input[] | ID_Input>;
  owner_not_in?: Maybe<ID_Input[] | ID_Input>;
  owner_lt?: Maybe<ID_Input>;
  owner_lte?: Maybe<ID_Input>;
  owner_gt?: Maybe<ID_Input>;
  owner_gte?: Maybe<ID_Input>;
  owner_contains?: Maybe<ID_Input>;
  owner_not_contains?: Maybe<ID_Input>;
  owner_starts_with?: Maybe<ID_Input>;
  owner_not_starts_with?: Maybe<ID_Input>;
  owner_ends_with?: Maybe<ID_Input>;
  owner_not_ends_with?: Maybe<ID_Input>;
  createdBy?: Maybe<ID_Input>;
  createdBy_not?: Maybe<ID_Input>;
  createdBy_in?: Maybe<ID_Input[] | ID_Input>;
  createdBy_not_in?: Maybe<ID_Input[] | ID_Input>;
  createdBy_lt?: Maybe<ID_Input>;
  createdBy_lte?: Maybe<ID_Input>;
  createdBy_gt?: Maybe<ID_Input>;
  createdBy_gte?: Maybe<ID_Input>;
  createdBy_contains?: Maybe<ID_Input>;
  createdBy_not_contains?: Maybe<ID_Input>;
  createdBy_starts_with?: Maybe<ID_Input>;
  createdBy_not_starts_with?: Maybe<ID_Input>;
  createdBy_ends_with?: Maybe<ID_Input>;
  createdBy_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedBy?: Maybe<ID_Input>;
  updatedBy_not?: Maybe<ID_Input>;
  updatedBy_in?: Maybe<ID_Input[] | ID_Input>;
  updatedBy_not_in?: Maybe<ID_Input[] | ID_Input>;
  updatedBy_lt?: Maybe<ID_Input>;
  updatedBy_lte?: Maybe<ID_Input>;
  updatedBy_gt?: Maybe<ID_Input>;
  updatedBy_gte?: Maybe<ID_Input>;
  updatedBy_contains?: Maybe<ID_Input>;
  updatedBy_not_contains?: Maybe<ID_Input>;
  updatedBy_starts_with?: Maybe<ID_Input>;
  updatedBy_not_starts_with?: Maybe<ID_Input>;
  updatedBy_ends_with?: Maybe<ID_Input>;
  updatedBy_not_ends_with?: Maybe<ID_Input>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  status?: Maybe<AgentStatus>;
  status_not?: Maybe<AgentStatus>;
  status_in?: Maybe<AgentStatus[] | AgentStatus>;
  status_not_in?: Maybe<AgentStatus[] | AgentStatus>;
  timezone?: Maybe<String>;
  timezone_not?: Maybe<String>;
  timezone_in?: Maybe<String[] | String>;
  timezone_not_in?: Maybe<String[] | String>;
  timezone_lt?: Maybe<String>;
  timezone_lte?: Maybe<String>;
  timezone_gt?: Maybe<String>;
  timezone_gte?: Maybe<String>;
  timezone_contains?: Maybe<String>;
  timezone_not_contains?: Maybe<String>;
  timezone_starts_with?: Maybe<String>;
  timezone_not_starts_with?: Maybe<String>;
  timezone_ends_with?: Maybe<String>;
  timezone_not_ends_with?: Maybe<String>;
  profileSlogan?: Maybe<String>;
  profileSlogan_not?: Maybe<String>;
  profileSlogan_in?: Maybe<String[] | String>;
  profileSlogan_not_in?: Maybe<String[] | String>;
  profileSlogan_lt?: Maybe<String>;
  profileSlogan_lte?: Maybe<String>;
  profileSlogan_gt?: Maybe<String>;
  profileSlogan_gte?: Maybe<String>;
  profileSlogan_contains?: Maybe<String>;
  profileSlogan_not_contains?: Maybe<String>;
  profileSlogan_starts_with?: Maybe<String>;
  profileSlogan_not_starts_with?: Maybe<String>;
  profileSlogan_ends_with?: Maybe<String>;
  profileSlogan_not_ends_with?: Maybe<String>;
  profileAvatar?: Maybe<String>;
  profileAvatar_not?: Maybe<String>;
  profileAvatar_in?: Maybe<String[] | String>;
  profileAvatar_not_in?: Maybe<String[] | String>;
  profileAvatar_lt?: Maybe<String>;
  profileAvatar_lte?: Maybe<String>;
  profileAvatar_gt?: Maybe<String>;
  profileAvatar_gte?: Maybe<String>;
  profileAvatar_contains?: Maybe<String>;
  profileAvatar_not_contains?: Maybe<String>;
  profileAvatar_starts_with?: Maybe<String>;
  profileAvatar_not_starts_with?: Maybe<String>;
  profileAvatar_ends_with?: Maybe<String>;
  profileAvatar_not_ends_with?: Maybe<String>;
  profileJobTitle?: Maybe<String>;
  profileJobTitle_not?: Maybe<String>;
  profileJobTitle_in?: Maybe<String[] | String>;
  profileJobTitle_not_in?: Maybe<String[] | String>;
  profileJobTitle_lt?: Maybe<String>;
  profileJobTitle_lte?: Maybe<String>;
  profileJobTitle_gt?: Maybe<String>;
  profileJobTitle_gte?: Maybe<String>;
  profileJobTitle_contains?: Maybe<String>;
  profileJobTitle_not_contains?: Maybe<String>;
  profileJobTitle_starts_with?: Maybe<String>;
  profileJobTitle_not_starts_with?: Maybe<String>;
  profileJobTitle_ends_with?: Maybe<String>;
  profileJobTitle_not_ends_with?: Maybe<String>;
  profileBanner?: Maybe<String>;
  profileBanner_not?: Maybe<String>;
  profileBanner_in?: Maybe<String[] | String>;
  profileBanner_not_in?: Maybe<String[] | String>;
  profileBanner_lt?: Maybe<String>;
  profileBanner_lte?: Maybe<String>;
  profileBanner_gt?: Maybe<String>;
  profileBanner_gte?: Maybe<String>;
  profileBanner_contains?: Maybe<String>;
  profileBanner_not_contains?: Maybe<String>;
  profileBanner_starts_with?: Maybe<String>;
  profileBanner_not_starts_with?: Maybe<String>;
  profileBanner_ends_with?: Maybe<String>;
  profileBanner_not_ends_with?: Maybe<String>;
  profileType?: Maybe<ProfileType>;
  profileType_not?: Maybe<ProfileType>;
  profileType_in?: Maybe<ProfileType[] | ProfileType>;
  profileType_not_in?: Maybe<ProfileType[] | ProfileType>;
  serviceDescription?: Maybe<String>;
  serviceDescription_not?: Maybe<String>;
  serviceDescription_in?: Maybe<String[] | String>;
  serviceDescription_not_in?: Maybe<String[] | String>;
  serviceDescription_lt?: Maybe<String>;
  serviceDescription_lte?: Maybe<String>;
  serviceDescription_gt?: Maybe<String>;
  serviceDescription_gte?: Maybe<String>;
  serviceDescription_contains?: Maybe<String>;
  serviceDescription_not_contains?: Maybe<String>;
  serviceDescription_starts_with?: Maybe<String>;
  serviceDescription_not_starts_with?: Maybe<String>;
  serviceDescription_ends_with?: Maybe<String>;
  serviceDescription_not_ends_with?: Maybe<String>;
  inboxDescription?: Maybe<String>;
  inboxDescription_not?: Maybe<String>;
  inboxDescription_in?: Maybe<String[] | String>;
  inboxDescription_not_in?: Maybe<String[] | String>;
  inboxDescription_lt?: Maybe<String>;
  inboxDescription_lte?: Maybe<String>;
  inboxDescription_gt?: Maybe<String>;
  inboxDescription_gte?: Maybe<String>;
  inboxDescription_contains?: Maybe<String>;
  inboxDescription_not_contains?: Maybe<String>;
  inboxDescription_starts_with?: Maybe<String>;
  inboxDescription_not_starts_with?: Maybe<String>;
  inboxDescription_ends_with?: Maybe<String>;
  inboxDescription_not_ends_with?: Maybe<String>;
  AND?: Maybe<AgentScalarWhereInput[] | AgentScalarWhereInput>;
  OR?: Maybe<AgentScalarWhereInput[] | AgentScalarWhereInput>;
  NOT?: Maybe<AgentScalarWhereInput[] | AgentScalarWhereInput>;
}

export interface TagUpdateManyMutationInput {
  type?: Maybe<String>;
  owner?: Maybe<ID_Input>;
  createdBy?: Maybe<ID_Input>;
  value?: Maybe<String>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface UserPreviousValues {
  id: ID_Output;
  type: UserType;
  createdAt: DateTimeOutput;
  updatedAt?: DateTimeOutput;
  email: String;
  timezone: String;
  challenge?: String;
  passwordSalt?: String;
  passwordHash?: String;
  firstName?: String;
  lastName?: String;
  phone?: String;
  mobilePhone?: String;
  organizationName?: String;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  type: () => Promise<UserType>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  email: () => Promise<String>;
  timezone: () => Promise<String>;
  challenge: () => Promise<String>;
  passwordSalt: () => Promise<String>;
  passwordHash: () => Promise<String>;
  firstName: () => Promise<String>;
  lastName: () => Promise<String>;
  phone: () => Promise<String>;
  mobilePhone: () => Promise<String>;
  organizationName: () => Promise<String>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  type: () => Promise<AsyncIterator<UserType>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  email: () => Promise<AsyncIterator<String>>;
  timezone: () => Promise<AsyncIterator<String>>;
  challenge: () => Promise<AsyncIterator<String>>;
  passwordSalt: () => Promise<AsyncIterator<String>>;
  passwordHash: () => Promise<AsyncIterator<String>>;
  firstName: () => Promise<AsyncIterator<String>>;
  lastName: () => Promise<AsyncIterator<String>>;
  phone: () => Promise<AsyncIterator<String>>;
  mobilePhone: () => Promise<AsyncIterator<String>>;
  organizationName: () => Promise<AsyncIterator<String>>;
}

export interface Group {
  id: ID_Output;
  type: GroupType;
  owner: ID_Output;
  createdBy: ID_Output;
  createdAt: DateTimeOutput;
  updatedBy?: ID_Output;
  updatedAt?: DateTimeOutput;
  isPublic: Boolean;
  name: String;
  title?: String;
  description?: String;
  logo: String;
  banner?: String;
  inbox?: ID_Output;
}

export interface GroupPromise extends Promise<Group>, Fragmentable {
  id: () => Promise<ID_Output>;
  type: () => Promise<GroupType>;
  owner: () => Promise<ID_Output>;
  createdBy: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedBy: () => Promise<ID_Output>;
  updatedAt: () => Promise<DateTimeOutput>;
  isPublic: () => Promise<Boolean>;
  memberships: <T = FragmentableArray<Membership>>(args?: {
    where?: MembershipWhereInput;
    orderBy?: MembershipOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  name: () => Promise<String>;
  title: () => Promise<String>;
  description: () => Promise<String>;
  logo: () => Promise<String>;
  banner: () => Promise<String>;
  entries: <T = FragmentableArray<Entry>>(args?: {
    where?: EntryWhereInput;
    orderBy?: EntryOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  inbox: () => Promise<ID_Output>;
  tags: <T = FragmentableArray<Tag>>(args?: {
    where?: TagWhereInput;
    orderBy?: TagOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface GroupSubscription
  extends Promise<AsyncIterator<Group>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  type: () => Promise<AsyncIterator<GroupType>>;
  owner: () => Promise<AsyncIterator<ID_Output>>;
  createdBy: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedBy: () => Promise<AsyncIterator<ID_Output>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  isPublic: () => Promise<AsyncIterator<Boolean>>;
  memberships: <T = Promise<AsyncIterator<MembershipSubscription>>>(args?: {
    where?: MembershipWhereInput;
    orderBy?: MembershipOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  name: () => Promise<AsyncIterator<String>>;
  title: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  logo: () => Promise<AsyncIterator<String>>;
  banner: () => Promise<AsyncIterator<String>>;
  entries: <T = Promise<AsyncIterator<EntrySubscription>>>(args?: {
    where?: EntryWhereInput;
    orderBy?: EntryOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  inbox: () => Promise<AsyncIterator<ID_Output>>;
  tags: <T = Promise<AsyncIterator<TagSubscription>>>(args?: {
    where?: TagWhereInput;
    orderBy?: TagOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface GroupNullablePromise
  extends Promise<Group | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  type: () => Promise<GroupType>;
  owner: () => Promise<ID_Output>;
  createdBy: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedBy: () => Promise<ID_Output>;
  updatedAt: () => Promise<DateTimeOutput>;
  isPublic: () => Promise<Boolean>;
  memberships: <T = FragmentableArray<Membership>>(args?: {
    where?: MembershipWhereInput;
    orderBy?: MembershipOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  name: () => Promise<String>;
  title: () => Promise<String>;
  description: () => Promise<String>;
  logo: () => Promise<String>;
  banner: () => Promise<String>;
  entries: <T = FragmentableArray<Entry>>(args?: {
    where?: EntryWhereInput;
    orderBy?: EntryOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  inbox: () => Promise<ID_Output>;
  tags: <T = FragmentableArray<Tag>>(args?: {
    where?: TagWhereInput;
    orderBy?: TagOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface AgentEdge {
  node: Agent;
  cursor: String;
}

export interface AgentEdgePromise extends Promise<AgentEdge>, Fragmentable {
  node: <T = AgentPromise>() => T;
  cursor: () => Promise<String>;
}

export interface AgentEdgeSubscription
  extends Promise<AsyncIterator<AgentEdge>>,
    Fragmentable {
  node: <T = AgentSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateEntry {
  count: Int;
}

export interface AggregateEntryPromise
  extends Promise<AggregateEntry>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateEntrySubscription
  extends Promise<AsyncIterator<AggregateEntry>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface AggregateAgent {
  count: Int;
}

export interface AggregateAgentPromise
  extends Promise<AggregateAgent>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateAgentSubscription
  extends Promise<AsyncIterator<AggregateAgent>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface EntryEdge {
  node: Entry;
  cursor: String;
}

export interface EntryEdgePromise extends Promise<EntryEdge>, Fragmentable {
  node: <T = EntryPromise>() => T;
  cursor: () => Promise<String>;
}

export interface EntryEdgeSubscription
  extends Promise<AsyncIterator<EntryEdge>>,
    Fragmentable {
  node: <T = EntrySubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface EntryConnection {
  pageInfo: PageInfo;
  edges: EntryEdge[];
}

export interface EntryConnectionPromise
  extends Promise<EntryConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<EntryEdge>>() => T;
  aggregate: <T = AggregateEntryPromise>() => T;
}

export interface EntryConnectionSubscription
  extends Promise<AsyncIterator<EntryConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<EntryEdgeSubscription>>>() => T;
  aggregate: <T = AggregateEntrySubscription>() => T;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface AggregateTag {
  count: Int;
}

export interface AggregateTagPromise
  extends Promise<AggregateTag>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateTagSubscription
  extends Promise<AsyncIterator<AggregateTag>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Agent {
  id: ID_Output;
  type: AgentType;
  owner: ID_Output;
  createdBy: ID_Output;
  createdAt: DateTimeOutput;
  updatedBy?: ID_Output;
  updatedAt?: DateTimeOutput;
  name: String;
  status: AgentStatus;
  timezone?: String;
  profileSlogan?: String;
  profileAvatar?: String;
  profileJobTitle?: String;
  profileBanner?: String;
  profileType?: ProfileType;
  serviceDescription?: String;
  inboxDescription?: String;
}

export interface AgentPromise extends Promise<Agent>, Fragmentable {
  id: () => Promise<ID_Output>;
  type: () => Promise<AgentType>;
  owner: () => Promise<ID_Output>;
  createdBy: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedBy: () => Promise<ID_Output>;
  updatedAt: () => Promise<DateTimeOutput>;
  name: () => Promise<String>;
  status: () => Promise<AgentStatus>;
  timezone: () => Promise<String>;
  location: <T = LocationPromise>() => T;
  profileSlogan: () => Promise<String>;
  profileAvatar: () => Promise<String>;
  profileJobTitle: () => Promise<String>;
  profileBanner: () => Promise<String>;
  profileType: () => Promise<ProfileType>;
  serviceDescription: () => Promise<String>;
  inboxDescription: () => Promise<String>;
}

export interface AgentSubscription
  extends Promise<AsyncIterator<Agent>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  type: () => Promise<AsyncIterator<AgentType>>;
  owner: () => Promise<AsyncIterator<ID_Output>>;
  createdBy: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedBy: () => Promise<AsyncIterator<ID_Output>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  name: () => Promise<AsyncIterator<String>>;
  status: () => Promise<AsyncIterator<AgentStatus>>;
  timezone: () => Promise<AsyncIterator<String>>;
  location: <T = LocationSubscription>() => T;
  profileSlogan: () => Promise<AsyncIterator<String>>;
  profileAvatar: () => Promise<AsyncIterator<String>>;
  profileJobTitle: () => Promise<AsyncIterator<String>>;
  profileBanner: () => Promise<AsyncIterator<String>>;
  profileType: () => Promise<AsyncIterator<ProfileType>>;
  serviceDescription: () => Promise<AsyncIterator<String>>;
  inboxDescription: () => Promise<AsyncIterator<String>>;
}

export interface AgentNullablePromise
  extends Promise<Agent | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  type: () => Promise<AgentType>;
  owner: () => Promise<ID_Output>;
  createdBy: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedBy: () => Promise<ID_Output>;
  updatedAt: () => Promise<DateTimeOutput>;
  name: () => Promise<String>;
  status: () => Promise<AgentStatus>;
  timezone: () => Promise<String>;
  location: <T = LocationPromise>() => T;
  profileSlogan: () => Promise<String>;
  profileAvatar: () => Promise<String>;
  profileJobTitle: () => Promise<String>;
  profileBanner: () => Promise<String>;
  profileType: () => Promise<ProfileType>;
  serviceDescription: () => Promise<String>;
  inboxDescription: () => Promise<String>;
}

export interface TagConnection {
  pageInfo: PageInfo;
  edges: TagEdge[];
}

export interface TagConnectionPromise
  extends Promise<TagConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<TagEdge>>() => T;
  aggregate: <T = AggregateTagPromise>() => T;
}

export interface TagConnectionSubscription
  extends Promise<AsyncIterator<TagConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<TagEdgeSubscription>>>() => T;
  aggregate: <T = AggregateTagSubscription>() => T;
}

export interface AgentSubscriptionPayload {
  mutation: MutationType;
  node: Agent;
  updatedFields: String[];
  previousValues: AgentPreviousValues;
}

export interface AgentSubscriptionPayloadPromise
  extends Promise<AgentSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = AgentPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = AgentPreviousValuesPromise>() => T;
}

export interface AgentSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<AgentSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = AgentSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = AgentPreviousValuesSubscription>() => T;
}

export interface SessionEdge {
  node: Session;
  cursor: String;
}

export interface SessionEdgePromise extends Promise<SessionEdge>, Fragmentable {
  node: <T = SessionPromise>() => T;
  cursor: () => Promise<String>;
}

export interface SessionEdgeSubscription
  extends Promise<AsyncIterator<SessionEdge>>,
    Fragmentable {
  node: <T = SessionSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface TagEdge {
  node: Tag;
  cursor: String;
}

export interface TagEdgePromise extends Promise<TagEdge>, Fragmentable {
  node: <T = TagPromise>() => T;
  cursor: () => Promise<String>;
}

export interface TagEdgeSubscription
  extends Promise<AsyncIterator<TagEdge>>,
    Fragmentable {
  node: <T = TagSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface SessionSubscriptionPayload {
  mutation: MutationType;
  node: Session;
  updatedFields: String[];
  previousValues: SessionPreviousValues;
}

export interface SessionSubscriptionPayloadPromise
  extends Promise<SessionSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = SessionPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = SessionPreviousValuesPromise>() => T;
}

export interface SessionSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<SessionSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = SessionSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = SessionPreviousValuesSubscription>() => T;
}

export interface AggregateSession {
  count: Int;
}

export interface AggregateSessionPromise
  extends Promise<AggregateSession>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateSessionSubscription
  extends Promise<AsyncIterator<AggregateSession>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface AgentPreviousValues {
  id: ID_Output;
  type: AgentType;
  owner: ID_Output;
  createdBy: ID_Output;
  createdAt: DateTimeOutput;
  updatedBy?: ID_Output;
  updatedAt?: DateTimeOutput;
  name: String;
  status: AgentStatus;
  timezone?: String;
  profileSlogan?: String;
  profileAvatar?: String;
  profileJobTitle?: String;
  profileBanner?: String;
  profileType?: ProfileType;
  serviceDescription?: String;
  inboxDescription?: String;
}

export interface AgentPreviousValuesPromise
  extends Promise<AgentPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  type: () => Promise<AgentType>;
  owner: () => Promise<ID_Output>;
  createdBy: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedBy: () => Promise<ID_Output>;
  updatedAt: () => Promise<DateTimeOutput>;
  name: () => Promise<String>;
  status: () => Promise<AgentStatus>;
  timezone: () => Promise<String>;
  profileSlogan: () => Promise<String>;
  profileAvatar: () => Promise<String>;
  profileJobTitle: () => Promise<String>;
  profileBanner: () => Promise<String>;
  profileType: () => Promise<ProfileType>;
  serviceDescription: () => Promise<String>;
  inboxDescription: () => Promise<String>;
}

export interface AgentPreviousValuesSubscription
  extends Promise<AsyncIterator<AgentPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  type: () => Promise<AsyncIterator<AgentType>>;
  owner: () => Promise<AsyncIterator<ID_Output>>;
  createdBy: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedBy: () => Promise<AsyncIterator<ID_Output>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  name: () => Promise<AsyncIterator<String>>;
  status: () => Promise<AsyncIterator<AgentStatus>>;
  timezone: () => Promise<AsyncIterator<String>>;
  profileSlogan: () => Promise<AsyncIterator<String>>;
  profileAvatar: () => Promise<AsyncIterator<String>>;
  profileJobTitle: () => Promise<AsyncIterator<String>>;
  profileBanner: () => Promise<AsyncIterator<String>>;
  profileType: () => Promise<AsyncIterator<ProfileType>>;
  serviceDescription: () => Promise<AsyncIterator<String>>;
  inboxDescription: () => Promise<AsyncIterator<String>>;
}

export interface SessionConnection {
  pageInfo: PageInfo;
  edges: SessionEdge[];
}

export interface SessionConnectionPromise
  extends Promise<SessionConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<SessionEdge>>() => T;
  aggregate: <T = AggregateSessionPromise>() => T;
}

export interface SessionConnectionSubscription
  extends Promise<AsyncIterator<SessionConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<SessionEdgeSubscription>>>() => T;
  aggregate: <T = AggregateSessionSubscription>() => T;
}

export interface Session {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt?: DateTimeOutput;
  sessionToken: String;
  csrfToken?: String;
  bearerToken?: String;
  clientTime?: String;
  validTo: DateTimeOutput;
  timedOut?: DateTimeOutput;
  loggedOut?: DateTimeOutput;
  ipAddress?: String;
}

export interface SessionPromise extends Promise<Session>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  sessionToken: () => Promise<String>;
  csrfToken: () => Promise<String>;
  bearerToken: () => Promise<String>;
  clientTime: () => Promise<String>;
  validTo: () => Promise<DateTimeOutput>;
  timedOut: () => Promise<DateTimeOutput>;
  loggedOut: () => Promise<DateTimeOutput>;
  user: <T = UserPromise>() => T;
  agent: <T = AgentPromise>() => T;
  location: <T = LocationPromise>() => T;
  ipAddress: () => Promise<String>;
}

export interface SessionSubscription
  extends Promise<AsyncIterator<Session>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  sessionToken: () => Promise<AsyncIterator<String>>;
  csrfToken: () => Promise<AsyncIterator<String>>;
  bearerToken: () => Promise<AsyncIterator<String>>;
  clientTime: () => Promise<AsyncIterator<String>>;
  validTo: () => Promise<AsyncIterator<DateTimeOutput>>;
  timedOut: () => Promise<AsyncIterator<DateTimeOutput>>;
  loggedOut: () => Promise<AsyncIterator<DateTimeOutput>>;
  user: <T = UserSubscription>() => T;
  agent: <T = AgentSubscription>() => T;
  location: <T = LocationSubscription>() => T;
  ipAddress: () => Promise<AsyncIterator<String>>;
}

export interface SessionNullablePromise
  extends Promise<Session | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  sessionToken: () => Promise<String>;
  csrfToken: () => Promise<String>;
  bearerToken: () => Promise<String>;
  clientTime: () => Promise<String>;
  validTo: () => Promise<DateTimeOutput>;
  timedOut: () => Promise<DateTimeOutput>;
  loggedOut: () => Promise<DateTimeOutput>;
  user: <T = UserPromise>() => T;
  agent: <T = AgentPromise>() => T;
  location: <T = LocationPromise>() => T;
  ipAddress: () => Promise<String>;
}

export interface Location {
  id: ID_Output;
  type: LocationType;
  owner: ID_Output;
  createdBy: ID_Output;
  createdAt: DateTimeOutput;
  updatedBy?: ID_Output;
  updatedAt?: DateTimeOutput;
  name?: String;
  osmNodeId?: String;
  addressLine1?: String;
  addressLine2?: String;
  addressCity?: String;
  addressZipCode?: String;
  addressCountry?: String;
  geoPointLatitude?: Float;
  geoPointLongitude?: Float;
  geoPointRadiusMeter?: Float;
}

export interface LocationPromise extends Promise<Location>, Fragmentable {
  id: () => Promise<ID_Output>;
  type: () => Promise<LocationType>;
  owner: () => Promise<ID_Output>;
  createdBy: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedBy: () => Promise<ID_Output>;
  updatedAt: () => Promise<DateTimeOutput>;
  name: () => Promise<String>;
  osmNodeId: () => Promise<String>;
  addressLine1: () => Promise<String>;
  addressLine2: () => Promise<String>;
  addressCity: () => Promise<String>;
  addressZipCode: () => Promise<String>;
  addressCountry: () => Promise<String>;
  geoPointLatitude: () => Promise<Float>;
  geoPointLongitude: () => Promise<Float>;
  geoPointRadiusMeter: () => Promise<Float>;
  tags: <T = FragmentableArray<Tag>>(args?: {
    where?: TagWhereInput;
    orderBy?: TagOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface LocationSubscription
  extends Promise<AsyncIterator<Location>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  type: () => Promise<AsyncIterator<LocationType>>;
  owner: () => Promise<AsyncIterator<ID_Output>>;
  createdBy: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedBy: () => Promise<AsyncIterator<ID_Output>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  name: () => Promise<AsyncIterator<String>>;
  osmNodeId: () => Promise<AsyncIterator<String>>;
  addressLine1: () => Promise<AsyncIterator<String>>;
  addressLine2: () => Promise<AsyncIterator<String>>;
  addressCity: () => Promise<AsyncIterator<String>>;
  addressZipCode: () => Promise<AsyncIterator<String>>;
  addressCountry: () => Promise<AsyncIterator<String>>;
  geoPointLatitude: () => Promise<AsyncIterator<Float>>;
  geoPointLongitude: () => Promise<AsyncIterator<Float>>;
  geoPointRadiusMeter: () => Promise<AsyncIterator<Float>>;
  tags: <T = Promise<AsyncIterator<TagSubscription>>>(args?: {
    where?: TagWhereInput;
    orderBy?: TagOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface LocationNullablePromise
  extends Promise<Location | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  type: () => Promise<LocationType>;
  owner: () => Promise<ID_Output>;
  createdBy: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedBy: () => Promise<ID_Output>;
  updatedAt: () => Promise<DateTimeOutput>;
  name: () => Promise<String>;
  osmNodeId: () => Promise<String>;
  addressLine1: () => Promise<String>;
  addressLine2: () => Promise<String>;
  addressCity: () => Promise<String>;
  addressZipCode: () => Promise<String>;
  addressCountry: () => Promise<String>;
  geoPointLatitude: () => Promise<Float>;
  geoPointLongitude: () => Promise<Float>;
  geoPointRadiusMeter: () => Promise<Float>;
  tags: <T = FragmentableArray<Tag>>(args?: {
    where?: TagWhereInput;
    orderBy?: TagOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface MembershipEdge {
  node: Membership;
  cursor: String;
}

export interface MembershipEdgePromise
  extends Promise<MembershipEdge>,
    Fragmentable {
  node: <T = MembershipPromise>() => T;
  cursor: () => Promise<String>;
}

export interface MembershipEdgeSubscription
  extends Promise<AsyncIterator<MembershipEdge>>,
    Fragmentable {
  node: <T = MembershipSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AgentConnection {
  pageInfo: PageInfo;
  edges: AgentEdge[];
}

export interface AgentConnectionPromise
  extends Promise<AgentConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<AgentEdge>>() => T;
  aggregate: <T = AggregateAgentPromise>() => T;
}

export interface AgentConnectionSubscription
  extends Promise<AsyncIterator<AgentConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<AgentEdgeSubscription>>>() => T;
  aggregate: <T = AggregateAgentSubscription>() => T;
}

export interface AggregateLocation {
  count: Int;
}

export interface AggregateLocationPromise
  extends Promise<AggregateLocation>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateLocationSubscription
  extends Promise<AsyncIterator<AggregateLocation>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ContentEncodingSubscriptionPayload {
  mutation: MutationType;
  node: ContentEncoding;
  updatedFields: String[];
  previousValues: ContentEncodingPreviousValues;
}

export interface ContentEncodingSubscriptionPayloadPromise
  extends Promise<ContentEncodingSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ContentEncodingPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ContentEncodingPreviousValuesPromise>() => T;
}

export interface ContentEncodingSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ContentEncodingSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ContentEncodingSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ContentEncodingPreviousValuesSubscription>() => T;
}

export interface LocationConnection {
  pageInfo: PageInfo;
  edges: LocationEdge[];
}

export interface LocationConnectionPromise
  extends Promise<LocationConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<LocationEdge>>() => T;
  aggregate: <T = AggregateLocationPromise>() => T;
}

export interface LocationConnectionSubscription
  extends Promise<AsyncIterator<LocationConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<LocationEdgeSubscription>>>() => T;
  aggregate: <T = AggregateLocationSubscription>() => T;
}

export interface ContentEncodingPreviousValues {
  id: ID_Output;
  type: EncodingType;
  maintainer: ID_Output;
  createdBy: ID_Output;
  createdAt: DateTimeOutput;
  updatedBy?: ID_Output;
  updatedAt?: DateTimeOutput;
  name: String;
  charset: String;
}

export interface ContentEncodingPreviousValuesPromise
  extends Promise<ContentEncodingPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  type: () => Promise<EncodingType>;
  maintainer: () => Promise<ID_Output>;
  createdBy: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedBy: () => Promise<ID_Output>;
  updatedAt: () => Promise<DateTimeOutput>;
  name: () => Promise<String>;
  charset: () => Promise<String>;
}

export interface ContentEncodingPreviousValuesSubscription
  extends Promise<AsyncIterator<ContentEncodingPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  type: () => Promise<AsyncIterator<EncodingType>>;
  maintainer: () => Promise<AsyncIterator<ID_Output>>;
  createdBy: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedBy: () => Promise<AsyncIterator<ID_Output>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  name: () => Promise<AsyncIterator<String>>;
  charset: () => Promise<AsyncIterator<String>>;
}

export interface AggregateGroup {
  count: Int;
}

export interface AggregateGroupPromise
  extends Promise<AggregateGroup>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateGroupSubscription
  extends Promise<AsyncIterator<AggregateGroup>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Entry {
  id: ID_Output;
  type: EntryType;
  owner: ID_Output;
  createdBy: ID_Output;
  createdAt: DateTimeOutput;
  updatedBy?: ID_Output;
  updatedAt?: DateTimeOutput;
  name?: String;
  content?: Json;
  contentEncoding?: ID_Output;
}

export interface EntryPromise extends Promise<Entry>, Fragmentable {
  id: () => Promise<ID_Output>;
  type: () => Promise<EntryType>;
  owner: () => Promise<ID_Output>;
  createdBy: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedBy: () => Promise<ID_Output>;
  updatedAt: () => Promise<DateTimeOutput>;
  name: () => Promise<String>;
  content: () => Promise<Json>;
  contentEncoding: () => Promise<ID_Output>;
  tags: <T = FragmentableArray<Tag>>(args?: {
    where?: TagWhereInput;
    orderBy?: TagOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface EntrySubscription
  extends Promise<AsyncIterator<Entry>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  type: () => Promise<AsyncIterator<EntryType>>;
  owner: () => Promise<AsyncIterator<ID_Output>>;
  createdBy: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedBy: () => Promise<AsyncIterator<ID_Output>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  name: () => Promise<AsyncIterator<String>>;
  content: () => Promise<AsyncIterator<Json>>;
  contentEncoding: () => Promise<AsyncIterator<ID_Output>>;
  tags: <T = Promise<AsyncIterator<TagSubscription>>>(args?: {
    where?: TagWhereInput;
    orderBy?: TagOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface EntryNullablePromise
  extends Promise<Entry | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  type: () => Promise<EntryType>;
  owner: () => Promise<ID_Output>;
  createdBy: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedBy: () => Promise<ID_Output>;
  updatedAt: () => Promise<DateTimeOutput>;
  name: () => Promise<String>;
  content: () => Promise<Json>;
  contentEncoding: () => Promise<ID_Output>;
  tags: <T = FragmentableArray<Tag>>(args?: {
    where?: TagWhereInput;
    orderBy?: TagOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface GroupConnection {
  pageInfo: PageInfo;
  edges: GroupEdge[];
}

export interface GroupConnectionPromise
  extends Promise<GroupConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<GroupEdge>>() => T;
  aggregate: <T = AggregateGroupPromise>() => T;
}

export interface GroupConnectionSubscription
  extends Promise<AsyncIterator<GroupConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<GroupEdgeSubscription>>>() => T;
  aggregate: <T = AggregateGroupSubscription>() => T;
}

export interface EntrySubscriptionPayload {
  mutation: MutationType;
  node: Entry;
  updatedFields: String[];
  previousValues: EntryPreviousValues;
}

export interface EntrySubscriptionPayloadPromise
  extends Promise<EntrySubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = EntryPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = EntryPreviousValuesPromise>() => T;
}

export interface EntrySubscriptionPayloadSubscription
  extends Promise<AsyncIterator<EntrySubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = EntrySubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = EntryPreviousValuesSubscription>() => T;
}

export interface ContentEncoding {
  id: ID_Output;
  type: EncodingType;
  maintainer: ID_Output;
  createdBy: ID_Output;
  createdAt: DateTimeOutput;
  updatedBy?: ID_Output;
  updatedAt?: DateTimeOutput;
  name: String;
  charset: String;
}

export interface ContentEncodingPromise
  extends Promise<ContentEncoding>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  type: () => Promise<EncodingType>;
  maintainer: () => Promise<ID_Output>;
  createdBy: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedBy: () => Promise<ID_Output>;
  updatedAt: () => Promise<DateTimeOutput>;
  name: () => Promise<String>;
  charset: () => Promise<String>;
}

export interface ContentEncodingSubscription
  extends Promise<AsyncIterator<ContentEncoding>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  type: () => Promise<AsyncIterator<EncodingType>>;
  maintainer: () => Promise<AsyncIterator<ID_Output>>;
  createdBy: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedBy: () => Promise<AsyncIterator<ID_Output>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  name: () => Promise<AsyncIterator<String>>;
  charset: () => Promise<AsyncIterator<String>>;
}

export interface ContentEncodingNullablePromise
  extends Promise<ContentEncoding | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  type: () => Promise<EncodingType>;
  maintainer: () => Promise<ID_Output>;
  createdBy: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedBy: () => Promise<ID_Output>;
  updatedAt: () => Promise<DateTimeOutput>;
  name: () => Promise<String>;
  charset: () => Promise<String>;
}

export interface EntryPreviousValues {
  id: ID_Output;
  type: EntryType;
  owner: ID_Output;
  createdBy: ID_Output;
  createdAt: DateTimeOutput;
  updatedBy?: ID_Output;
  updatedAt?: DateTimeOutput;
  name?: String;
  content?: Json;
  contentEncoding?: ID_Output;
}

export interface EntryPreviousValuesPromise
  extends Promise<EntryPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  type: () => Promise<EntryType>;
  owner: () => Promise<ID_Output>;
  createdBy: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedBy: () => Promise<ID_Output>;
  updatedAt: () => Promise<DateTimeOutput>;
  name: () => Promise<String>;
  content: () => Promise<Json>;
  contentEncoding: () => Promise<ID_Output>;
}

export interface EntryPreviousValuesSubscription
  extends Promise<AsyncIterator<EntryPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  type: () => Promise<AsyncIterator<EntryType>>;
  owner: () => Promise<AsyncIterator<ID_Output>>;
  createdBy: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedBy: () => Promise<AsyncIterator<ID_Output>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  name: () => Promise<AsyncIterator<String>>;
  content: () => Promise<AsyncIterator<Json>>;
  contentEncoding: () => Promise<AsyncIterator<ID_Output>>;
}

export interface TagPreviousValues {
  id: ID_Output;
  type: String;
  owner: ID_Output;
  createdBy: ID_Output;
  createdAt: DateTimeOutput;
  value: String;
}

export interface TagPreviousValuesPromise
  extends Promise<TagPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  type: () => Promise<String>;
  owner: () => Promise<ID_Output>;
  createdBy: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  value: () => Promise<String>;
}

export interface TagPreviousValuesSubscription
  extends Promise<AsyncIterator<TagPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  type: () => Promise<AsyncIterator<String>>;
  owner: () => Promise<AsyncIterator<ID_Output>>;
  createdBy: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  value: () => Promise<AsyncIterator<String>>;
}

export interface AggregateContentEncoding {
  count: Int;
}

export interface AggregateContentEncodingPromise
  extends Promise<AggregateContentEncoding>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateContentEncodingSubscription
  extends Promise<AsyncIterator<AggregateContentEncoding>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface GroupSubscriptionPayload {
  mutation: MutationType;
  node: Group;
  updatedFields: String[];
  previousValues: GroupPreviousValues;
}

export interface GroupSubscriptionPayloadPromise
  extends Promise<GroupSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = GroupPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = GroupPreviousValuesPromise>() => T;
}

export interface GroupSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<GroupSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = GroupSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = GroupPreviousValuesSubscription>() => T;
}

export interface User {
  id: ID_Output;
  type: UserType;
  createdAt: DateTimeOutput;
  updatedAt?: DateTimeOutput;
  email: String;
  timezone: String;
  challenge?: String;
  passwordSalt?: String;
  passwordHash?: String;
  firstName?: String;
  lastName?: String;
  phone?: String;
  mobilePhone?: String;
  organizationName?: String;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  type: () => Promise<UserType>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  email: () => Promise<String>;
  timezone: () => Promise<String>;
  challenge: () => Promise<String>;
  passwordSalt: () => Promise<String>;
  passwordHash: () => Promise<String>;
  agents: <T = FragmentableArray<Agent>>(args?: {
    where?: AgentWhereInput;
    orderBy?: AgentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  sessions: <T = FragmentableArray<Session>>(args?: {
    where?: SessionWhereInput;
    orderBy?: SessionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  firstName: () => Promise<String>;
  lastName: () => Promise<String>;
  phone: () => Promise<String>;
  mobilePhone: () => Promise<String>;
  organizationName: () => Promise<String>;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  type: () => Promise<AsyncIterator<UserType>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  email: () => Promise<AsyncIterator<String>>;
  timezone: () => Promise<AsyncIterator<String>>;
  challenge: () => Promise<AsyncIterator<String>>;
  passwordSalt: () => Promise<AsyncIterator<String>>;
  passwordHash: () => Promise<AsyncIterator<String>>;
  agents: <T = Promise<AsyncIterator<AgentSubscription>>>(args?: {
    where?: AgentWhereInput;
    orderBy?: AgentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  sessions: <T = Promise<AsyncIterator<SessionSubscription>>>(args?: {
    where?: SessionWhereInput;
    orderBy?: SessionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  firstName: () => Promise<AsyncIterator<String>>;
  lastName: () => Promise<AsyncIterator<String>>;
  phone: () => Promise<AsyncIterator<String>>;
  mobilePhone: () => Promise<AsyncIterator<String>>;
  organizationName: () => Promise<AsyncIterator<String>>;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  type: () => Promise<UserType>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  email: () => Promise<String>;
  timezone: () => Promise<String>;
  challenge: () => Promise<String>;
  passwordSalt: () => Promise<String>;
  passwordHash: () => Promise<String>;
  agents: <T = FragmentableArray<Agent>>(args?: {
    where?: AgentWhereInput;
    orderBy?: AgentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  sessions: <T = FragmentableArray<Session>>(args?: {
    where?: SessionWhereInput;
    orderBy?: SessionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  firstName: () => Promise<String>;
  lastName: () => Promise<String>;
  phone: () => Promise<String>;
  mobilePhone: () => Promise<String>;
  organizationName: () => Promise<String>;
}

export interface GroupPreviousValues {
  id: ID_Output;
  type: GroupType;
  owner: ID_Output;
  createdBy: ID_Output;
  createdAt: DateTimeOutput;
  updatedBy?: ID_Output;
  updatedAt?: DateTimeOutput;
  isPublic: Boolean;
  name: String;
  title?: String;
  description?: String;
  logo: String;
  banner?: String;
  inbox?: ID_Output;
}

export interface GroupPreviousValuesPromise
  extends Promise<GroupPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  type: () => Promise<GroupType>;
  owner: () => Promise<ID_Output>;
  createdBy: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedBy: () => Promise<ID_Output>;
  updatedAt: () => Promise<DateTimeOutput>;
  isPublic: () => Promise<Boolean>;
  name: () => Promise<String>;
  title: () => Promise<String>;
  description: () => Promise<String>;
  logo: () => Promise<String>;
  banner: () => Promise<String>;
  inbox: () => Promise<ID_Output>;
}

export interface GroupPreviousValuesSubscription
  extends Promise<AsyncIterator<GroupPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  type: () => Promise<AsyncIterator<GroupType>>;
  owner: () => Promise<AsyncIterator<ID_Output>>;
  createdBy: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedBy: () => Promise<AsyncIterator<ID_Output>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  isPublic: () => Promise<AsyncIterator<Boolean>>;
  name: () => Promise<AsyncIterator<String>>;
  title: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  logo: () => Promise<AsyncIterator<String>>;
  banner: () => Promise<AsyncIterator<String>>;
  inbox: () => Promise<AsyncIterator<ID_Output>>;
}

export interface MembershipConnection {
  pageInfo: PageInfo;
  edges: MembershipEdge[];
}

export interface MembershipConnectionPromise
  extends Promise<MembershipConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<MembershipEdge>>() => T;
  aggregate: <T = AggregateMembershipPromise>() => T;
}

export interface MembershipConnectionSubscription
  extends Promise<AsyncIterator<MembershipConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<MembershipEdgeSubscription>>>() => T;
  aggregate: <T = AggregateMembershipSubscription>() => T;
}

export interface ContentEncodingEdge {
  node: ContentEncoding;
  cursor: String;
}

export interface ContentEncodingEdgePromise
  extends Promise<ContentEncodingEdge>,
    Fragmentable {
  node: <T = ContentEncodingPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ContentEncodingEdgeSubscription
  extends Promise<AsyncIterator<ContentEncodingEdge>>,
    Fragmentable {
  node: <T = ContentEncodingSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface LocationSubscriptionPayload {
  mutation: MutationType;
  node: Location;
  updatedFields: String[];
  previousValues: LocationPreviousValues;
}

export interface LocationSubscriptionPayloadPromise
  extends Promise<LocationSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = LocationPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = LocationPreviousValuesPromise>() => T;
}

export interface LocationSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<LocationSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = LocationSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = LocationPreviousValuesSubscription>() => T;
}

export interface Membership {
  id: ID_Output;
  type: MembershipType;
  createdBy: ID_Output;
  createdAt: DateTimeOutput;
  updatedBy?: ID_Output;
  updatedAt?: DateTimeOutput;
  showHistory: Boolean;
}

export interface MembershipPromise extends Promise<Membership>, Fragmentable {
  id: () => Promise<ID_Output>;
  type: () => Promise<MembershipType>;
  createdBy: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedBy: () => Promise<ID_Output>;
  updatedAt: () => Promise<DateTimeOutput>;
  member: <T = AgentPromise>() => T;
  showHistory: () => Promise<Boolean>;
}

export interface MembershipSubscription
  extends Promise<AsyncIterator<Membership>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  type: () => Promise<AsyncIterator<MembershipType>>;
  createdBy: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedBy: () => Promise<AsyncIterator<ID_Output>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  member: <T = AgentSubscription>() => T;
  showHistory: () => Promise<AsyncIterator<Boolean>>;
}

export interface MembershipNullablePromise
  extends Promise<Membership | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  type: () => Promise<MembershipType>;
  createdBy: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedBy: () => Promise<ID_Output>;
  updatedAt: () => Promise<DateTimeOutput>;
  member: <T = AgentPromise>() => T;
  showHistory: () => Promise<Boolean>;
}

export interface LocationPreviousValues {
  id: ID_Output;
  type: LocationType;
  owner: ID_Output;
  createdBy: ID_Output;
  createdAt: DateTimeOutput;
  updatedBy?: ID_Output;
  updatedAt?: DateTimeOutput;
  name?: String;
  osmNodeId?: String;
  addressLine1?: String;
  addressLine2?: String;
  addressCity?: String;
  addressZipCode?: String;
  addressCountry?: String;
  geoPointLatitude?: Float;
  geoPointLongitude?: Float;
  geoPointRadiusMeter?: Float;
}

export interface LocationPreviousValuesPromise
  extends Promise<LocationPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  type: () => Promise<LocationType>;
  owner: () => Promise<ID_Output>;
  createdBy: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedBy: () => Promise<ID_Output>;
  updatedAt: () => Promise<DateTimeOutput>;
  name: () => Promise<String>;
  osmNodeId: () => Promise<String>;
  addressLine1: () => Promise<String>;
  addressLine2: () => Promise<String>;
  addressCity: () => Promise<String>;
  addressZipCode: () => Promise<String>;
  addressCountry: () => Promise<String>;
  geoPointLatitude: () => Promise<Float>;
  geoPointLongitude: () => Promise<Float>;
  geoPointRadiusMeter: () => Promise<Float>;
}

export interface LocationPreviousValuesSubscription
  extends Promise<AsyncIterator<LocationPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  type: () => Promise<AsyncIterator<LocationType>>;
  owner: () => Promise<AsyncIterator<ID_Output>>;
  createdBy: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedBy: () => Promise<AsyncIterator<ID_Output>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  name: () => Promise<AsyncIterator<String>>;
  osmNodeId: () => Promise<AsyncIterator<String>>;
  addressLine1: () => Promise<AsyncIterator<String>>;
  addressLine2: () => Promise<AsyncIterator<String>>;
  addressCity: () => Promise<AsyncIterator<String>>;
  addressZipCode: () => Promise<AsyncIterator<String>>;
  addressCountry: () => Promise<AsyncIterator<String>>;
  geoPointLatitude: () => Promise<AsyncIterator<Float>>;
  geoPointLongitude: () => Promise<AsyncIterator<Float>>;
  geoPointRadiusMeter: () => Promise<AsyncIterator<Float>>;
}

export interface TagSubscriptionPayload {
  mutation: MutationType;
  node: Tag;
  updatedFields: String[];
  previousValues: TagPreviousValues;
}

export interface TagSubscriptionPayloadPromise
  extends Promise<TagSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = TagPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = TagPreviousValuesPromise>() => T;
}

export interface TagSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<TagSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = TagSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = TagPreviousValuesSubscription>() => T;
}

export interface AggregateMembership {
  count: Int;
}

export interface AggregateMembershipPromise
  extends Promise<AggregateMembership>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateMembershipSubscription
  extends Promise<AsyncIterator<AggregateMembership>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface MembershipPreviousValues {
  id: ID_Output;
  type: MembershipType;
  createdBy: ID_Output;
  createdAt: DateTimeOutput;
  updatedBy?: ID_Output;
  updatedAt?: DateTimeOutput;
  showHistory: Boolean;
}

export interface MembershipPreviousValuesPromise
  extends Promise<MembershipPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  type: () => Promise<MembershipType>;
  createdBy: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedBy: () => Promise<ID_Output>;
  updatedAt: () => Promise<DateTimeOutput>;
  showHistory: () => Promise<Boolean>;
}

export interface MembershipPreviousValuesSubscription
  extends Promise<AsyncIterator<MembershipPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  type: () => Promise<AsyncIterator<MembershipType>>;
  createdBy: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedBy: () => Promise<AsyncIterator<ID_Output>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  showHistory: () => Promise<AsyncIterator<Boolean>>;
}

export interface MembershipSubscriptionPayload {
  mutation: MutationType;
  node: Membership;
  updatedFields: String[];
  previousValues: MembershipPreviousValues;
}

export interface MembershipSubscriptionPayloadPromise
  extends Promise<MembershipSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = MembershipPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = MembershipPreviousValuesPromise>() => T;
}

export interface MembershipSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<MembershipSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = MembershipSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = MembershipPreviousValuesSubscription>() => T;
}

export interface ContentEncodingConnection {
  pageInfo: PageInfo;
  edges: ContentEncodingEdge[];
}

export interface ContentEncodingConnectionPromise
  extends Promise<ContentEncodingConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ContentEncodingEdge>>() => T;
  aggregate: <T = AggregateContentEncodingPromise>() => T;
}

export interface ContentEncodingConnectionSubscription
  extends Promise<AsyncIterator<ContentEncodingConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ContentEncodingEdgeSubscription>>>() => T;
  aggregate: <T = AggregateContentEncodingSubscription>() => T;
}

export interface LocationEdge {
  node: Location;
  cursor: String;
}

export interface LocationEdgePromise
  extends Promise<LocationEdge>,
    Fragmentable {
  node: <T = LocationPromise>() => T;
  cursor: () => Promise<String>;
}

export interface LocationEdgeSubscription
  extends Promise<AsyncIterator<LocationEdge>>,
    Fragmentable {
  node: <T = LocationSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface SessionPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt?: DateTimeOutput;
  sessionToken: String;
  csrfToken?: String;
  bearerToken?: String;
  clientTime?: String;
  validTo: DateTimeOutput;
  timedOut?: DateTimeOutput;
  loggedOut?: DateTimeOutput;
  ipAddress?: String;
}

export interface SessionPreviousValuesPromise
  extends Promise<SessionPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  sessionToken: () => Promise<String>;
  csrfToken: () => Promise<String>;
  bearerToken: () => Promise<String>;
  clientTime: () => Promise<String>;
  validTo: () => Promise<DateTimeOutput>;
  timedOut: () => Promise<DateTimeOutput>;
  loggedOut: () => Promise<DateTimeOutput>;
  ipAddress: () => Promise<String>;
}

export interface SessionPreviousValuesSubscription
  extends Promise<AsyncIterator<SessionPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  sessionToken: () => Promise<AsyncIterator<String>>;
  csrfToken: () => Promise<AsyncIterator<String>>;
  bearerToken: () => Promise<AsyncIterator<String>>;
  clientTime: () => Promise<AsyncIterator<String>>;
  validTo: () => Promise<AsyncIterator<DateTimeOutput>>;
  timedOut: () => Promise<AsyncIterator<DateTimeOutput>>;
  loggedOut: () => Promise<AsyncIterator<DateTimeOutput>>;
  ipAddress: () => Promise<AsyncIterator<String>>;
}

export interface Tag {
  id: ID_Output;
  type: String;
  owner: ID_Output;
  createdBy: ID_Output;
  createdAt: DateTimeOutput;
  value: String;
}

export interface TagPromise extends Promise<Tag>, Fragmentable {
  id: () => Promise<ID_Output>;
  type: () => Promise<String>;
  owner: () => Promise<ID_Output>;
  createdBy: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  value: () => Promise<String>;
}

export interface TagSubscription
  extends Promise<AsyncIterator<Tag>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  type: () => Promise<AsyncIterator<String>>;
  owner: () => Promise<AsyncIterator<ID_Output>>;
  createdBy: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  value: () => Promise<AsyncIterator<String>>;
}

export interface TagNullablePromise extends Promise<Tag | null>, Fragmentable {
  id: () => Promise<ID_Output>;
  type: () => Promise<String>;
  owner: () => Promise<ID_Output>;
  createdBy: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  value: () => Promise<String>;
}

export interface GroupEdge {
  node: Group;
  cursor: String;
}

export interface GroupEdgePromise extends Promise<GroupEdge>, Fragmentable {
  node: <T = GroupPromise>() => T;
  cursor: () => Promise<String>;
}

export interface GroupEdgeSubscription
  extends Promise<AsyncIterator<GroupEdge>>,
    Fragmentable {
  node: <T = GroupSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export type Json = any;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point).
*/
export type Float = number;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

export type Long = string;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "ContentEncoding",
    embedded: false
  },
  {
    name: "EncodingType",
    embedded: false
  },
  {
    name: "Entry",
    embedded: false
  },
  {
    name: "EntryType",
    embedded: false
  },
  {
    name: "Group",
    embedded: false
  },
  {
    name: "GroupType",
    embedded: false
  },
  {
    name: "Membership",
    embedded: false
  },
  {
    name: "MembershipType",
    embedded: false
  },
  {
    name: "Agent",
    embedded: false
  },
  {
    name: "AgentType",
    embedded: false
  },
  {
    name: "AgentStatus",
    embedded: false
  },
  {
    name: "ProfileType",
    embedded: false
  },
  {
    name: "User",
    embedded: false
  },
  {
    name: "UserType",
    embedded: false
  },
  {
    name: "Session",
    embedded: false
  },
  {
    name: "Tag",
    embedded: false
  },
  {
    name: "Location",
    embedded: false
  },
  {
    name: "LocationType",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const Prisma = makePrismaClientClass<ClientConstructor<Prisma>>({
  typeDefs,
  models,
  endpoint: `http://local.abis-cloud.com:4466/AbisStarterkit/dev`,
  secret: `managementApiSecret`
});
export const prisma = new Prisma();
