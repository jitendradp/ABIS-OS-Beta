// Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  asset: (where?: AssetWhereInput) => Promise<boolean>;
  attachment: (where?: AttachmentWhereInput) => Promise<boolean>;
  exchange: (where?: ExchangeWhereInput) => Promise<boolean>;
  group: (where?: GroupWhereInput) => Promise<boolean>;
  location: (where?: LocationWhereInput) => Promise<boolean>;
  membership: (where?: MembershipWhereInput) => Promise<boolean>;
  message: (where?: MessageWhereInput) => Promise<boolean>;
  portfolio: (where?: PortfolioWhereInput) => Promise<boolean>;
  profile: (where?: ProfileWhereInput) => Promise<boolean>;
  reaction: (where?: ReactionWhereInput) => Promise<boolean>;
  session: (where?: SessionWhereInput) => Promise<boolean>;
  transaction: (where?: TransactionWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  asset: (where: AssetWhereUniqueInput) => AssetNullablePromise;
  assets: (args?: {
    where?: AssetWhereInput;
    orderBy?: AssetOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Asset>;
  assetsConnection: (args?: {
    where?: AssetWhereInput;
    orderBy?: AssetOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => AssetConnectionPromise;
  attachment: (where: AttachmentWhereUniqueInput) => AttachmentNullablePromise;
  attachments: (args?: {
    where?: AttachmentWhereInput;
    orderBy?: AttachmentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Attachment>;
  attachmentsConnection: (args?: {
    where?: AttachmentWhereInput;
    orderBy?: AttachmentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => AttachmentConnectionPromise;
  exchange: (where: ExchangeWhereUniqueInput) => ExchangeNullablePromise;
  exchanges: (args?: {
    where?: ExchangeWhereInput;
    orderBy?: ExchangeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Exchange>;
  exchangesConnection: (args?: {
    where?: ExchangeWhereInput;
    orderBy?: ExchangeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ExchangeConnectionPromise;
  group: (where: GroupWhereUniqueInput) => GroupNullablePromise;
  groups: (args?: {
    where?: GroupWhereInput;
    orderBy?: GroupOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Group>;
  groupsConnection: (args?: {
    where?: GroupWhereInput;
    orderBy?: GroupOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => GroupConnectionPromise;
  location: (where: LocationWhereUniqueInput) => LocationNullablePromise;
  locations: (args?: {
    where?: LocationWhereInput;
    orderBy?: LocationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Location>;
  locationsConnection: (args?: {
    where?: LocationWhereInput;
    orderBy?: LocationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => LocationConnectionPromise;
  membership: (where: MembershipWhereUniqueInput) => MembershipNullablePromise;
  memberships: (args?: {
    where?: MembershipWhereInput;
    orderBy?: MembershipOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Membership>;
  membershipsConnection: (args?: {
    where?: MembershipWhereInput;
    orderBy?: MembershipOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => MembershipConnectionPromise;
  message: (where: MessageWhereUniqueInput) => MessageNullablePromise;
  messages: (args?: {
    where?: MessageWhereInput;
    orderBy?: MessageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Message>;
  messagesConnection: (args?: {
    where?: MessageWhereInput;
    orderBy?: MessageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => MessageConnectionPromise;
  portfolio: (where: PortfolioWhereUniqueInput) => PortfolioNullablePromise;
  portfolios: (args?: {
    where?: PortfolioWhereInput;
    orderBy?: PortfolioOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Portfolio>;
  portfoliosConnection: (args?: {
    where?: PortfolioWhereInput;
    orderBy?: PortfolioOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => PortfolioConnectionPromise;
  profile: (where: ProfileWhereUniqueInput) => ProfileNullablePromise;
  profiles: (args?: {
    where?: ProfileWhereInput;
    orderBy?: ProfileOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Profile>;
  profilesConnection: (args?: {
    where?: ProfileWhereInput;
    orderBy?: ProfileOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ProfileConnectionPromise;
  reaction: (where: ReactionWhereUniqueInput) => ReactionNullablePromise;
  reactions: (args?: {
    where?: ReactionWhereInput;
    orderBy?: ReactionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Reaction>;
  reactionsConnection: (args?: {
    where?: ReactionWhereInput;
    orderBy?: ReactionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ReactionConnectionPromise;
  session: (where: SessionWhereUniqueInput) => SessionNullablePromise;
  sessions: (args?: {
    where?: SessionWhereInput;
    orderBy?: SessionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Session>;
  sessionsConnection: (args?: {
    where?: SessionWhereInput;
    orderBy?: SessionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => SessionConnectionPromise;
  transaction: (
    where: TransactionWhereUniqueInput
  ) => TransactionNullablePromise;
  transactions: (args?: {
    where?: TransactionWhereInput;
    orderBy?: TransactionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Transaction>;
  transactionsConnection: (args?: {
    where?: TransactionWhereInput;
    orderBy?: TransactionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => TransactionConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createAsset: (data: AssetCreateInput) => AssetPromise;
  updateAsset: (args: {
    data: AssetUpdateInput;
    where: AssetWhereUniqueInput;
  }) => AssetPromise;
  updateManyAssets: (args: {
    data: AssetUpdateManyMutationInput;
    where?: AssetWhereInput;
  }) => BatchPayloadPromise;
  upsertAsset: (args: {
    where: AssetWhereUniqueInput;
    create: AssetCreateInput;
    update: AssetUpdateInput;
  }) => AssetPromise;
  deleteAsset: (where: AssetWhereUniqueInput) => AssetPromise;
  deleteManyAssets: (where?: AssetWhereInput) => BatchPayloadPromise;
  createAttachment: (data: AttachmentCreateInput) => AttachmentPromise;
  updateAttachment: (args: {
    data: AttachmentUpdateInput;
    where: AttachmentWhereUniqueInput;
  }) => AttachmentPromise;
  updateManyAttachments: (args: {
    data: AttachmentUpdateManyMutationInput;
    where?: AttachmentWhereInput;
  }) => BatchPayloadPromise;
  upsertAttachment: (args: {
    where: AttachmentWhereUniqueInput;
    create: AttachmentCreateInput;
    update: AttachmentUpdateInput;
  }) => AttachmentPromise;
  deleteAttachment: (where: AttachmentWhereUniqueInput) => AttachmentPromise;
  deleteManyAttachments: (where?: AttachmentWhereInput) => BatchPayloadPromise;
  createExchange: (data: ExchangeCreateInput) => ExchangePromise;
  updateExchange: (args: {
    data: ExchangeUpdateInput;
    where: ExchangeWhereUniqueInput;
  }) => ExchangePromise;
  updateManyExchanges: (args: {
    data: ExchangeUpdateManyMutationInput;
    where?: ExchangeWhereInput;
  }) => BatchPayloadPromise;
  upsertExchange: (args: {
    where: ExchangeWhereUniqueInput;
    create: ExchangeCreateInput;
    update: ExchangeUpdateInput;
  }) => ExchangePromise;
  deleteExchange: (where: ExchangeWhereUniqueInput) => ExchangePromise;
  deleteManyExchanges: (where?: ExchangeWhereInput) => BatchPayloadPromise;
  createGroup: (data: GroupCreateInput) => GroupPromise;
  updateGroup: (args: {
    data: GroupUpdateInput;
    where: GroupWhereUniqueInput;
  }) => GroupPromise;
  updateManyGroups: (args: {
    data: GroupUpdateManyMutationInput;
    where?: GroupWhereInput;
  }) => BatchPayloadPromise;
  upsertGroup: (args: {
    where: GroupWhereUniqueInput;
    create: GroupCreateInput;
    update: GroupUpdateInput;
  }) => GroupPromise;
  deleteGroup: (where: GroupWhereUniqueInput) => GroupPromise;
  deleteManyGroups: (where?: GroupWhereInput) => BatchPayloadPromise;
  createLocation: (data: LocationCreateInput) => LocationPromise;
  updateLocation: (args: {
    data: LocationUpdateInput;
    where: LocationWhereUniqueInput;
  }) => LocationPromise;
  updateManyLocations: (args: {
    data: LocationUpdateManyMutationInput;
    where?: LocationWhereInput;
  }) => BatchPayloadPromise;
  upsertLocation: (args: {
    where: LocationWhereUniqueInput;
    create: LocationCreateInput;
    update: LocationUpdateInput;
  }) => LocationPromise;
  deleteLocation: (where: LocationWhereUniqueInput) => LocationPromise;
  deleteManyLocations: (where?: LocationWhereInput) => BatchPayloadPromise;
  createMembership: (data: MembershipCreateInput) => MembershipPromise;
  updateMembership: (args: {
    data: MembershipUpdateInput;
    where: MembershipWhereUniqueInput;
  }) => MembershipPromise;
  updateManyMemberships: (args: {
    data: MembershipUpdateManyMutationInput;
    where?: MembershipWhereInput;
  }) => BatchPayloadPromise;
  upsertMembership: (args: {
    where: MembershipWhereUniqueInput;
    create: MembershipCreateInput;
    update: MembershipUpdateInput;
  }) => MembershipPromise;
  deleteMembership: (where: MembershipWhereUniqueInput) => MembershipPromise;
  deleteManyMemberships: (where?: MembershipWhereInput) => BatchPayloadPromise;
  createMessage: (data: MessageCreateInput) => MessagePromise;
  updateMessage: (args: {
    data: MessageUpdateInput;
    where: MessageWhereUniqueInput;
  }) => MessagePromise;
  updateManyMessages: (args: {
    data: MessageUpdateManyMutationInput;
    where?: MessageWhereInput;
  }) => BatchPayloadPromise;
  upsertMessage: (args: {
    where: MessageWhereUniqueInput;
    create: MessageCreateInput;
    update: MessageUpdateInput;
  }) => MessagePromise;
  deleteMessage: (where: MessageWhereUniqueInput) => MessagePromise;
  deleteManyMessages: (where?: MessageWhereInput) => BatchPayloadPromise;
  createPortfolio: (data: PortfolioCreateInput) => PortfolioPromise;
  updatePortfolio: (args: {
    data: PortfolioUpdateInput;
    where: PortfolioWhereUniqueInput;
  }) => PortfolioPromise;
  updateManyPortfolios: (args: {
    data: PortfolioUpdateManyMutationInput;
    where?: PortfolioWhereInput;
  }) => BatchPayloadPromise;
  upsertPortfolio: (args: {
    where: PortfolioWhereUniqueInput;
    create: PortfolioCreateInput;
    update: PortfolioUpdateInput;
  }) => PortfolioPromise;
  deletePortfolio: (where: PortfolioWhereUniqueInput) => PortfolioPromise;
  deleteManyPortfolios: (where?: PortfolioWhereInput) => BatchPayloadPromise;
  createProfile: (data: ProfileCreateInput) => ProfilePromise;
  updateProfile: (args: {
    data: ProfileUpdateInput;
    where: ProfileWhereUniqueInput;
  }) => ProfilePromise;
  updateManyProfiles: (args: {
    data: ProfileUpdateManyMutationInput;
    where?: ProfileWhereInput;
  }) => BatchPayloadPromise;
  upsertProfile: (args: {
    where: ProfileWhereUniqueInput;
    create: ProfileCreateInput;
    update: ProfileUpdateInput;
  }) => ProfilePromise;
  deleteProfile: (where: ProfileWhereUniqueInput) => ProfilePromise;
  deleteManyProfiles: (where?: ProfileWhereInput) => BatchPayloadPromise;
  createReaction: (data: ReactionCreateInput) => ReactionPromise;
  updateReaction: (args: {
    data: ReactionUpdateInput;
    where: ReactionWhereUniqueInput;
  }) => ReactionPromise;
  updateManyReactions: (args: {
    data: ReactionUpdateManyMutationInput;
    where?: ReactionWhereInput;
  }) => BatchPayloadPromise;
  upsertReaction: (args: {
    where: ReactionWhereUniqueInput;
    create: ReactionCreateInput;
    update: ReactionUpdateInput;
  }) => ReactionPromise;
  deleteReaction: (where: ReactionWhereUniqueInput) => ReactionPromise;
  deleteManyReactions: (where?: ReactionWhereInput) => BatchPayloadPromise;
  createSession: (data: SessionCreateInput) => SessionPromise;
  updateSession: (args: {
    data: SessionUpdateInput;
    where: SessionWhereUniqueInput;
  }) => SessionPromise;
  updateManySessions: (args: {
    data: SessionUpdateManyMutationInput;
    where?: SessionWhereInput;
  }) => BatchPayloadPromise;
  upsertSession: (args: {
    where: SessionWhereUniqueInput;
    create: SessionCreateInput;
    update: SessionUpdateInput;
  }) => SessionPromise;
  deleteSession: (where: SessionWhereUniqueInput) => SessionPromise;
  deleteManySessions: (where?: SessionWhereInput) => BatchPayloadPromise;
  createTransaction: (data: TransactionCreateInput) => TransactionPromise;
  updateTransaction: (args: {
    data: TransactionUpdateInput;
    where: TransactionWhereUniqueInput;
  }) => TransactionPromise;
  updateManyTransactions: (args: {
    data: TransactionUpdateManyMutationInput;
    where?: TransactionWhereInput;
  }) => BatchPayloadPromise;
  upsertTransaction: (args: {
    where: TransactionWhereUniqueInput;
    create: TransactionCreateInput;
    update: TransactionUpdateInput;
  }) => TransactionPromise;
  deleteTransaction: (where: TransactionWhereUniqueInput) => TransactionPromise;
  deleteManyTransactions: (
    where?: TransactionWhereInput
  ) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  asset: (
    where?: AssetSubscriptionWhereInput
  ) => AssetSubscriptionPayloadSubscription;
  attachment: (
    where?: AttachmentSubscriptionWhereInput
  ) => AttachmentSubscriptionPayloadSubscription;
  exchange: (
    where?: ExchangeSubscriptionWhereInput
  ) => ExchangeSubscriptionPayloadSubscription;
  group: (
    where?: GroupSubscriptionWhereInput
  ) => GroupSubscriptionPayloadSubscription;
  location: (
    where?: LocationSubscriptionWhereInput
  ) => LocationSubscriptionPayloadSubscription;
  membership: (
    where?: MembershipSubscriptionWhereInput
  ) => MembershipSubscriptionPayloadSubscription;
  message: (
    where?: MessageSubscriptionWhereInput
  ) => MessageSubscriptionPayloadSubscription;
  portfolio: (
    where?: PortfolioSubscriptionWhereInput
  ) => PortfolioSubscriptionPayloadSubscription;
  profile: (
    where?: ProfileSubscriptionWhereInput
  ) => ProfileSubscriptionPayloadSubscription;
  reaction: (
    where?: ReactionSubscriptionWhereInput
  ) => ReactionSubscriptionPayloadSubscription;
  session: (
    where?: SessionSubscriptionWhereInput
  ) => SessionSubscriptionPayloadSubscription;
  transaction: (
    where?: TransactionSubscriptionWhereInput
  ) => TransactionSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type LocationOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "name_ASC"
  | "name_DESC"
  | "latitude_ASC"
  | "latitude_DESC"
  | "longitude_ASC"
  | "longitude_DESC"
  | "radius_ASC"
  | "radius_DESC";

export type GroupType =
  | "WORKSPACE"
  | "TEAM"
  | "CONVERSATION"
  | "THREAD"
  | "FRIENDS";

export type GroupOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "name_ASC"
  | "name_DESC"
  | "title_ASC"
  | "title_DESC"
  | "description_ASC"
  | "description_DESC"
  | "logo_ASC"
  | "logo_DESC"
  | "type_ASC"
  | "type_DESC"
  | "is_hidden_ASC"
  | "is_hidden_DESC"
  | "is_public_ASC"
  | "is_public_DESC"
  | "tags_ASC"
  | "tags_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "name_ASC"
  | "name_DESC"
  | "timezone_ASC"
  | "timezone_DESC"
  | "email_ASC"
  | "email_DESC"
  | "password_salt_ASC"
  | "password_salt_DESC"
  | "password_hash_ASC"
  | "password_hash_DESC"
  | "is_verified_ASC"
  | "is_verified_DESC"
  | "challenge_ASC"
  | "challenge_DESC"
  | "lastUsedProfileId_ASC"
  | "lastUsedProfileId_DESC";

export type ExchangeOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC";

export type AssetOrderByInput = "id_ASC" | "id_DESC" | "name_ASC" | "name_DESC";

export type ReactionOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "emoji_ASC"
  | "emoji_DESC";

export type PortfolioOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC";

export type AttachmentOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "name_ASC"
  | "name_DESC"
  | "type_ASC"
  | "type_DESC"
  | "link_ASC"
  | "link_DESC"
  | "tags_ASC"
  | "tags_DESC";

export type TransactionDirection = "BUY" | "SELL";

export type MessageType =
  | "NOTIFICATION"
  | "DIRECT_MESSAGE"
  | "COMMENT"
  | "POST"
  | "CHART_FLAG"
  | "TRAIL";

export type AttachmentType =
  | "DOCUMENT"
  | "PICTURE"
  | "LINK"
  | "VIDEO"
  | "AUDIO";

export type MembershipOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "show_history_ASC"
  | "show_history_DESC";

export type MessageOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "type_ASC"
  | "type_DESC"
  | "subject_ASC"
  | "subject_DESC"
  | "content_ASC"
  | "content_DESC"
  | "tags_ASC"
  | "tags_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type TransactionOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "timestamp_ASC"
  | "timestamp_DESC"
  | "direction_ASC"
  | "direction_DESC"
  | "amount_ASC"
  | "amount_DESC";

export type ProfileOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "name_ASC"
  | "name_DESC"
  | "timezone_ASC"
  | "timezone_DESC"
  | "status_ASC"
  | "status_DESC"
  | "picture_ASC"
  | "picture_DESC";

export type SessionOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "csrfToken_ASC"
  | "csrfToken_DESC"
  | "authToken_ASC"
  | "authToken_DESC"
  | "validTo_ASC"
  | "validTo_DESC"
  | "timedOut_ASC"
  | "timedOut_DESC"
  | "loggedOut_ASC"
  | "loggedOut_DESC";

export interface LocationUpsertNestedInput {
  update: LocationUpdateDataInput;
  create: LocationCreateInput;
}

export type AssetWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface MessageUpsertNestedInput {
  update: MessageUpdateDataInput;
  create: MessageCreateInput;
}

export interface GroupWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  host?: Maybe<ProfileWhereInput>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  logo?: Maybe<String>;
  logo_not?: Maybe<String>;
  logo_in?: Maybe<String[] | String>;
  logo_not_in?: Maybe<String[] | String>;
  logo_lt?: Maybe<String>;
  logo_lte?: Maybe<String>;
  logo_gt?: Maybe<String>;
  logo_gte?: Maybe<String>;
  logo_contains?: Maybe<String>;
  logo_not_contains?: Maybe<String>;
  logo_starts_with?: Maybe<String>;
  logo_not_starts_with?: Maybe<String>;
  logo_ends_with?: Maybe<String>;
  logo_not_ends_with?: Maybe<String>;
  type?: Maybe<GroupType>;
  type_not?: Maybe<GroupType>;
  type_in?: Maybe<GroupType[] | GroupType>;
  type_not_in?: Maybe<GroupType[] | GroupType>;
  parent?: Maybe<GroupWhereInput>;
  is_hidden?: Maybe<Boolean>;
  is_hidden_not?: Maybe<Boolean>;
  is_public?: Maybe<Boolean>;
  is_public_not?: Maybe<Boolean>;
  members_every?: Maybe<MembershipWhereInput>;
  members_some?: Maybe<MembershipWhereInput>;
  members_none?: Maybe<MembershipWhereInput>;
  messages_every?: Maybe<MessageWhereInput>;
  messages_some?: Maybe<MessageWhereInput>;
  messages_none?: Maybe<MessageWhereInput>;
  tags?: Maybe<String>;
  tags_not?: Maybe<String>;
  tags_in?: Maybe<String[] | String>;
  tags_not_in?: Maybe<String[] | String>;
  tags_lt?: Maybe<String>;
  tags_lte?: Maybe<String>;
  tags_gt?: Maybe<String>;
  tags_gte?: Maybe<String>;
  tags_contains?: Maybe<String>;
  tags_not_contains?: Maybe<String>;
  tags_starts_with?: Maybe<String>;
  tags_not_starts_with?: Maybe<String>;
  tags_ends_with?: Maybe<String>;
  tags_not_ends_with?: Maybe<String>;
  location?: Maybe<LocationWhereInput>;
  AND?: Maybe<GroupWhereInput[] | GroupWhereInput>;
  OR?: Maybe<GroupWhereInput[] | GroupWhereInput>;
  NOT?: Maybe<GroupWhereInput[] | GroupWhereInput>;
}

export interface AttachmentUpdateManyInput {
  create?: Maybe<AttachmentCreateInput[] | AttachmentCreateInput>;
  update?: Maybe<
    | AttachmentUpdateWithWhereUniqueNestedInput[]
    | AttachmentUpdateWithWhereUniqueNestedInput
  >;
  upsert?: Maybe<
    | AttachmentUpsertWithWhereUniqueNestedInput[]
    | AttachmentUpsertWithWhereUniqueNestedInput
  >;
  delete?: Maybe<AttachmentWhereUniqueInput[] | AttachmentWhereUniqueInput>;
  connect?: Maybe<AttachmentWhereUniqueInput[] | AttachmentWhereUniqueInput>;
  set?: Maybe<AttachmentWhereUniqueInput[] | AttachmentWhereUniqueInput>;
  disconnect?: Maybe<AttachmentWhereUniqueInput[] | AttachmentWhereUniqueInput>;
  deleteMany?: Maybe<AttachmentScalarWhereInput[] | AttachmentScalarWhereInput>;
  updateMany?: Maybe<
    | AttachmentUpdateManyWithWhereNestedInput[]
    | AttachmentUpdateManyWithWhereNestedInput
  >;
}

export interface MessageWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  sender?: Maybe<ProfileWhereInput>;
  type?: Maybe<MessageType>;
  type_not?: Maybe<MessageType>;
  type_in?: Maybe<MessageType[] | MessageType>;
  type_not_in?: Maybe<MessageType[] | MessageType>;
  parent?: Maybe<MessageWhereInput>;
  subject?: Maybe<String>;
  subject_not?: Maybe<String>;
  subject_in?: Maybe<String[] | String>;
  subject_not_in?: Maybe<String[] | String>;
  subject_lt?: Maybe<String>;
  subject_lte?: Maybe<String>;
  subject_gt?: Maybe<String>;
  subject_gte?: Maybe<String>;
  subject_contains?: Maybe<String>;
  subject_not_contains?: Maybe<String>;
  subject_starts_with?: Maybe<String>;
  subject_not_starts_with?: Maybe<String>;
  subject_ends_with?: Maybe<String>;
  subject_not_ends_with?: Maybe<String>;
  attachments_every?: Maybe<AttachmentWhereInput>;
  attachments_some?: Maybe<AttachmentWhereInput>;
  attachments_none?: Maybe<AttachmentWhereInput>;
  reactions_every?: Maybe<ReactionWhereInput>;
  reactions_some?: Maybe<ReactionWhereInput>;
  reactions_none?: Maybe<ReactionWhereInput>;
  tags?: Maybe<String>;
  tags_not?: Maybe<String>;
  tags_in?: Maybe<String[] | String>;
  tags_not_in?: Maybe<String[] | String>;
  tags_lt?: Maybe<String>;
  tags_lte?: Maybe<String>;
  tags_gt?: Maybe<String>;
  tags_gte?: Maybe<String>;
  tags_contains?: Maybe<String>;
  tags_not_contains?: Maybe<String>;
  tags_starts_with?: Maybe<String>;
  tags_not_starts_with?: Maybe<String>;
  tags_ends_with?: Maybe<String>;
  tags_not_ends_with?: Maybe<String>;
  location?: Maybe<LocationWhereInput>;
  AND?: Maybe<MessageWhereInput[] | MessageWhereInput>;
  OR?: Maybe<MessageWhereInput[] | MessageWhereInput>;
  NOT?: Maybe<MessageWhereInput[] | MessageWhereInput>;
}

export interface AttachmentUpdateWithWhereUniqueNestedInput {
  where: AttachmentWhereUniqueInput;
  data: AttachmentUpdateDataInput;
}

export interface AttachmentWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  createdBy?: Maybe<ProfileWhereInput>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  type?: Maybe<AttachmentType>;
  type_not?: Maybe<AttachmentType>;
  type_in?: Maybe<AttachmentType[] | AttachmentType>;
  type_not_in?: Maybe<AttachmentType[] | AttachmentType>;
  link?: Maybe<String>;
  link_not?: Maybe<String>;
  link_in?: Maybe<String[] | String>;
  link_not_in?: Maybe<String[] | String>;
  link_lt?: Maybe<String>;
  link_lte?: Maybe<String>;
  link_gt?: Maybe<String>;
  link_gte?: Maybe<String>;
  link_contains?: Maybe<String>;
  link_not_contains?: Maybe<String>;
  link_starts_with?: Maybe<String>;
  link_not_starts_with?: Maybe<String>;
  link_ends_with?: Maybe<String>;
  link_not_ends_with?: Maybe<String>;
  tags?: Maybe<String>;
  tags_not?: Maybe<String>;
  tags_in?: Maybe<String[] | String>;
  tags_not_in?: Maybe<String[] | String>;
  tags_lt?: Maybe<String>;
  tags_lte?: Maybe<String>;
  tags_gt?: Maybe<String>;
  tags_gte?: Maybe<String>;
  tags_contains?: Maybe<String>;
  tags_not_contains?: Maybe<String>;
  tags_starts_with?: Maybe<String>;
  tags_not_starts_with?: Maybe<String>;
  tags_ends_with?: Maybe<String>;
  tags_not_ends_with?: Maybe<String>;
  location?: Maybe<LocationWhereInput>;
  AND?: Maybe<AttachmentWhereInput[] | AttachmentWhereInput>;
  OR?: Maybe<AttachmentWhereInput[] | AttachmentWhereInput>;
  NOT?: Maybe<AttachmentWhereInput[] | AttachmentWhereInput>;
}

export interface AttachmentUpdateDataInput {
  createdBy?: Maybe<ProfileUpdateOneRequiredInput>;
  name?: Maybe<String>;
  type?: Maybe<AttachmentType>;
  link?: Maybe<String>;
  tags?: Maybe<String>;
  location?: Maybe<LocationUpdateOneInput>;
}

export interface ReactionWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  creator?: Maybe<ProfileWhereInput>;
  emoji?: Maybe<String>;
  emoji_not?: Maybe<String>;
  emoji_in?: Maybe<String[] | String>;
  emoji_not_in?: Maybe<String[] | String>;
  emoji_lt?: Maybe<String>;
  emoji_lte?: Maybe<String>;
  emoji_gt?: Maybe<String>;
  emoji_gte?: Maybe<String>;
  emoji_contains?: Maybe<String>;
  emoji_not_contains?: Maybe<String>;
  emoji_starts_with?: Maybe<String>;
  emoji_not_starts_with?: Maybe<String>;
  emoji_ends_with?: Maybe<String>;
  emoji_not_ends_with?: Maybe<String>;
  AND?: Maybe<ReactionWhereInput[] | ReactionWhereInput>;
  OR?: Maybe<ReactionWhereInput[] | ReactionWhereInput>;
  NOT?: Maybe<ReactionWhereInput[] | ReactionWhereInput>;
}

export interface MembershipCreateManyWithoutGroupInput {
  create?: Maybe<
    MembershipCreateWithoutGroupInput[] | MembershipCreateWithoutGroupInput
  >;
  connect?: Maybe<MembershipWhereUniqueInput[] | MembershipWhereUniqueInput>;
}

export interface PortfolioUpdateInput {
  owner?: Maybe<ProfileUpdateOneRequiredInput>;
  name?: Maybe<String>;
  transactions?: Maybe<TransactionUpdateManyInput>;
}

export interface MembershipCreateWithoutGroupInput {
  id?: Maybe<ID_Input>;
  member: ProfileCreateOneWithoutMembershipsInput;
  show_history: Boolean;
}

export interface AttachmentUpsertWithWhereUniqueNestedInput {
  where: AttachmentWhereUniqueInput;
  update: AttachmentUpdateDataInput;
  create: AttachmentCreateInput;
}

export interface ProfileCreateOneWithoutMembershipsInput {
  create?: Maybe<ProfileCreateWithoutMembershipsInput>;
  connect?: Maybe<ProfileWhereUniqueInput>;
}

export interface TransactionSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<TransactionWhereInput>;
  AND?: Maybe<
    TransactionSubscriptionWhereInput[] | TransactionSubscriptionWhereInput
  >;
  OR?: Maybe<
    TransactionSubscriptionWhereInput[] | TransactionSubscriptionWhereInput
  >;
  NOT?: Maybe<
    TransactionSubscriptionWhereInput[] | TransactionSubscriptionWhereInput
  >;
}

export interface ProfileCreateWithoutMembershipsInput {
  id?: Maybe<ID_Input>;
  name: String;
  timezone?: Maybe<String>;
  status?: Maybe<String>;
  picture: String;
  location?: Maybe<LocationCreateOneInput>;
}

export interface ReactionSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ReactionWhereInput>;
  AND?: Maybe<
    ReactionSubscriptionWhereInput[] | ReactionSubscriptionWhereInput
  >;
  OR?: Maybe<ReactionSubscriptionWhereInput[] | ReactionSubscriptionWhereInput>;
  NOT?: Maybe<
    ReactionSubscriptionWhereInput[] | ReactionSubscriptionWhereInput
  >;
}

export interface LocationCreateOneInput {
  create?: Maybe<LocationCreateInput>;
  connect?: Maybe<LocationWhereUniqueInput>;
}

export interface PortfolioSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<PortfolioWhereInput>;
  AND?: Maybe<
    PortfolioSubscriptionWhereInput[] | PortfolioSubscriptionWhereInput
  >;
  OR?: Maybe<
    PortfolioSubscriptionWhereInput[] | PortfolioSubscriptionWhereInput
  >;
  NOT?: Maybe<
    PortfolioSubscriptionWhereInput[] | PortfolioSubscriptionWhereInput
  >;
}

export interface LocationCreateInput {
  id?: Maybe<ID_Input>;
  name?: Maybe<String>;
  latitude: Float;
  longitude: Float;
  radius?: Maybe<Float>;
}

export interface MembershipSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<MembershipWhereInput>;
  AND?: Maybe<
    MembershipSubscriptionWhereInput[] | MembershipSubscriptionWhereInput
  >;
  OR?: Maybe<
    MembershipSubscriptionWhereInput[] | MembershipSubscriptionWhereInput
  >;
  NOT?: Maybe<
    MembershipSubscriptionWhereInput[] | MembershipSubscriptionWhereInput
  >;
}

export interface MessageCreateManyInput {
  create?: Maybe<MessageCreateInput[] | MessageCreateInput>;
  connect?: Maybe<MessageWhereUniqueInput[] | MessageWhereUniqueInput>;
}

export interface GroupSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<GroupWhereInput>;
  AND?: Maybe<GroupSubscriptionWhereInput[] | GroupSubscriptionWhereInput>;
  OR?: Maybe<GroupSubscriptionWhereInput[] | GroupSubscriptionWhereInput>;
  NOT?: Maybe<GroupSubscriptionWhereInput[] | GroupSubscriptionWhereInput>;
}

export interface MessageCreateInput {
  id?: Maybe<ID_Input>;
  sender: ProfileCreateOneInput;
  type: MessageType;
  parent?: Maybe<MessageCreateOneInput>;
  subject?: Maybe<String>;
  content?: Maybe<Json>;
  attachments?: Maybe<AttachmentCreateManyInput>;
  reactions?: Maybe<ReactionCreateManyInput>;
  tags?: Maybe<String>;
  location?: Maybe<LocationCreateOneInput>;
}

export interface ExchangeSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ExchangeWhereInput>;
  AND?: Maybe<
    ExchangeSubscriptionWhereInput[] | ExchangeSubscriptionWhereInput
  >;
  OR?: Maybe<ExchangeSubscriptionWhereInput[] | ExchangeSubscriptionWhereInput>;
  NOT?: Maybe<
    ExchangeSubscriptionWhereInput[] | ExchangeSubscriptionWhereInput
  >;
}

export interface MessageCreateOneInput {
  create?: Maybe<MessageCreateInput>;
  connect?: Maybe<MessageWhereUniqueInput>;
}

export type AttachmentWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface AttachmentCreateManyInput {
  create?: Maybe<AttachmentCreateInput[] | AttachmentCreateInput>;
  connect?: Maybe<AttachmentWhereUniqueInput[] | AttachmentWhereUniqueInput>;
}

export interface AssetSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<AssetWhereInput>;
  AND?: Maybe<AssetSubscriptionWhereInput[] | AssetSubscriptionWhereInput>;
  OR?: Maybe<AssetSubscriptionWhereInput[] | AssetSubscriptionWhereInput>;
  NOT?: Maybe<AssetSubscriptionWhereInput[] | AssetSubscriptionWhereInput>;
}

export interface ReactionCreateManyInput {
  create?: Maybe<ReactionCreateInput[] | ReactionCreateInput>;
  connect?: Maybe<ReactionWhereUniqueInput[] | ReactionWhereUniqueInput>;
}

export type GroupWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface ReactionCreateInput {
  id?: Maybe<ID_Input>;
  creator: ProfileCreateOneInput;
  emoji: String;
}

export interface SessionUpdateManyWithWhereNestedInput {
  where: SessionScalarWhereInput;
  data: SessionUpdateManyDataInput;
}

export interface AttachmentUpdateInput {
  createdBy?: Maybe<ProfileUpdateOneRequiredInput>;
  name?: Maybe<String>;
  type?: Maybe<AttachmentType>;
  link?: Maybe<String>;
  tags?: Maybe<String>;
  location?: Maybe<LocationUpdateOneInput>;
}

export interface SessionUpsertWithWhereUniqueWithoutUserInput {
  where: SessionWhereUniqueInput;
  update: SessionUpdateWithoutUserDataInput;
  create: SessionCreateWithoutUserInput;
}

export interface ProfileUpdateOneRequiredInput {
  create?: Maybe<ProfileCreateInput>;
  update?: Maybe<ProfileUpdateDataInput>;
  upsert?: Maybe<ProfileUpsertNestedInput>;
  connect?: Maybe<ProfileWhereUniqueInput>;
}

export interface SessionUpdateWithoutUserDataInput {
  csrfToken?: Maybe<String>;
  authToken?: Maybe<String>;
  validTo?: Maybe<DateTimeInput>;
  timedOut?: Maybe<DateTimeInput>;
  loggedOut?: Maybe<DateTimeInput>;
  profile?: Maybe<ProfileUpdateOneInput>;
}

export interface ProfileUpdateDataInput {
  name?: Maybe<String>;
  timezone?: Maybe<String>;
  status?: Maybe<String>;
  picture?: Maybe<String>;
  memberships?: Maybe<MembershipUpdateManyWithoutMemberInput>;
  location?: Maybe<LocationUpdateOneInput>;
}

export interface SessionUpdateManyWithoutUserInput {
  create?: Maybe<
    SessionCreateWithoutUserInput[] | SessionCreateWithoutUserInput
  >;
  delete?: Maybe<SessionWhereUniqueInput[] | SessionWhereUniqueInput>;
  connect?: Maybe<SessionWhereUniqueInput[] | SessionWhereUniqueInput>;
  set?: Maybe<SessionWhereUniqueInput[] | SessionWhereUniqueInput>;
  disconnect?: Maybe<SessionWhereUniqueInput[] | SessionWhereUniqueInput>;
  update?: Maybe<
    | SessionUpdateWithWhereUniqueWithoutUserInput[]
    | SessionUpdateWithWhereUniqueWithoutUserInput
  >;
  upsert?: Maybe<
    | SessionUpsertWithWhereUniqueWithoutUserInput[]
    | SessionUpsertWithWhereUniqueWithoutUserInput
  >;
  deleteMany?: Maybe<SessionScalarWhereInput[] | SessionScalarWhereInput>;
  updateMany?: Maybe<
    | SessionUpdateManyWithWhereNestedInput[]
    | SessionUpdateManyWithWhereNestedInput
  >;
}

export interface MembershipUpdateManyWithoutMemberInput {
  create?: Maybe<
    MembershipCreateWithoutMemberInput[] | MembershipCreateWithoutMemberInput
  >;
  delete?: Maybe<MembershipWhereUniqueInput[] | MembershipWhereUniqueInput>;
  connect?: Maybe<MembershipWhereUniqueInput[] | MembershipWhereUniqueInput>;
  set?: Maybe<MembershipWhereUniqueInput[] | MembershipWhereUniqueInput>;
  disconnect?: Maybe<MembershipWhereUniqueInput[] | MembershipWhereUniqueInput>;
  update?: Maybe<
    | MembershipUpdateWithWhereUniqueWithoutMemberInput[]
    | MembershipUpdateWithWhereUniqueWithoutMemberInput
  >;
  upsert?: Maybe<
    | MembershipUpsertWithWhereUniqueWithoutMemberInput[]
    | MembershipUpsertWithWhereUniqueWithoutMemberInput
  >;
  deleteMany?: Maybe<MembershipScalarWhereInput[] | MembershipScalarWhereInput>;
  updateMany?: Maybe<
    | MembershipUpdateManyWithWhereNestedInput[]
    | MembershipUpdateManyWithWhereNestedInput
  >;
}

export type MembershipWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface MembershipUpdateWithWhereUniqueWithoutMemberInput {
  where: MembershipWhereUniqueInput;
  data: MembershipUpdateWithoutMemberDataInput;
}

export interface SessionCreateManyWithoutUserInput {
  create?: Maybe<
    SessionCreateWithoutUserInput[] | SessionCreateWithoutUserInput
  >;
  connect?: Maybe<SessionWhereUniqueInput[] | SessionWhereUniqueInput>;
}

export interface MembershipUpdateWithoutMemberDataInput {
  group?: Maybe<GroupUpdateOneRequiredWithoutMembersInput>;
  show_history?: Maybe<Boolean>;
}

export type MessageWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface GroupUpdateOneRequiredWithoutMembersInput {
  create?: Maybe<GroupCreateWithoutMembersInput>;
  update?: Maybe<GroupUpdateWithoutMembersDataInput>;
  upsert?: Maybe<GroupUpsertWithoutMembersInput>;
  connect?: Maybe<GroupWhereUniqueInput>;
}

export interface TransactionUpdateInput {
  timestamp?: Maybe<DateTimeInput>;
  profile?: Maybe<ProfileUpdateOneRequiredInput>;
  asset?: Maybe<AssetUpdateOneRequiredInput>;
  direction?: Maybe<TransactionDirection>;
  exchange?: Maybe<ExchangeUpdateOneRequiredInput>;
  amount?: Maybe<Float>;
}

export interface GroupUpdateWithoutMembersDataInput {
  host?: Maybe<ProfileUpdateOneRequiredInput>;
  name?: Maybe<String>;
  title?: Maybe<String>;
  description?: Maybe<String>;
  logo?: Maybe<String>;
  type?: Maybe<GroupType>;
  parent?: Maybe<GroupUpdateOneInput>;
  is_hidden?: Maybe<Boolean>;
  is_public?: Maybe<Boolean>;
  messages?: Maybe<MessageUpdateManyInput>;
  tags?: Maybe<String>;
  location?: Maybe<LocationUpdateOneInput>;
}

export type PortfolioWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface GroupUpdateOneInput {
  create?: Maybe<GroupCreateInput>;
  update?: Maybe<GroupUpdateDataInput>;
  upsert?: Maybe<GroupUpsertNestedInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<GroupWhereUniqueInput>;
}

export interface TransactionWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  timestamp?: Maybe<DateTimeInput>;
  timestamp_not?: Maybe<DateTimeInput>;
  timestamp_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  timestamp_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  timestamp_lt?: Maybe<DateTimeInput>;
  timestamp_lte?: Maybe<DateTimeInput>;
  timestamp_gt?: Maybe<DateTimeInput>;
  timestamp_gte?: Maybe<DateTimeInput>;
  profile?: Maybe<ProfileWhereInput>;
  asset?: Maybe<AssetWhereInput>;
  direction?: Maybe<TransactionDirection>;
  direction_not?: Maybe<TransactionDirection>;
  direction_in?: Maybe<TransactionDirection[] | TransactionDirection>;
  direction_not_in?: Maybe<TransactionDirection[] | TransactionDirection>;
  exchange?: Maybe<ExchangeWhereInput>;
  amount?: Maybe<Float>;
  amount_not?: Maybe<Float>;
  amount_in?: Maybe<Float[] | Float>;
  amount_not_in?: Maybe<Float[] | Float>;
  amount_lt?: Maybe<Float>;
  amount_lte?: Maybe<Float>;
  amount_gt?: Maybe<Float>;
  amount_gte?: Maybe<Float>;
  AND?: Maybe<TransactionWhereInput[] | TransactionWhereInput>;
  OR?: Maybe<TransactionWhereInput[] | TransactionWhereInput>;
  NOT?: Maybe<TransactionWhereInput[] | TransactionWhereInput>;
}

export interface GroupUpdateDataInput {
  host?: Maybe<ProfileUpdateOneRequiredInput>;
  name?: Maybe<String>;
  title?: Maybe<String>;
  description?: Maybe<String>;
  logo?: Maybe<String>;
  type?: Maybe<GroupType>;
  parent?: Maybe<GroupUpdateOneInput>;
  is_hidden?: Maybe<Boolean>;
  is_public?: Maybe<Boolean>;
  members?: Maybe<MembershipUpdateManyWithoutGroupInput>;
  messages?: Maybe<MessageUpdateManyInput>;
  tags?: Maybe<String>;
  location?: Maybe<LocationUpdateOneInput>;
}

export interface ProfileUpdateManyDataInput {
  name?: Maybe<String>;
  timezone?: Maybe<String>;
  status?: Maybe<String>;
  picture?: Maybe<String>;
}

export interface MembershipUpdateManyWithoutGroupInput {
  create?: Maybe<
    MembershipCreateWithoutGroupInput[] | MembershipCreateWithoutGroupInput
  >;
  delete?: Maybe<MembershipWhereUniqueInput[] | MembershipWhereUniqueInput>;
  connect?: Maybe<MembershipWhereUniqueInput[] | MembershipWhereUniqueInput>;
  set?: Maybe<MembershipWhereUniqueInput[] | MembershipWhereUniqueInput>;
  disconnect?: Maybe<MembershipWhereUniqueInput[] | MembershipWhereUniqueInput>;
  update?: Maybe<
    | MembershipUpdateWithWhereUniqueWithoutGroupInput[]
    | MembershipUpdateWithWhereUniqueWithoutGroupInput
  >;
  upsert?: Maybe<
    | MembershipUpsertWithWhereUniqueWithoutGroupInput[]
    | MembershipUpsertWithWhereUniqueWithoutGroupInput
  >;
  deleteMany?: Maybe<MembershipScalarWhereInput[] | MembershipScalarWhereInput>;
  updateMany?: Maybe<
    | MembershipUpdateManyWithWhereNestedInput[]
    | MembershipUpdateManyWithWhereNestedInput
  >;
}

export interface PortfolioWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  owner?: Maybe<ProfileWhereInput>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  transactions_every?: Maybe<TransactionWhereInput>;
  transactions_some?: Maybe<TransactionWhereInput>;
  transactions_none?: Maybe<TransactionWhereInput>;
  AND?: Maybe<PortfolioWhereInput[] | PortfolioWhereInput>;
  OR?: Maybe<PortfolioWhereInput[] | PortfolioWhereInput>;
  NOT?: Maybe<PortfolioWhereInput[] | PortfolioWhereInput>;
}

export interface MembershipUpdateWithWhereUniqueWithoutGroupInput {
  where: MembershipWhereUniqueInput;
  data: MembershipUpdateWithoutGroupDataInput;
}

export interface ProfileUpsertWithWhereUniqueNestedInput {
  where: ProfileWhereUniqueInput;
  update: ProfileUpdateDataInput;
  create: ProfileCreateInput;
}

export interface MembershipUpdateWithoutGroupDataInput {
  member?: Maybe<ProfileUpdateOneRequiredWithoutMembershipsInput>;
  show_history?: Maybe<Boolean>;
}

export interface ProfileUpdateManyInput {
  create?: Maybe<ProfileCreateInput[] | ProfileCreateInput>;
  update?: Maybe<
    | ProfileUpdateWithWhereUniqueNestedInput[]
    | ProfileUpdateWithWhereUniqueNestedInput
  >;
  upsert?: Maybe<
    | ProfileUpsertWithWhereUniqueNestedInput[]
    | ProfileUpsertWithWhereUniqueNestedInput
  >;
  delete?: Maybe<ProfileWhereUniqueInput[] | ProfileWhereUniqueInput>;
  connect?: Maybe<ProfileWhereUniqueInput[] | ProfileWhereUniqueInput>;
  set?: Maybe<ProfileWhereUniqueInput[] | ProfileWhereUniqueInput>;
  disconnect?: Maybe<ProfileWhereUniqueInput[] | ProfileWhereUniqueInput>;
  deleteMany?: Maybe<ProfileScalarWhereInput[] | ProfileScalarWhereInput>;
  updateMany?: Maybe<
    | ProfileUpdateManyWithWhereNestedInput[]
    | ProfileUpdateManyWithWhereNestedInput
  >;
}

export interface ProfileUpdateOneRequiredWithoutMembershipsInput {
  create?: Maybe<ProfileCreateWithoutMembershipsInput>;
  update?: Maybe<ProfileUpdateWithoutMembershipsDataInput>;
  upsert?: Maybe<ProfileUpsertWithoutMembershipsInput>;
  connect?: Maybe<ProfileWhereUniqueInput>;
}

export interface UserUpdateWithoutSessionsDataInput {
  name?: Maybe<String>;
  timezone?: Maybe<String>;
  email?: Maybe<String>;
  password_salt?: Maybe<String>;
  password_hash?: Maybe<String>;
  is_verified?: Maybe<Boolean>;
  challenge?: Maybe<String>;
  profiles?: Maybe<ProfileUpdateManyInput>;
  lastUsedProfileId?: Maybe<String>;
}

export interface ProfileUpdateWithoutMembershipsDataInput {
  name?: Maybe<String>;
  timezone?: Maybe<String>;
  status?: Maybe<String>;
  picture?: Maybe<String>;
  location?: Maybe<LocationUpdateOneInput>;
}

export interface SessionUpdateInput {
  csrfToken?: Maybe<String>;
  authToken?: Maybe<String>;
  validTo?: Maybe<DateTimeInput>;
  timedOut?: Maybe<DateTimeInput>;
  loggedOut?: Maybe<DateTimeInput>;
  user?: Maybe<UserUpdateOneRequiredWithoutSessionsInput>;
  profile?: Maybe<ProfileUpdateOneInput>;
}

export interface LocationUpdateOneInput {
  create?: Maybe<LocationCreateInput>;
  update?: Maybe<LocationUpdateDataInput>;
  upsert?: Maybe<LocationUpsertNestedInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<LocationWhereUniqueInput>;
}

export type ReactionWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface LocationUpdateDataInput {
  name?: Maybe<String>;
  latitude?: Maybe<Float>;
  longitude?: Maybe<Float>;
  radius?: Maybe<Float>;
}

export interface UserCreateOneWithoutSessionsInput {
  create?: Maybe<UserCreateWithoutSessionsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface TransactionUpdateDataInput {
  timestamp?: Maybe<DateTimeInput>;
  profile?: Maybe<ProfileUpdateOneRequiredInput>;
  asset?: Maybe<AssetUpdateOneRequiredInput>;
  direction?: Maybe<TransactionDirection>;
  exchange?: Maybe<ExchangeUpdateOneRequiredInput>;
  amount?: Maybe<Float>;
}

export type SessionWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  csrfToken?: Maybe<String>;
  authToken?: Maybe<String>;
}>;

export interface ProfileUpsertWithoutMembershipsInput {
  update: ProfileUpdateWithoutMembershipsDataInput;
  create: ProfileCreateWithoutMembershipsInput;
}

export interface ReactionUpdateInput {
  creator?: Maybe<ProfileUpdateOneRequiredInput>;
  emoji?: Maybe<String>;
}

export interface MembershipUpsertWithWhereUniqueWithoutGroupInput {
  where: MembershipWhereUniqueInput;
  update: MembershipUpdateWithoutGroupDataInput;
  create: MembershipCreateWithoutGroupInput;
}

export interface UserWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  timezone?: Maybe<String>;
  timezone_not?: Maybe<String>;
  timezone_in?: Maybe<String[] | String>;
  timezone_not_in?: Maybe<String[] | String>;
  timezone_lt?: Maybe<String>;
  timezone_lte?: Maybe<String>;
  timezone_gt?: Maybe<String>;
  timezone_gte?: Maybe<String>;
  timezone_contains?: Maybe<String>;
  timezone_not_contains?: Maybe<String>;
  timezone_starts_with?: Maybe<String>;
  timezone_not_starts_with?: Maybe<String>;
  timezone_ends_with?: Maybe<String>;
  timezone_not_ends_with?: Maybe<String>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  password_salt?: Maybe<String>;
  password_salt_not?: Maybe<String>;
  password_salt_in?: Maybe<String[] | String>;
  password_salt_not_in?: Maybe<String[] | String>;
  password_salt_lt?: Maybe<String>;
  password_salt_lte?: Maybe<String>;
  password_salt_gt?: Maybe<String>;
  password_salt_gte?: Maybe<String>;
  password_salt_contains?: Maybe<String>;
  password_salt_not_contains?: Maybe<String>;
  password_salt_starts_with?: Maybe<String>;
  password_salt_not_starts_with?: Maybe<String>;
  password_salt_ends_with?: Maybe<String>;
  password_salt_not_ends_with?: Maybe<String>;
  password_hash?: Maybe<String>;
  password_hash_not?: Maybe<String>;
  password_hash_in?: Maybe<String[] | String>;
  password_hash_not_in?: Maybe<String[] | String>;
  password_hash_lt?: Maybe<String>;
  password_hash_lte?: Maybe<String>;
  password_hash_gt?: Maybe<String>;
  password_hash_gte?: Maybe<String>;
  password_hash_contains?: Maybe<String>;
  password_hash_not_contains?: Maybe<String>;
  password_hash_starts_with?: Maybe<String>;
  password_hash_not_starts_with?: Maybe<String>;
  password_hash_ends_with?: Maybe<String>;
  password_hash_not_ends_with?: Maybe<String>;
  is_verified?: Maybe<Boolean>;
  is_verified_not?: Maybe<Boolean>;
  challenge?: Maybe<String>;
  challenge_not?: Maybe<String>;
  challenge_in?: Maybe<String[] | String>;
  challenge_not_in?: Maybe<String[] | String>;
  challenge_lt?: Maybe<String>;
  challenge_lte?: Maybe<String>;
  challenge_gt?: Maybe<String>;
  challenge_gte?: Maybe<String>;
  challenge_contains?: Maybe<String>;
  challenge_not_contains?: Maybe<String>;
  challenge_starts_with?: Maybe<String>;
  challenge_not_starts_with?: Maybe<String>;
  challenge_ends_with?: Maybe<String>;
  challenge_not_ends_with?: Maybe<String>;
  profiles_every?: Maybe<ProfileWhereInput>;
  profiles_some?: Maybe<ProfileWhereInput>;
  profiles_none?: Maybe<ProfileWhereInput>;
  sessions_every?: Maybe<SessionWhereInput>;
  sessions_some?: Maybe<SessionWhereInput>;
  sessions_none?: Maybe<SessionWhereInput>;
  lastUsedProfileId?: Maybe<String>;
  lastUsedProfileId_not?: Maybe<String>;
  lastUsedProfileId_in?: Maybe<String[] | String>;
  lastUsedProfileId_not_in?: Maybe<String[] | String>;
  lastUsedProfileId_lt?: Maybe<String>;
  lastUsedProfileId_lte?: Maybe<String>;
  lastUsedProfileId_gt?: Maybe<String>;
  lastUsedProfileId_gte?: Maybe<String>;
  lastUsedProfileId_contains?: Maybe<String>;
  lastUsedProfileId_not_contains?: Maybe<String>;
  lastUsedProfileId_starts_with?: Maybe<String>;
  lastUsedProfileId_not_starts_with?: Maybe<String>;
  lastUsedProfileId_ends_with?: Maybe<String>;
  lastUsedProfileId_not_ends_with?: Maybe<String>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
  OR?: Maybe<UserWhereInput[] | UserWhereInput>;
  NOT?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export interface MembershipScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  show_history?: Maybe<Boolean>;
  show_history_not?: Maybe<Boolean>;
  AND?: Maybe<MembershipScalarWhereInput[] | MembershipScalarWhereInput>;
  OR?: Maybe<MembershipScalarWhereInput[] | MembershipScalarWhereInput>;
  NOT?: Maybe<MembershipScalarWhereInput[] | MembershipScalarWhereInput>;
}

export interface ProfileUpdateManyMutationInput {
  name?: Maybe<String>;
  timezone?: Maybe<String>;
  status?: Maybe<String>;
  picture?: Maybe<String>;
}

export interface MembershipUpdateManyWithWhereNestedInput {
  where: MembershipScalarWhereInput;
  data: MembershipUpdateManyDataInput;
}

export interface PortfolioUpdateManyMutationInput {
  name?: Maybe<String>;
}

export interface MembershipUpdateManyDataInput {
  show_history?: Maybe<Boolean>;
}

export interface TransactionUpdateManyDataInput {
  timestamp?: Maybe<DateTimeInput>;
  direction?: Maybe<TransactionDirection>;
  amount?: Maybe<Float>;
}

export interface MessageUpdateManyInput {
  create?: Maybe<MessageCreateInput[] | MessageCreateInput>;
  update?: Maybe<
    | MessageUpdateWithWhereUniqueNestedInput[]
    | MessageUpdateWithWhereUniqueNestedInput
  >;
  upsert?: Maybe<
    | MessageUpsertWithWhereUniqueNestedInput[]
    | MessageUpsertWithWhereUniqueNestedInput
  >;
  delete?: Maybe<MessageWhereUniqueInput[] | MessageWhereUniqueInput>;
  connect?: Maybe<MessageWhereUniqueInput[] | MessageWhereUniqueInput>;
  set?: Maybe<MessageWhereUniqueInput[] | MessageWhereUniqueInput>;
  disconnect?: Maybe<MessageWhereUniqueInput[] | MessageWhereUniqueInput>;
  deleteMany?: Maybe<MessageScalarWhereInput[] | MessageScalarWhereInput>;
  updateMany?: Maybe<
    | MessageUpdateManyWithWhereNestedInput[]
    | MessageUpdateManyWithWhereNestedInput
  >;
}

export interface TransactionScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  timestamp?: Maybe<DateTimeInput>;
  timestamp_not?: Maybe<DateTimeInput>;
  timestamp_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  timestamp_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  timestamp_lt?: Maybe<DateTimeInput>;
  timestamp_lte?: Maybe<DateTimeInput>;
  timestamp_gt?: Maybe<DateTimeInput>;
  timestamp_gte?: Maybe<DateTimeInput>;
  direction?: Maybe<TransactionDirection>;
  direction_not?: Maybe<TransactionDirection>;
  direction_in?: Maybe<TransactionDirection[] | TransactionDirection>;
  direction_not_in?: Maybe<TransactionDirection[] | TransactionDirection>;
  amount?: Maybe<Float>;
  amount_not?: Maybe<Float>;
  amount_in?: Maybe<Float[] | Float>;
  amount_not_in?: Maybe<Float[] | Float>;
  amount_lt?: Maybe<Float>;
  amount_lte?: Maybe<Float>;
  amount_gt?: Maybe<Float>;
  amount_gte?: Maybe<Float>;
  AND?: Maybe<TransactionScalarWhereInput[] | TransactionScalarWhereInput>;
  OR?: Maybe<TransactionScalarWhereInput[] | TransactionScalarWhereInput>;
  NOT?: Maybe<TransactionScalarWhereInput[] | TransactionScalarWhereInput>;
}

export interface MessageUpdateWithWhereUniqueNestedInput {
  where: MessageWhereUniqueInput;
  data: MessageUpdateDataInput;
}

export interface TransactionUpsertWithWhereUniqueNestedInput {
  where: TransactionWhereUniqueInput;
  update: TransactionUpdateDataInput;
  create: TransactionCreateInput;
}

export interface MessageUpdateDataInput {
  sender?: Maybe<ProfileUpdateOneRequiredInput>;
  type?: Maybe<MessageType>;
  parent?: Maybe<MessageUpdateOneInput>;
  subject?: Maybe<String>;
  content?: Maybe<Json>;
  attachments?: Maybe<AttachmentUpdateManyInput>;
  reactions?: Maybe<ReactionUpdateManyInput>;
  tags?: Maybe<String>;
  location?: Maybe<LocationUpdateOneInput>;
}

export interface ExchangeUpdateDataInput {
  name?: Maybe<String>;
  assets?: Maybe<AssetUpdateManyInput>;
}

export interface MessageUpdateOneInput {
  create?: Maybe<MessageCreateInput>;
  update?: Maybe<MessageUpdateDataInput>;
  upsert?: Maybe<MessageUpsertNestedInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<MessageWhereUniqueInput>;
}

export interface AssetUpdateInput {
  name?: Maybe<String>;
}

export interface TransactionUpdateWithWhereUniqueNestedInput {
  where: TransactionWhereUniqueInput;
  data: TransactionUpdateDataInput;
}

export interface AssetUpsertNestedInput {
  update: AssetUpdateDataInput;
  create: AssetCreateInput;
}

export interface LocationWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  latitude?: Maybe<Float>;
  latitude_not?: Maybe<Float>;
  latitude_in?: Maybe<Float[] | Float>;
  latitude_not_in?: Maybe<Float[] | Float>;
  latitude_lt?: Maybe<Float>;
  latitude_lte?: Maybe<Float>;
  latitude_gt?: Maybe<Float>;
  latitude_gte?: Maybe<Float>;
  longitude?: Maybe<Float>;
  longitude_not?: Maybe<Float>;
  longitude_in?: Maybe<Float[] | Float>;
  longitude_not_in?: Maybe<Float[] | Float>;
  longitude_lt?: Maybe<Float>;
  longitude_lte?: Maybe<Float>;
  longitude_gt?: Maybe<Float>;
  longitude_gte?: Maybe<Float>;
  radius?: Maybe<Float>;
  radius_not?: Maybe<Float>;
  radius_in?: Maybe<Float[] | Float>;
  radius_not_in?: Maybe<Float[] | Float>;
  radius_lt?: Maybe<Float>;
  radius_lte?: Maybe<Float>;
  radius_gt?: Maybe<Float>;
  radius_gte?: Maybe<Float>;
  AND?: Maybe<LocationWhereInput[] | LocationWhereInput>;
  OR?: Maybe<LocationWhereInput[] | LocationWhereInput>;
  NOT?: Maybe<LocationWhereInput[] | LocationWhereInput>;
}

export interface AttachmentCreateInput {
  id?: Maybe<ID_Input>;
  createdBy: ProfileCreateOneInput;
  name: String;
  type: AttachmentType;
  link?: Maybe<String>;
  tags?: Maybe<String>;
  location?: Maybe<LocationCreateOneInput>;
}

export interface ProfileWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  timezone?: Maybe<String>;
  timezone_not?: Maybe<String>;
  timezone_in?: Maybe<String[] | String>;
  timezone_not_in?: Maybe<String[] | String>;
  timezone_lt?: Maybe<String>;
  timezone_lte?: Maybe<String>;
  timezone_gt?: Maybe<String>;
  timezone_gte?: Maybe<String>;
  timezone_contains?: Maybe<String>;
  timezone_not_contains?: Maybe<String>;
  timezone_starts_with?: Maybe<String>;
  timezone_not_starts_with?: Maybe<String>;
  timezone_ends_with?: Maybe<String>;
  timezone_not_ends_with?: Maybe<String>;
  status?: Maybe<String>;
  status_not?: Maybe<String>;
  status_in?: Maybe<String[] | String>;
  status_not_in?: Maybe<String[] | String>;
  status_lt?: Maybe<String>;
  status_lte?: Maybe<String>;
  status_gt?: Maybe<String>;
  status_gte?: Maybe<String>;
  status_contains?: Maybe<String>;
  status_not_contains?: Maybe<String>;
  status_starts_with?: Maybe<String>;
  status_not_starts_with?: Maybe<String>;
  status_ends_with?: Maybe<String>;
  status_not_ends_with?: Maybe<String>;
  picture?: Maybe<String>;
  picture_not?: Maybe<String>;
  picture_in?: Maybe<String[] | String>;
  picture_not_in?: Maybe<String[] | String>;
  picture_lt?: Maybe<String>;
  picture_lte?: Maybe<String>;
  picture_gt?: Maybe<String>;
  picture_gte?: Maybe<String>;
  picture_contains?: Maybe<String>;
  picture_not_contains?: Maybe<String>;
  picture_starts_with?: Maybe<String>;
  picture_not_starts_with?: Maybe<String>;
  picture_ends_with?: Maybe<String>;
  picture_not_ends_with?: Maybe<String>;
  memberships_every?: Maybe<MembershipWhereInput>;
  memberships_some?: Maybe<MembershipWhereInput>;
  memberships_none?: Maybe<MembershipWhereInput>;
  location?: Maybe<LocationWhereInput>;
  AND?: Maybe<ProfileWhereInput[] | ProfileWhereInput>;
  OR?: Maybe<ProfileWhereInput[] | ProfileWhereInput>;
  NOT?: Maybe<ProfileWhereInput[] | ProfileWhereInput>;
}

export interface ProfileCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  timezone?: Maybe<String>;
  status?: Maybe<String>;
  picture: String;
  memberships?: Maybe<MembershipCreateManyWithoutMemberInput>;
  location?: Maybe<LocationCreateOneInput>;
}

export interface MembershipWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  member?: Maybe<ProfileWhereInput>;
  group?: Maybe<GroupWhereInput>;
  show_history?: Maybe<Boolean>;
  show_history_not?: Maybe<Boolean>;
  AND?: Maybe<MembershipWhereInput[] | MembershipWhereInput>;
  OR?: Maybe<MembershipWhereInput[] | MembershipWhereInput>;
  NOT?: Maybe<MembershipWhereInput[] | MembershipWhereInput>;
}

export interface MembershipCreateWithoutMemberInput {
  id?: Maybe<ID_Input>;
  group: GroupCreateOneWithoutMembersInput;
  show_history: Boolean;
}

export interface TransactionUpdateManyInput {
  create?: Maybe<TransactionCreateInput[] | TransactionCreateInput>;
  update?: Maybe<
    | TransactionUpdateWithWhereUniqueNestedInput[]
    | TransactionUpdateWithWhereUniqueNestedInput
  >;
  upsert?: Maybe<
    | TransactionUpsertWithWhereUniqueNestedInput[]
    | TransactionUpsertWithWhereUniqueNestedInput
  >;
  delete?: Maybe<TransactionWhereUniqueInput[] | TransactionWhereUniqueInput>;
  connect?: Maybe<TransactionWhereUniqueInput[] | TransactionWhereUniqueInput>;
  set?: Maybe<TransactionWhereUniqueInput[] | TransactionWhereUniqueInput>;
  disconnect?: Maybe<
    TransactionWhereUniqueInput[] | TransactionWhereUniqueInput
  >;
  deleteMany?: Maybe<
    TransactionScalarWhereInput[] | TransactionScalarWhereInput
  >;
  updateMany?: Maybe<
    | TransactionUpdateManyWithWhereNestedInput[]
    | TransactionUpdateManyWithWhereNestedInput
  >;
}

export interface GroupCreateWithoutMembersInput {
  id?: Maybe<ID_Input>;
  host: ProfileCreateOneInput;
  name: String;
  title: String;
  description: String;
  logo: String;
  type: GroupType;
  parent?: Maybe<GroupCreateOneInput>;
  is_hidden: Boolean;
  is_public: Boolean;
  messages?: Maybe<MessageCreateManyInput>;
  tags?: Maybe<String>;
  location?: Maybe<LocationCreateOneInput>;
}

export interface AttachmentScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  type?: Maybe<AttachmentType>;
  type_not?: Maybe<AttachmentType>;
  type_in?: Maybe<AttachmentType[] | AttachmentType>;
  type_not_in?: Maybe<AttachmentType[] | AttachmentType>;
  link?: Maybe<String>;
  link_not?: Maybe<String>;
  link_in?: Maybe<String[] | String>;
  link_not_in?: Maybe<String[] | String>;
  link_lt?: Maybe<String>;
  link_lte?: Maybe<String>;
  link_gt?: Maybe<String>;
  link_gte?: Maybe<String>;
  link_contains?: Maybe<String>;
  link_not_contains?: Maybe<String>;
  link_starts_with?: Maybe<String>;
  link_not_starts_with?: Maybe<String>;
  link_ends_with?: Maybe<String>;
  link_not_ends_with?: Maybe<String>;
  tags?: Maybe<String>;
  tags_not?: Maybe<String>;
  tags_in?: Maybe<String[] | String>;
  tags_not_in?: Maybe<String[] | String>;
  tags_lt?: Maybe<String>;
  tags_lte?: Maybe<String>;
  tags_gt?: Maybe<String>;
  tags_gte?: Maybe<String>;
  tags_contains?: Maybe<String>;
  tags_not_contains?: Maybe<String>;
  tags_starts_with?: Maybe<String>;
  tags_not_starts_with?: Maybe<String>;
  tags_ends_with?: Maybe<String>;
  tags_not_ends_with?: Maybe<String>;
  AND?: Maybe<AttachmentScalarWhereInput[] | AttachmentScalarWhereInput>;
  OR?: Maybe<AttachmentScalarWhereInput[] | AttachmentScalarWhereInput>;
  NOT?: Maybe<AttachmentScalarWhereInput[] | AttachmentScalarWhereInput>;
}

export interface GroupCreateInput {
  id?: Maybe<ID_Input>;
  host: ProfileCreateOneInput;
  name: String;
  title: String;
  description: String;
  logo: String;
  type: GroupType;
  parent?: Maybe<GroupCreateOneInput>;
  is_hidden: Boolean;
  is_public: Boolean;
  members?: Maybe<MembershipCreateManyWithoutGroupInput>;
  messages?: Maybe<MessageCreateManyInput>;
  tags?: Maybe<String>;
  location?: Maybe<LocationCreateOneInput>;
}

export interface AttachmentUpdateManyWithWhereNestedInput {
  where: AttachmentScalarWhereInput;
  data: AttachmentUpdateManyDataInput;
}

export interface SessionSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<SessionWhereInput>;
  AND?: Maybe<SessionSubscriptionWhereInput[] | SessionSubscriptionWhereInput>;
  OR?: Maybe<SessionSubscriptionWhereInput[] | SessionSubscriptionWhereInput>;
  NOT?: Maybe<SessionSubscriptionWhereInput[] | SessionSubscriptionWhereInput>;
}

export interface AttachmentUpdateManyDataInput {
  name?: Maybe<String>;
  type?: Maybe<AttachmentType>;
  link?: Maybe<String>;
  tags?: Maybe<String>;
}

export interface MessageSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<MessageWhereInput>;
  AND?: Maybe<MessageSubscriptionWhereInput[] | MessageSubscriptionWhereInput>;
  OR?: Maybe<MessageSubscriptionWhereInput[] | MessageSubscriptionWhereInput>;
  NOT?: Maybe<MessageSubscriptionWhereInput[] | MessageSubscriptionWhereInput>;
}

export interface ReactionUpdateManyInput {
  create?: Maybe<ReactionCreateInput[] | ReactionCreateInput>;
  update?: Maybe<
    | ReactionUpdateWithWhereUniqueNestedInput[]
    | ReactionUpdateWithWhereUniqueNestedInput
  >;
  upsert?: Maybe<
    | ReactionUpsertWithWhereUniqueNestedInput[]
    | ReactionUpsertWithWhereUniqueNestedInput
  >;
  delete?: Maybe<ReactionWhereUniqueInput[] | ReactionWhereUniqueInput>;
  connect?: Maybe<ReactionWhereUniqueInput[] | ReactionWhereUniqueInput>;
  set?: Maybe<ReactionWhereUniqueInput[] | ReactionWhereUniqueInput>;
  disconnect?: Maybe<ReactionWhereUniqueInput[] | ReactionWhereUniqueInput>;
  deleteMany?: Maybe<ReactionScalarWhereInput[] | ReactionScalarWhereInput>;
  updateMany?: Maybe<
    | ReactionUpdateManyWithWhereNestedInput[]
    | ReactionUpdateManyWithWhereNestedInput
  >;
}

export type ExchangeWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface ReactionUpdateWithWhereUniqueNestedInput {
  where: ReactionWhereUniqueInput;
  data: ReactionUpdateDataInput;
}

export interface AttachmentSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<AttachmentWhereInput>;
  AND?: Maybe<
    AttachmentSubscriptionWhereInput[] | AttachmentSubscriptionWhereInput
  >;
  OR?: Maybe<
    AttachmentSubscriptionWhereInput[] | AttachmentSubscriptionWhereInput
  >;
  NOT?: Maybe<
    AttachmentSubscriptionWhereInput[] | AttachmentSubscriptionWhereInput
  >;
}

export interface ReactionUpdateDataInput {
  creator?: Maybe<ProfileUpdateOneRequiredInput>;
  emoji?: Maybe<String>;
}

export interface SessionUpdateManyDataInput {
  csrfToken?: Maybe<String>;
  authToken?: Maybe<String>;
  validTo?: Maybe<DateTimeInput>;
  timedOut?: Maybe<DateTimeInput>;
  loggedOut?: Maybe<DateTimeInput>;
}

export interface ReactionUpsertWithWhereUniqueNestedInput {
  where: ReactionWhereUniqueInput;
  update: ReactionUpdateDataInput;
  create: ReactionCreateInput;
}

export type LocationWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface ReactionScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  emoji?: Maybe<String>;
  emoji_not?: Maybe<String>;
  emoji_in?: Maybe<String[] | String>;
  emoji_not_in?: Maybe<String[] | String>;
  emoji_lt?: Maybe<String>;
  emoji_lte?: Maybe<String>;
  emoji_gt?: Maybe<String>;
  emoji_gte?: Maybe<String>;
  emoji_contains?: Maybe<String>;
  emoji_not_contains?: Maybe<String>;
  emoji_starts_with?: Maybe<String>;
  emoji_not_starts_with?: Maybe<String>;
  emoji_ends_with?: Maybe<String>;
  emoji_not_ends_with?: Maybe<String>;
  AND?: Maybe<ReactionScalarWhereInput[] | ReactionScalarWhereInput>;
  OR?: Maybe<ReactionScalarWhereInput[] | ReactionScalarWhereInput>;
  NOT?: Maybe<ReactionScalarWhereInput[] | ReactionScalarWhereInput>;
}

export interface UserUpdateInput {
  name?: Maybe<String>;
  timezone?: Maybe<String>;
  email?: Maybe<String>;
  password_salt?: Maybe<String>;
  password_hash?: Maybe<String>;
  is_verified?: Maybe<Boolean>;
  challenge?: Maybe<String>;
  profiles?: Maybe<ProfileUpdateManyInput>;
  sessions?: Maybe<SessionUpdateManyWithoutUserInput>;
  lastUsedProfileId?: Maybe<String>;
}

export interface ReactionUpdateManyWithWhereNestedInput {
  where: ReactionScalarWhereInput;
  data: ReactionUpdateManyDataInput;
}

export interface UserCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  timezone: String;
  email: String;
  password_salt: String;
  password_hash: String;
  is_verified: Boolean;
  challenge?: Maybe<String>;
  profiles?: Maybe<ProfileCreateManyInput>;
  sessions?: Maybe<SessionCreateManyWithoutUserInput>;
  lastUsedProfileId?: Maybe<String>;
}

export interface ReactionUpdateManyDataInput {
  emoji?: Maybe<String>;
}

export interface SessionUpdateManyMutationInput {
  csrfToken?: Maybe<String>;
  authToken?: Maybe<String>;
  validTo?: Maybe<DateTimeInput>;
  timedOut?: Maybe<DateTimeInput>;
  loggedOut?: Maybe<DateTimeInput>;
}

export interface MessageUpsertWithWhereUniqueNestedInput {
  where: MessageWhereUniqueInput;
  update: MessageUpdateDataInput;
  create: MessageCreateInput;
}

export interface UserUpsertWithoutSessionsInput {
  update: UserUpdateWithoutSessionsDataInput;
  create: UserCreateWithoutSessionsInput;
}

export interface MessageScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  type?: Maybe<MessageType>;
  type_not?: Maybe<MessageType>;
  type_in?: Maybe<MessageType[] | MessageType>;
  type_not_in?: Maybe<MessageType[] | MessageType>;
  subject?: Maybe<String>;
  subject_not?: Maybe<String>;
  subject_in?: Maybe<String[] | String>;
  subject_not_in?: Maybe<String[] | String>;
  subject_lt?: Maybe<String>;
  subject_lte?: Maybe<String>;
  subject_gt?: Maybe<String>;
  subject_gte?: Maybe<String>;
  subject_contains?: Maybe<String>;
  subject_not_contains?: Maybe<String>;
  subject_starts_with?: Maybe<String>;
  subject_not_starts_with?: Maybe<String>;
  subject_ends_with?: Maybe<String>;
  subject_not_ends_with?: Maybe<String>;
  tags?: Maybe<String>;
  tags_not?: Maybe<String>;
  tags_in?: Maybe<String[] | String>;
  tags_not_in?: Maybe<String[] | String>;
  tags_lt?: Maybe<String>;
  tags_lte?: Maybe<String>;
  tags_gt?: Maybe<String>;
  tags_gte?: Maybe<String>;
  tags_contains?: Maybe<String>;
  tags_not_contains?: Maybe<String>;
  tags_starts_with?: Maybe<String>;
  tags_not_starts_with?: Maybe<String>;
  tags_ends_with?: Maybe<String>;
  tags_not_ends_with?: Maybe<String>;
  AND?: Maybe<MessageScalarWhereInput[] | MessageScalarWhereInput>;
  OR?: Maybe<MessageScalarWhereInput[] | MessageScalarWhereInput>;
  NOT?: Maybe<MessageScalarWhereInput[] | MessageScalarWhereInput>;
}

export interface ProfileScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  timezone?: Maybe<String>;
  timezone_not?: Maybe<String>;
  timezone_in?: Maybe<String[] | String>;
  timezone_not_in?: Maybe<String[] | String>;
  timezone_lt?: Maybe<String>;
  timezone_lte?: Maybe<String>;
  timezone_gt?: Maybe<String>;
  timezone_gte?: Maybe<String>;
  timezone_contains?: Maybe<String>;
  timezone_not_contains?: Maybe<String>;
  timezone_starts_with?: Maybe<String>;
  timezone_not_starts_with?: Maybe<String>;
  timezone_ends_with?: Maybe<String>;
  timezone_not_ends_with?: Maybe<String>;
  status?: Maybe<String>;
  status_not?: Maybe<String>;
  status_in?: Maybe<String[] | String>;
  status_not_in?: Maybe<String[] | String>;
  status_lt?: Maybe<String>;
  status_lte?: Maybe<String>;
  status_gt?: Maybe<String>;
  status_gte?: Maybe<String>;
  status_contains?: Maybe<String>;
  status_not_contains?: Maybe<String>;
  status_starts_with?: Maybe<String>;
  status_not_starts_with?: Maybe<String>;
  status_ends_with?: Maybe<String>;
  status_not_ends_with?: Maybe<String>;
  picture?: Maybe<String>;
  picture_not?: Maybe<String>;
  picture_in?: Maybe<String[] | String>;
  picture_not_in?: Maybe<String[] | String>;
  picture_lt?: Maybe<String>;
  picture_lte?: Maybe<String>;
  picture_gt?: Maybe<String>;
  picture_gte?: Maybe<String>;
  picture_contains?: Maybe<String>;
  picture_not_contains?: Maybe<String>;
  picture_starts_with?: Maybe<String>;
  picture_not_starts_with?: Maybe<String>;
  picture_ends_with?: Maybe<String>;
  picture_not_ends_with?: Maybe<String>;
  AND?: Maybe<ProfileScalarWhereInput[] | ProfileScalarWhereInput>;
  OR?: Maybe<ProfileScalarWhereInput[] | ProfileScalarWhereInput>;
  NOT?: Maybe<ProfileScalarWhereInput[] | ProfileScalarWhereInput>;
}

export interface MessageUpdateManyWithWhereNestedInput {
  where: MessageScalarWhereInput;
  data: MessageUpdateManyDataInput;
}

export type ProfileWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface MessageUpdateManyDataInput {
  type?: Maybe<MessageType>;
  subject?: Maybe<String>;
  content?: Maybe<Json>;
  tags?: Maybe<String>;
}

export interface ProfileCreateManyInput {
  create?: Maybe<ProfileCreateInput[] | ProfileCreateInput>;
  connect?: Maybe<ProfileWhereUniqueInput[] | ProfileWhereUniqueInput>;
}

export interface GroupUpsertNestedInput {
  update: GroupUpdateDataInput;
  create: GroupCreateInput;
}

export interface SessionCreateInput {
  id?: Maybe<ID_Input>;
  csrfToken: String;
  authToken: String;
  validTo: DateTimeInput;
  timedOut?: Maybe<DateTimeInput>;
  loggedOut?: Maybe<DateTimeInput>;
  user: UserCreateOneWithoutSessionsInput;
  profile?: Maybe<ProfileCreateOneInput>;
}

export interface GroupUpsertWithoutMembersInput {
  update: GroupUpdateWithoutMembersDataInput;
  create: GroupCreateWithoutMembersInput;
}

export interface SessionWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  csrfToken?: Maybe<String>;
  csrfToken_not?: Maybe<String>;
  csrfToken_in?: Maybe<String[] | String>;
  csrfToken_not_in?: Maybe<String[] | String>;
  csrfToken_lt?: Maybe<String>;
  csrfToken_lte?: Maybe<String>;
  csrfToken_gt?: Maybe<String>;
  csrfToken_gte?: Maybe<String>;
  csrfToken_contains?: Maybe<String>;
  csrfToken_not_contains?: Maybe<String>;
  csrfToken_starts_with?: Maybe<String>;
  csrfToken_not_starts_with?: Maybe<String>;
  csrfToken_ends_with?: Maybe<String>;
  csrfToken_not_ends_with?: Maybe<String>;
  authToken?: Maybe<String>;
  authToken_not?: Maybe<String>;
  authToken_in?: Maybe<String[] | String>;
  authToken_not_in?: Maybe<String[] | String>;
  authToken_lt?: Maybe<String>;
  authToken_lte?: Maybe<String>;
  authToken_gt?: Maybe<String>;
  authToken_gte?: Maybe<String>;
  authToken_contains?: Maybe<String>;
  authToken_not_contains?: Maybe<String>;
  authToken_starts_with?: Maybe<String>;
  authToken_not_starts_with?: Maybe<String>;
  authToken_ends_with?: Maybe<String>;
  authToken_not_ends_with?: Maybe<String>;
  validTo?: Maybe<DateTimeInput>;
  validTo_not?: Maybe<DateTimeInput>;
  validTo_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  validTo_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  validTo_lt?: Maybe<DateTimeInput>;
  validTo_lte?: Maybe<DateTimeInput>;
  validTo_gt?: Maybe<DateTimeInput>;
  validTo_gte?: Maybe<DateTimeInput>;
  timedOut?: Maybe<DateTimeInput>;
  timedOut_not?: Maybe<DateTimeInput>;
  timedOut_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  timedOut_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  timedOut_lt?: Maybe<DateTimeInput>;
  timedOut_lte?: Maybe<DateTimeInput>;
  timedOut_gt?: Maybe<DateTimeInput>;
  timedOut_gte?: Maybe<DateTimeInput>;
  loggedOut?: Maybe<DateTimeInput>;
  loggedOut_not?: Maybe<DateTimeInput>;
  loggedOut_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  loggedOut_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  loggedOut_lt?: Maybe<DateTimeInput>;
  loggedOut_lte?: Maybe<DateTimeInput>;
  loggedOut_gt?: Maybe<DateTimeInput>;
  loggedOut_gte?: Maybe<DateTimeInput>;
  user?: Maybe<UserWhereInput>;
  profile?: Maybe<ProfileWhereInput>;
  AND?: Maybe<SessionWhereInput[] | SessionWhereInput>;
  OR?: Maybe<SessionWhereInput[] | SessionWhereInput>;
  NOT?: Maybe<SessionWhereInput[] | SessionWhereInput>;
}

export interface MembershipUpsertWithWhereUniqueWithoutMemberInput {
  where: MembershipWhereUniqueInput;
  update: MembershipUpdateWithoutMemberDataInput;
  create: MembershipCreateWithoutMemberInput;
}

export interface ProfileUpdateInput {
  name?: Maybe<String>;
  timezone?: Maybe<String>;
  status?: Maybe<String>;
  picture?: Maybe<String>;
  memberships?: Maybe<MembershipUpdateManyWithoutMemberInput>;
  location?: Maybe<LocationUpdateOneInput>;
}

export interface ProfileUpsertNestedInput {
  update: ProfileUpdateDataInput;
  create: ProfileCreateInput;
}

export interface TransactionUpdateManyWithWhereNestedInput {
  where: TransactionScalarWhereInput;
  data: TransactionUpdateManyDataInput;
}

export interface AttachmentUpdateManyMutationInput {
  name?: Maybe<String>;
  type?: Maybe<AttachmentType>;
  link?: Maybe<String>;
  tags?: Maybe<String>;
}

export interface ExchangeUpsertNestedInput {
  update: ExchangeUpdateDataInput;
  create: ExchangeCreateInput;
}

export interface ExchangeCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  assets?: Maybe<AssetCreateManyInput>;
}

export interface AssetCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
}

export interface AssetCreateManyInput {
  create?: Maybe<AssetCreateInput[] | AssetCreateInput>;
  connect?: Maybe<AssetWhereUniqueInput[] | AssetWhereUniqueInput>;
}

export interface AssetUpdateOneRequiredInput {
  create?: Maybe<AssetCreateInput>;
  update?: Maybe<AssetUpdateDataInput>;
  upsert?: Maybe<AssetUpsertNestedInput>;
  connect?: Maybe<AssetWhereUniqueInput>;
}

export interface ExchangeUpdateInput {
  name?: Maybe<String>;
  assets?: Maybe<AssetUpdateManyInput>;
}

export interface MembershipCreateManyWithoutMemberInput {
  create?: Maybe<
    MembershipCreateWithoutMemberInput[] | MembershipCreateWithoutMemberInput
  >;
  connect?: Maybe<MembershipWhereUniqueInput[] | MembershipWhereUniqueInput>;
}

export interface AssetUpdateManyInput {
  create?: Maybe<AssetCreateInput[] | AssetCreateInput>;
  update?: Maybe<
    | AssetUpdateWithWhereUniqueNestedInput[]
    | AssetUpdateWithWhereUniqueNestedInput
  >;
  upsert?: Maybe<
    | AssetUpsertWithWhereUniqueNestedInput[]
    | AssetUpsertWithWhereUniqueNestedInput
  >;
  delete?: Maybe<AssetWhereUniqueInput[] | AssetWhereUniqueInput>;
  connect?: Maybe<AssetWhereUniqueInput[] | AssetWhereUniqueInput>;
  set?: Maybe<AssetWhereUniqueInput[] | AssetWhereUniqueInput>;
  disconnect?: Maybe<AssetWhereUniqueInput[] | AssetWhereUniqueInput>;
  deleteMany?: Maybe<AssetScalarWhereInput[] | AssetScalarWhereInput>;
  updateMany?: Maybe<
    AssetUpdateManyWithWhereNestedInput[] | AssetUpdateManyWithWhereNestedInput
  >;
}

export interface GroupCreateOneInput {
  create?: Maybe<GroupCreateInput>;
  connect?: Maybe<GroupWhereUniqueInput>;
}

export interface AssetUpdateWithWhereUniqueNestedInput {
  where: AssetWhereUniqueInput;
  data: AssetUpdateDataInput;
}

export interface ProfileSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ProfileWhereInput>;
  AND?: Maybe<ProfileSubscriptionWhereInput[] | ProfileSubscriptionWhereInput>;
  OR?: Maybe<ProfileSubscriptionWhereInput[] | ProfileSubscriptionWhereInput>;
  NOT?: Maybe<ProfileSubscriptionWhereInput[] | ProfileSubscriptionWhereInput>;
}

export interface AssetUpdateDataInput {
  name?: Maybe<String>;
}

export interface ExchangeWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  assets_every?: Maybe<AssetWhereInput>;
  assets_some?: Maybe<AssetWhereInput>;
  assets_none?: Maybe<AssetWhereInput>;
  AND?: Maybe<ExchangeWhereInput[] | ExchangeWhereInput>;
  OR?: Maybe<ExchangeWhereInput[] | ExchangeWhereInput>;
  NOT?: Maybe<ExchangeWhereInput[] | ExchangeWhereInput>;
}

export interface AssetUpsertWithWhereUniqueNestedInput {
  where: AssetWhereUniqueInput;
  update: AssetUpdateDataInput;
  create: AssetCreateInput;
}

export interface SessionScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  csrfToken?: Maybe<String>;
  csrfToken_not?: Maybe<String>;
  csrfToken_in?: Maybe<String[] | String>;
  csrfToken_not_in?: Maybe<String[] | String>;
  csrfToken_lt?: Maybe<String>;
  csrfToken_lte?: Maybe<String>;
  csrfToken_gt?: Maybe<String>;
  csrfToken_gte?: Maybe<String>;
  csrfToken_contains?: Maybe<String>;
  csrfToken_not_contains?: Maybe<String>;
  csrfToken_starts_with?: Maybe<String>;
  csrfToken_not_starts_with?: Maybe<String>;
  csrfToken_ends_with?: Maybe<String>;
  csrfToken_not_ends_with?: Maybe<String>;
  authToken?: Maybe<String>;
  authToken_not?: Maybe<String>;
  authToken_in?: Maybe<String[] | String>;
  authToken_not_in?: Maybe<String[] | String>;
  authToken_lt?: Maybe<String>;
  authToken_lte?: Maybe<String>;
  authToken_gt?: Maybe<String>;
  authToken_gte?: Maybe<String>;
  authToken_contains?: Maybe<String>;
  authToken_not_contains?: Maybe<String>;
  authToken_starts_with?: Maybe<String>;
  authToken_not_starts_with?: Maybe<String>;
  authToken_ends_with?: Maybe<String>;
  authToken_not_ends_with?: Maybe<String>;
  validTo?: Maybe<DateTimeInput>;
  validTo_not?: Maybe<DateTimeInput>;
  validTo_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  validTo_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  validTo_lt?: Maybe<DateTimeInput>;
  validTo_lte?: Maybe<DateTimeInput>;
  validTo_gt?: Maybe<DateTimeInput>;
  validTo_gte?: Maybe<DateTimeInput>;
  timedOut?: Maybe<DateTimeInput>;
  timedOut_not?: Maybe<DateTimeInput>;
  timedOut_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  timedOut_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  timedOut_lt?: Maybe<DateTimeInput>;
  timedOut_lte?: Maybe<DateTimeInput>;
  timedOut_gt?: Maybe<DateTimeInput>;
  timedOut_gte?: Maybe<DateTimeInput>;
  loggedOut?: Maybe<DateTimeInput>;
  loggedOut_not?: Maybe<DateTimeInput>;
  loggedOut_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  loggedOut_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  loggedOut_lt?: Maybe<DateTimeInput>;
  loggedOut_lte?: Maybe<DateTimeInput>;
  loggedOut_gt?: Maybe<DateTimeInput>;
  loggedOut_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<SessionScalarWhereInput[] | SessionScalarWhereInput>;
  OR?: Maybe<SessionScalarWhereInput[] | SessionScalarWhereInput>;
  NOT?: Maybe<SessionScalarWhereInput[] | SessionScalarWhereInput>;
}

export interface AssetScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  AND?: Maybe<AssetScalarWhereInput[] | AssetScalarWhereInput>;
  OR?: Maybe<AssetScalarWhereInput[] | AssetScalarWhereInput>;
  NOT?: Maybe<AssetScalarWhereInput[] | AssetScalarWhereInput>;
}

export interface SessionCreateWithoutUserInput {
  id?: Maybe<ID_Input>;
  csrfToken: String;
  authToken: String;
  validTo: DateTimeInput;
  timedOut?: Maybe<DateTimeInput>;
  loggedOut?: Maybe<DateTimeInput>;
  profile?: Maybe<ProfileCreateOneInput>;
}

export interface AssetUpdateManyWithWhereNestedInput {
  where: AssetScalarWhereInput;
  data: AssetUpdateManyDataInput;
}

export interface ProfileUpdateOneInput {
  create?: Maybe<ProfileCreateInput>;
  update?: Maybe<ProfileUpdateDataInput>;
  upsert?: Maybe<ProfileUpsertNestedInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<ProfileWhereUniqueInput>;
}

export interface AssetUpdateManyDataInput {
  name?: Maybe<String>;
}

export interface ProfileUpdateWithWhereUniqueNestedInput {
  where: ProfileWhereUniqueInput;
  data: ProfileUpdateDataInput;
}

export interface ExchangeUpdateManyMutationInput {
  name?: Maybe<String>;
}

export interface UserCreateWithoutSessionsInput {
  id?: Maybe<ID_Input>;
  name: String;
  timezone: String;
  email: String;
  password_salt: String;
  password_hash: String;
  is_verified: Boolean;
  challenge?: Maybe<String>;
  profiles?: Maybe<ProfileCreateManyInput>;
  lastUsedProfileId?: Maybe<String>;
}

export interface GroupUpdateInput {
  host?: Maybe<ProfileUpdateOneRequiredInput>;
  name?: Maybe<String>;
  title?: Maybe<String>;
  description?: Maybe<String>;
  logo?: Maybe<String>;
  type?: Maybe<GroupType>;
  parent?: Maybe<GroupUpdateOneInput>;
  is_hidden?: Maybe<Boolean>;
  is_public?: Maybe<Boolean>;
  members?: Maybe<MembershipUpdateManyWithoutGroupInput>;
  messages?: Maybe<MessageUpdateManyInput>;
  tags?: Maybe<String>;
  location?: Maybe<LocationUpdateOneInput>;
}

export interface AssetWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  AND?: Maybe<AssetWhereInput[] | AssetWhereInput>;
  OR?: Maybe<AssetWhereInput[] | AssetWhereInput>;
  NOT?: Maybe<AssetWhereInput[] | AssetWhereInput>;
}

export interface GroupUpdateManyMutationInput {
  name?: Maybe<String>;
  title?: Maybe<String>;
  description?: Maybe<String>;
  logo?: Maybe<String>;
  type?: Maybe<GroupType>;
  is_hidden?: Maybe<Boolean>;
  is_public?: Maybe<Boolean>;
  tags?: Maybe<String>;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  email?: Maybe<String>;
}>;

export interface LocationUpdateInput {
  name?: Maybe<String>;
  latitude?: Maybe<Float>;
  longitude?: Maybe<Float>;
  radius?: Maybe<Float>;
}

export interface AssetUpdateManyMutationInput {
  name?: Maybe<String>;
}

export interface LocationUpdateManyMutationInput {
  name?: Maybe<String>;
  latitude?: Maybe<Float>;
  longitude?: Maybe<Float>;
  radius?: Maybe<Float>;
}

export interface GroupCreateOneWithoutMembersInput {
  create?: Maybe<GroupCreateWithoutMembersInput>;
  connect?: Maybe<GroupWhereUniqueInput>;
}

export interface MembershipCreateInput {
  id?: Maybe<ID_Input>;
  member: ProfileCreateOneWithoutMembershipsInput;
  group: GroupCreateOneWithoutMembersInput;
  show_history: Boolean;
}

export interface LocationSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<LocationWhereInput>;
  AND?: Maybe<
    LocationSubscriptionWhereInput[] | LocationSubscriptionWhereInput
  >;
  OR?: Maybe<LocationSubscriptionWhereInput[] | LocationSubscriptionWhereInput>;
  NOT?: Maybe<
    LocationSubscriptionWhereInput[] | LocationSubscriptionWhereInput
  >;
}

export interface MembershipUpdateInput {
  member?: Maybe<ProfileUpdateOneRequiredWithoutMembershipsInput>;
  group?: Maybe<GroupUpdateOneRequiredWithoutMembersInput>;
  show_history?: Maybe<Boolean>;
}

export interface SessionUpdateWithWhereUniqueWithoutUserInput {
  where: SessionWhereUniqueInput;
  data: SessionUpdateWithoutUserDataInput;
}

export interface MembershipUpdateManyMutationInput {
  show_history?: Maybe<Boolean>;
}

export interface ProfileUpdateManyWithWhereNestedInput {
  where: ProfileScalarWhereInput;
  data: ProfileUpdateManyDataInput;
}

export interface MessageUpdateInput {
  sender?: Maybe<ProfileUpdateOneRequiredInput>;
  type?: Maybe<MessageType>;
  parent?: Maybe<MessageUpdateOneInput>;
  subject?: Maybe<String>;
  content?: Maybe<Json>;
  attachments?: Maybe<AttachmentUpdateManyInput>;
  reactions?: Maybe<ReactionUpdateManyInput>;
  tags?: Maybe<String>;
  location?: Maybe<LocationUpdateOneInput>;
}

export interface ReactionUpdateManyMutationInput {
  emoji?: Maybe<String>;
}

export interface MessageUpdateManyMutationInput {
  type?: Maybe<MessageType>;
  subject?: Maybe<String>;
  content?: Maybe<Json>;
  tags?: Maybe<String>;
}

export interface ExchangeUpdateOneRequiredInput {
  create?: Maybe<ExchangeCreateInput>;
  update?: Maybe<ExchangeUpdateDataInput>;
  upsert?: Maybe<ExchangeUpsertNestedInput>;
  connect?: Maybe<ExchangeWhereUniqueInput>;
}

export interface PortfolioCreateInput {
  id?: Maybe<ID_Input>;
  owner: ProfileCreateOneInput;
  name: String;
  transactions?: Maybe<TransactionCreateManyInput>;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  OR?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  NOT?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface ExchangeCreateOneInput {
  create?: Maybe<ExchangeCreateInput>;
  connect?: Maybe<ExchangeWhereUniqueInput>;
}

export interface AssetCreateOneInput {
  create?: Maybe<AssetCreateInput>;
  connect?: Maybe<AssetWhereUniqueInput>;
}

export interface TransactionCreateInput {
  id?: Maybe<ID_Input>;
  timestamp: DateTimeInput;
  profile: ProfileCreateOneInput;
  asset: AssetCreateOneInput;
  direction: TransactionDirection;
  exchange: ExchangeCreateOneInput;
  amount: Float;
}

export interface TransactionCreateManyInput {
  create?: Maybe<TransactionCreateInput[] | TransactionCreateInput>;
  connect?: Maybe<TransactionWhereUniqueInput[] | TransactionWhereUniqueInput>;
}

export interface UserUpdateManyMutationInput {
  name?: Maybe<String>;
  timezone?: Maybe<String>;
  email?: Maybe<String>;
  password_salt?: Maybe<String>;
  password_hash?: Maybe<String>;
  is_verified?: Maybe<Boolean>;
  challenge?: Maybe<String>;
  lastUsedProfileId?: Maybe<String>;
}

export interface ProfileCreateOneInput {
  create?: Maybe<ProfileCreateInput>;
  connect?: Maybe<ProfileWhereUniqueInput>;
}

export type TransactionWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface UserUpdateOneRequiredWithoutSessionsInput {
  create?: Maybe<UserCreateWithoutSessionsInput>;
  update?: Maybe<UserUpdateWithoutSessionsDataInput>;
  upsert?: Maybe<UserUpsertWithoutSessionsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface TransactionUpdateManyMutationInput {
  timestamp?: Maybe<DateTimeInput>;
  direction?: Maybe<TransactionDirection>;
  amount?: Maybe<Float>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface UserPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt?: DateTimeOutput;
  name: String;
  timezone: String;
  email: String;
  password_salt: String;
  password_hash: String;
  is_verified: Boolean;
  challenge?: String;
  lastUsedProfileId?: String;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  name: () => Promise<String>;
  timezone: () => Promise<String>;
  email: () => Promise<String>;
  password_salt: () => Promise<String>;
  password_hash: () => Promise<String>;
  is_verified: () => Promise<Boolean>;
  challenge: () => Promise<String>;
  lastUsedProfileId: () => Promise<String>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  name: () => Promise<AsyncIterator<String>>;
  timezone: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  password_salt: () => Promise<AsyncIterator<String>>;
  password_hash: () => Promise<AsyncIterator<String>>;
  is_verified: () => Promise<AsyncIterator<Boolean>>;
  challenge: () => Promise<AsyncIterator<String>>;
  lastUsedProfileId: () => Promise<AsyncIterator<String>>;
}

export interface GroupEdge {
  node: Group;
  cursor: String;
}

export interface GroupEdgePromise extends Promise<GroupEdge>, Fragmentable {
  node: <T = GroupPromise>() => T;
  cursor: () => Promise<String>;
}

export interface GroupEdgeSubscription
  extends Promise<AsyncIterator<GroupEdge>>,
    Fragmentable {
  node: <T = GroupSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface Membership {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt?: DateTimeOutput;
  show_history: Boolean;
}

export interface MembershipPromise extends Promise<Membership>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  member: <T = ProfilePromise>() => T;
  group: <T = GroupPromise>() => T;
  show_history: () => Promise<Boolean>;
}

export interface MembershipSubscription
  extends Promise<AsyncIterator<Membership>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  member: <T = ProfileSubscription>() => T;
  group: <T = GroupSubscription>() => T;
  show_history: () => Promise<AsyncIterator<Boolean>>;
}

export interface MembershipNullablePromise
  extends Promise<Membership | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  member: <T = ProfilePromise>() => T;
  group: <T = GroupPromise>() => T;
  show_history: () => Promise<Boolean>;
}

export interface GroupConnection {
  pageInfo: PageInfo;
  edges: GroupEdge[];
}

export interface GroupConnectionPromise
  extends Promise<GroupConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<GroupEdge>>() => T;
  aggregate: <T = AggregateGroupPromise>() => T;
}

export interface GroupConnectionSubscription
  extends Promise<AsyncIterator<GroupConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<GroupEdgeSubscription>>>() => T;
  aggregate: <T = AggregateGroupSubscription>() => T;
}

export interface Group {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt?: DateTimeOutput;
  name: String;
  title: String;
  description: String;
  logo: String;
  type: GroupType;
  is_hidden: Boolean;
  is_public: Boolean;
  tags?: String;
}

export interface GroupPromise extends Promise<Group>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  host: <T = ProfilePromise>() => T;
  name: () => Promise<String>;
  title: () => Promise<String>;
  description: () => Promise<String>;
  logo: () => Promise<String>;
  type: () => Promise<GroupType>;
  parent: <T = GroupPromise>() => T;
  is_hidden: () => Promise<Boolean>;
  is_public: () => Promise<Boolean>;
  members: <T = FragmentableArray<Membership>>(args?: {
    where?: MembershipWhereInput;
    orderBy?: MembershipOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  messages: <T = FragmentableArray<Message>>(args?: {
    where?: MessageWhereInput;
    orderBy?: MessageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  tags: () => Promise<String>;
  location: <T = LocationPromise>() => T;
}

export interface GroupSubscription
  extends Promise<AsyncIterator<Group>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  host: <T = ProfileSubscription>() => T;
  name: () => Promise<AsyncIterator<String>>;
  title: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  logo: () => Promise<AsyncIterator<String>>;
  type: () => Promise<AsyncIterator<GroupType>>;
  parent: <T = GroupSubscription>() => T;
  is_hidden: () => Promise<AsyncIterator<Boolean>>;
  is_public: () => Promise<AsyncIterator<Boolean>>;
  members: <T = Promise<AsyncIterator<MembershipSubscription>>>(args?: {
    where?: MembershipWhereInput;
    orderBy?: MembershipOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  messages: <T = Promise<AsyncIterator<MessageSubscription>>>(args?: {
    where?: MessageWhereInput;
    orderBy?: MessageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  tags: () => Promise<AsyncIterator<String>>;
  location: <T = LocationSubscription>() => T;
}

export interface GroupNullablePromise
  extends Promise<Group | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  host: <T = ProfilePromise>() => T;
  name: () => Promise<String>;
  title: () => Promise<String>;
  description: () => Promise<String>;
  logo: () => Promise<String>;
  type: () => Promise<GroupType>;
  parent: <T = GroupPromise>() => T;
  is_hidden: () => Promise<Boolean>;
  is_public: () => Promise<Boolean>;
  members: <T = FragmentableArray<Membership>>(args?: {
    where?: MembershipWhereInput;
    orderBy?: MembershipOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  messages: <T = FragmentableArray<Message>>(args?: {
    where?: MessageWhereInput;
    orderBy?: MessageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  tags: () => Promise<String>;
  location: <T = LocationPromise>() => T;
}

export interface AggregateAsset {
  count: Int;
}

export interface AggregateAssetPromise
  extends Promise<AggregateAsset>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateAssetSubscription
  extends Promise<AsyncIterator<AggregateAsset>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface AggregateExchange {
  count: Int;
}

export interface AggregateExchangePromise
  extends Promise<AggregateExchange>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateExchangeSubscription
  extends Promise<AsyncIterator<AggregateExchange>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface TransactionSubscriptionPayload {
  mutation: MutationType;
  node: Transaction;
  updatedFields: String[];
  previousValues: TransactionPreviousValues;
}

export interface TransactionSubscriptionPayloadPromise
  extends Promise<TransactionSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = TransactionPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = TransactionPreviousValuesPromise>() => T;
}

export interface TransactionSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<TransactionSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = TransactionSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = TransactionPreviousValuesSubscription>() => T;
}

export interface SessionSubscriptionPayload {
  mutation: MutationType;
  node: Session;
  updatedFields: String[];
  previousValues: SessionPreviousValues;
}

export interface SessionSubscriptionPayloadPromise
  extends Promise<SessionSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = SessionPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = SessionPreviousValuesPromise>() => T;
}

export interface SessionSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<SessionSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = SessionSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = SessionPreviousValuesSubscription>() => T;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ExchangeEdge {
  node: Exchange;
  cursor: String;
}

export interface ExchangeEdgePromise
  extends Promise<ExchangeEdge>,
    Fragmentable {
  node: <T = ExchangePromise>() => T;
  cursor: () => Promise<String>;
}

export interface ExchangeEdgeSubscription
  extends Promise<AsyncIterator<ExchangeEdge>>,
    Fragmentable {
  node: <T = ExchangeSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface TransactionConnection {
  pageInfo: PageInfo;
  edges: TransactionEdge[];
}

export interface TransactionConnectionPromise
  extends Promise<TransactionConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<TransactionEdge>>() => T;
  aggregate: <T = AggregateTransactionPromise>() => T;
}

export interface TransactionConnectionSubscription
  extends Promise<AsyncIterator<TransactionConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<TransactionEdgeSubscription>>>() => T;
  aggregate: <T = AggregateTransactionSubscription>() => T;
}

export interface AggregateTransaction {
  count: Int;
}

export interface AggregateTransactionPromise
  extends Promise<AggregateTransaction>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateTransactionSubscription
  extends Promise<AsyncIterator<AggregateTransaction>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface SessionEdge {
  node: Session;
  cursor: String;
}

export interface SessionEdgePromise extends Promise<SessionEdge>, Fragmentable {
  node: <T = SessionPromise>() => T;
  cursor: () => Promise<String>;
}

export interface SessionEdgeSubscription
  extends Promise<AsyncIterator<SessionEdge>>,
    Fragmentable {
  node: <T = SessionSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface Asset {
  id: ID_Output;
  name: String;
}

export interface AssetPromise extends Promise<Asset>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
}

export interface AssetSubscription
  extends Promise<AsyncIterator<Asset>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface AssetNullablePromise
  extends Promise<Asset | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
}

export interface User {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt?: DateTimeOutput;
  name: String;
  timezone: String;
  email: String;
  password_salt: String;
  password_hash: String;
  is_verified: Boolean;
  challenge?: String;
  lastUsedProfileId?: String;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  name: () => Promise<String>;
  timezone: () => Promise<String>;
  email: () => Promise<String>;
  password_salt: () => Promise<String>;
  password_hash: () => Promise<String>;
  is_verified: () => Promise<Boolean>;
  challenge: () => Promise<String>;
  profiles: <T = FragmentableArray<Profile>>(args?: {
    where?: ProfileWhereInput;
    orderBy?: ProfileOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  sessions: <T = FragmentableArray<Session>>(args?: {
    where?: SessionWhereInput;
    orderBy?: SessionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  lastUsedProfileId: () => Promise<String>;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  name: () => Promise<AsyncIterator<String>>;
  timezone: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  password_salt: () => Promise<AsyncIterator<String>>;
  password_hash: () => Promise<AsyncIterator<String>>;
  is_verified: () => Promise<AsyncIterator<Boolean>>;
  challenge: () => Promise<AsyncIterator<String>>;
  profiles: <T = Promise<AsyncIterator<ProfileSubscription>>>(args?: {
    where?: ProfileWhereInput;
    orderBy?: ProfileOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  sessions: <T = Promise<AsyncIterator<SessionSubscription>>>(args?: {
    where?: SessionWhereInput;
    orderBy?: SessionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  lastUsedProfileId: () => Promise<AsyncIterator<String>>;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  name: () => Promise<String>;
  timezone: () => Promise<String>;
  email: () => Promise<String>;
  password_salt: () => Promise<String>;
  password_hash: () => Promise<String>;
  is_verified: () => Promise<Boolean>;
  challenge: () => Promise<String>;
  profiles: <T = FragmentableArray<Profile>>(args?: {
    where?: ProfileWhereInput;
    orderBy?: ProfileOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  sessions: <T = FragmentableArray<Session>>(args?: {
    where?: SessionWhereInput;
    orderBy?: SessionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  lastUsedProfileId: () => Promise<String>;
}

export interface AssetSubscriptionPayload {
  mutation: MutationType;
  node: Asset;
  updatedFields: String[];
  previousValues: AssetPreviousValues;
}

export interface AssetSubscriptionPayloadPromise
  extends Promise<AssetSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = AssetPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = AssetPreviousValuesPromise>() => T;
}

export interface AssetSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<AssetSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = AssetSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = AssetPreviousValuesSubscription>() => T;
}

export interface AggregateReaction {
  count: Int;
}

export interface AggregateReactionPromise
  extends Promise<AggregateReaction>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateReactionSubscription
  extends Promise<AsyncIterator<AggregateReaction>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface AssetPreviousValues {
  id: ID_Output;
  name: String;
}

export interface AssetPreviousValuesPromise
  extends Promise<AssetPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
}

export interface AssetPreviousValuesSubscription
  extends Promise<AsyncIterator<AssetPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface ReactionConnection {
  pageInfo: PageInfo;
  edges: ReactionEdge[];
}

export interface ReactionConnectionPromise
  extends Promise<ReactionConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ReactionEdge>>() => T;
  aggregate: <T = AggregateReactionPromise>() => T;
}

export interface ReactionConnectionSubscription
  extends Promise<AsyncIterator<ReactionConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ReactionEdgeSubscription>>>() => T;
  aggregate: <T = AggregateReactionSubscription>() => T;
}

export interface ExchangeConnection {
  pageInfo: PageInfo;
  edges: ExchangeEdge[];
}

export interface ExchangeConnectionPromise
  extends Promise<ExchangeConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ExchangeEdge>>() => T;
  aggregate: <T = AggregateExchangePromise>() => T;
}

export interface ExchangeConnectionSubscription
  extends Promise<AsyncIterator<ExchangeConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ExchangeEdgeSubscription>>>() => T;
  aggregate: <T = AggregateExchangeSubscription>() => T;
}

export interface ProfileEdge {
  node: Profile;
  cursor: String;
}

export interface ProfileEdgePromise extends Promise<ProfileEdge>, Fragmentable {
  node: <T = ProfilePromise>() => T;
  cursor: () => Promise<String>;
}

export interface ProfileEdgeSubscription
  extends Promise<AsyncIterator<ProfileEdge>>,
    Fragmentable {
  node: <T = ProfileSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AttachmentSubscriptionPayload {
  mutation: MutationType;
  node: Attachment;
  updatedFields: String[];
  previousValues: AttachmentPreviousValues;
}

export interface AttachmentSubscriptionPayloadPromise
  extends Promise<AttachmentSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = AttachmentPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = AttachmentPreviousValuesPromise>() => T;
}

export interface AttachmentSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<AttachmentSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = AttachmentSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = AttachmentPreviousValuesSubscription>() => T;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface AttachmentPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt?: DateTimeOutput;
  name: String;
  type: AttachmentType;
  link?: String;
  tags?: String;
}

export interface AttachmentPreviousValuesPromise
  extends Promise<AttachmentPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  name: () => Promise<String>;
  type: () => Promise<AttachmentType>;
  link: () => Promise<String>;
  tags: () => Promise<String>;
}

export interface AttachmentPreviousValuesSubscription
  extends Promise<AsyncIterator<AttachmentPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  name: () => Promise<AsyncIterator<String>>;
  type: () => Promise<AsyncIterator<AttachmentType>>;
  link: () => Promise<AsyncIterator<String>>;
  tags: () => Promise<AsyncIterator<String>>;
}

export interface PortfolioEdge {
  node: Portfolio;
  cursor: String;
}

export interface PortfolioEdgePromise
  extends Promise<PortfolioEdge>,
    Fragmentable {
  node: <T = PortfolioPromise>() => T;
  cursor: () => Promise<String>;
}

export interface PortfolioEdgeSubscription
  extends Promise<AsyncIterator<PortfolioEdge>>,
    Fragmentable {
  node: <T = PortfolioSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface Exchange {
  id: ID_Output;
  name: String;
}

export interface ExchangePromise extends Promise<Exchange>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  assets: <T = FragmentableArray<Asset>>(args?: {
    where?: AssetWhereInput;
    orderBy?: AssetOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface ExchangeSubscription
  extends Promise<AsyncIterator<Exchange>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  assets: <T = Promise<AsyncIterator<AssetSubscription>>>(args?: {
    where?: AssetWhereInput;
    orderBy?: AssetOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface ExchangeNullablePromise
  extends Promise<Exchange | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  assets: <T = FragmentableArray<Asset>>(args?: {
    where?: AssetWhereInput;
    orderBy?: AssetOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface AssetConnection {
  pageInfo: PageInfo;
  edges: AssetEdge[];
}

export interface AssetConnectionPromise
  extends Promise<AssetConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<AssetEdge>>() => T;
  aggregate: <T = AggregateAssetPromise>() => T;
}

export interface AssetConnectionSubscription
  extends Promise<AsyncIterator<AssetConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<AssetEdgeSubscription>>>() => T;
  aggregate: <T = AggregateAssetSubscription>() => T;
}

export interface ExchangeSubscriptionPayload {
  mutation: MutationType;
  node: Exchange;
  updatedFields: String[];
  previousValues: ExchangePreviousValues;
}

export interface ExchangeSubscriptionPayloadPromise
  extends Promise<ExchangeSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ExchangePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ExchangePreviousValuesPromise>() => T;
}

export interface ExchangeSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ExchangeSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ExchangeSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ExchangePreviousValuesSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface ExchangePreviousValues {
  id: ID_Output;
  name: String;
}

export interface ExchangePreviousValuesPromise
  extends Promise<ExchangePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
}

export interface ExchangePreviousValuesSubscription
  extends Promise<AsyncIterator<ExchangePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface Portfolio {
  id: ID_Output;
  name: String;
}

export interface PortfolioPromise extends Promise<Portfolio>, Fragmentable {
  id: () => Promise<ID_Output>;
  owner: <T = ProfilePromise>() => T;
  name: () => Promise<String>;
  transactions: <T = FragmentableArray<Transaction>>(args?: {
    where?: TransactionWhereInput;
    orderBy?: TransactionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface PortfolioSubscription
  extends Promise<AsyncIterator<Portfolio>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  owner: <T = ProfileSubscription>() => T;
  name: () => Promise<AsyncIterator<String>>;
  transactions: <T = Promise<AsyncIterator<TransactionSubscription>>>(args?: {
    where?: TransactionWhereInput;
    orderBy?: TransactionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface PortfolioNullablePromise
  extends Promise<Portfolio | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  owner: <T = ProfilePromise>() => T;
  name: () => Promise<String>;
  transactions: <T = FragmentableArray<Transaction>>(args?: {
    where?: TransactionWhereInput;
    orderBy?: TransactionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface AggregateAttachment {
  count: Int;
}

export interface AggregateAttachmentPromise
  extends Promise<AggregateAttachment>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateAttachmentSubscription
  extends Promise<AsyncIterator<AggregateAttachment>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface MessageEdge {
  node: Message;
  cursor: String;
}

export interface MessageEdgePromise extends Promise<MessageEdge>, Fragmentable {
  node: <T = MessagePromise>() => T;
  cursor: () => Promise<String>;
}

export interface MessageEdgeSubscription
  extends Promise<AsyncIterator<MessageEdge>>,
    Fragmentable {
  node: <T = MessageSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface GroupSubscriptionPayload {
  mutation: MutationType;
  node: Group;
  updatedFields: String[];
  previousValues: GroupPreviousValues;
}

export interface GroupSubscriptionPayloadPromise
  extends Promise<GroupSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = GroupPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = GroupPreviousValuesPromise>() => T;
}

export interface GroupSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<GroupSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = GroupSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = GroupPreviousValuesSubscription>() => T;
}

export interface AggregateMembership {
  count: Int;
}

export interface AggregateMembershipPromise
  extends Promise<AggregateMembership>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateMembershipSubscription
  extends Promise<AsyncIterator<AggregateMembership>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface GroupPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt?: DateTimeOutput;
  name: String;
  title: String;
  description: String;
  logo: String;
  type: GroupType;
  is_hidden: Boolean;
  is_public: Boolean;
  tags?: String;
}

export interface GroupPreviousValuesPromise
  extends Promise<GroupPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  name: () => Promise<String>;
  title: () => Promise<String>;
  description: () => Promise<String>;
  logo: () => Promise<String>;
  type: () => Promise<GroupType>;
  is_hidden: () => Promise<Boolean>;
  is_public: () => Promise<Boolean>;
  tags: () => Promise<String>;
}

export interface GroupPreviousValuesSubscription
  extends Promise<AsyncIterator<GroupPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  name: () => Promise<AsyncIterator<String>>;
  title: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  logo: () => Promise<AsyncIterator<String>>;
  type: () => Promise<AsyncIterator<GroupType>>;
  is_hidden: () => Promise<AsyncIterator<Boolean>>;
  is_public: () => Promise<AsyncIterator<Boolean>>;
  tags: () => Promise<AsyncIterator<String>>;
}

export interface MembershipConnection {
  pageInfo: PageInfo;
  edges: MembershipEdge[];
}

export interface MembershipConnectionPromise
  extends Promise<MembershipConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<MembershipEdge>>() => T;
  aggregate: <T = AggregateMembershipPromise>() => T;
}

export interface MembershipConnectionSubscription
  extends Promise<AsyncIterator<MembershipConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<MembershipEdgeSubscription>>>() => T;
  aggregate: <T = AggregateMembershipSubscription>() => T;
}

export interface AttachmentEdge {
  node: Attachment;
  cursor: String;
}

export interface AttachmentEdgePromise
  extends Promise<AttachmentEdge>,
    Fragmentable {
  node: <T = AttachmentPromise>() => T;
  cursor: () => Promise<String>;
}

export interface AttachmentEdgeSubscription
  extends Promise<AsyncIterator<AttachmentEdge>>,
    Fragmentable {
  node: <T = AttachmentSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface LocationEdge {
  node: Location;
  cursor: String;
}

export interface LocationEdgePromise
  extends Promise<LocationEdge>,
    Fragmentable {
  node: <T = LocationPromise>() => T;
  cursor: () => Promise<String>;
}

export interface LocationEdgeSubscription
  extends Promise<AsyncIterator<LocationEdge>>,
    Fragmentable {
  node: <T = LocationSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface LocationSubscriptionPayload {
  mutation: MutationType;
  node: Location;
  updatedFields: String[];
  previousValues: LocationPreviousValues;
}

export interface LocationSubscriptionPayloadPromise
  extends Promise<LocationSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = LocationPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = LocationPreviousValuesPromise>() => T;
}

export interface LocationSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<LocationSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = LocationSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = LocationPreviousValuesSubscription>() => T;
}

export interface AssetEdge {
  node: Asset;
  cursor: String;
}

export interface AssetEdgePromise extends Promise<AssetEdge>, Fragmentable {
  node: <T = AssetPromise>() => T;
  cursor: () => Promise<String>;
}

export interface AssetEdgeSubscription
  extends Promise<AsyncIterator<AssetEdge>>,
    Fragmentable {
  node: <T = AssetSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface LocationPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  name?: String;
  latitude: Float;
  longitude: Float;
  radius?: Float;
}

export interface LocationPreviousValuesPromise
  extends Promise<LocationPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  name: () => Promise<String>;
  latitude: () => Promise<Float>;
  longitude: () => Promise<Float>;
  radius: () => Promise<Float>;
}

export interface LocationPreviousValuesSubscription
  extends Promise<AsyncIterator<LocationPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  name: () => Promise<AsyncIterator<String>>;
  latitude: () => Promise<AsyncIterator<Float>>;
  longitude: () => Promise<AsyncIterator<Float>>;
  radius: () => Promise<AsyncIterator<Float>>;
}

export interface TransactionPreviousValues {
  id: ID_Output;
  timestamp: DateTimeOutput;
  direction: TransactionDirection;
  amount: Float;
}

export interface TransactionPreviousValuesPromise
  extends Promise<TransactionPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  timestamp: () => Promise<DateTimeOutput>;
  direction: () => Promise<TransactionDirection>;
  amount: () => Promise<Float>;
}

export interface TransactionPreviousValuesSubscription
  extends Promise<AsyncIterator<TransactionPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  timestamp: () => Promise<AsyncIterator<DateTimeOutput>>;
  direction: () => Promise<AsyncIterator<TransactionDirection>>;
  amount: () => Promise<AsyncIterator<Float>>;
}

export interface AttachmentConnection {
  pageInfo: PageInfo;
  edges: AttachmentEdge[];
}

export interface AttachmentConnectionPromise
  extends Promise<AttachmentConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<AttachmentEdge>>() => T;
  aggregate: <T = AggregateAttachmentPromise>() => T;
}

export interface AttachmentConnectionSubscription
  extends Promise<AsyncIterator<AttachmentConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<AttachmentEdgeSubscription>>>() => T;
  aggregate: <T = AggregateAttachmentSubscription>() => T;
}

export interface AggregateSession {
  count: Int;
}

export interface AggregateSessionPromise
  extends Promise<AggregateSession>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateSessionSubscription
  extends Promise<AsyncIterator<AggregateSession>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface MembershipSubscriptionPayload {
  mutation: MutationType;
  node: Membership;
  updatedFields: String[];
  previousValues: MembershipPreviousValues;
}

export interface MembershipSubscriptionPayloadPromise
  extends Promise<MembershipSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = MembershipPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = MembershipPreviousValuesPromise>() => T;
}

export interface MembershipSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<MembershipSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = MembershipSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = MembershipPreviousValuesSubscription>() => T;
}

export interface Session {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt?: DateTimeOutput;
  csrfToken: String;
  authToken: String;
  validTo: DateTimeOutput;
  timedOut?: DateTimeOutput;
  loggedOut?: DateTimeOutput;
}

export interface SessionPromise extends Promise<Session>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  csrfToken: () => Promise<String>;
  authToken: () => Promise<String>;
  validTo: () => Promise<DateTimeOutput>;
  timedOut: () => Promise<DateTimeOutput>;
  loggedOut: () => Promise<DateTimeOutput>;
  user: <T = UserPromise>() => T;
  profile: <T = ProfilePromise>() => T;
}

export interface SessionSubscription
  extends Promise<AsyncIterator<Session>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  csrfToken: () => Promise<AsyncIterator<String>>;
  authToken: () => Promise<AsyncIterator<String>>;
  validTo: () => Promise<AsyncIterator<DateTimeOutput>>;
  timedOut: () => Promise<AsyncIterator<DateTimeOutput>>;
  loggedOut: () => Promise<AsyncIterator<DateTimeOutput>>;
  user: <T = UserSubscription>() => T;
  profile: <T = ProfileSubscription>() => T;
}

export interface SessionNullablePromise
  extends Promise<Session | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  csrfToken: () => Promise<String>;
  authToken: () => Promise<String>;
  validTo: () => Promise<DateTimeOutput>;
  timedOut: () => Promise<DateTimeOutput>;
  loggedOut: () => Promise<DateTimeOutput>;
  user: <T = UserPromise>() => T;
  profile: <T = ProfilePromise>() => T;
}

export interface MembershipPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt?: DateTimeOutput;
  show_history: Boolean;
}

export interface MembershipPreviousValuesPromise
  extends Promise<MembershipPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  show_history: () => Promise<Boolean>;
}

export interface MembershipPreviousValuesSubscription
  extends Promise<AsyncIterator<MembershipPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  show_history: () => Promise<AsyncIterator<Boolean>>;
}

export interface AggregateProfile {
  count: Int;
}

export interface AggregateProfilePromise
  extends Promise<AggregateProfile>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateProfileSubscription
  extends Promise<AsyncIterator<AggregateProfile>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Location {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  name?: String;
  latitude: Float;
  longitude: Float;
  radius?: Float;
}

export interface LocationPromise extends Promise<Location>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  name: () => Promise<String>;
  latitude: () => Promise<Float>;
  longitude: () => Promise<Float>;
  radius: () => Promise<Float>;
}

export interface LocationSubscription
  extends Promise<AsyncIterator<Location>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  name: () => Promise<AsyncIterator<String>>;
  latitude: () => Promise<AsyncIterator<Float>>;
  longitude: () => Promise<AsyncIterator<Float>>;
  radius: () => Promise<AsyncIterator<Float>>;
}

export interface LocationNullablePromise
  extends Promise<Location | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  name: () => Promise<String>;
  latitude: () => Promise<Float>;
  longitude: () => Promise<Float>;
  radius: () => Promise<Float>;
}

export interface AggregatePortfolio {
  count: Int;
}

export interface AggregatePortfolioPromise
  extends Promise<AggregatePortfolio>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregatePortfolioSubscription
  extends Promise<AsyncIterator<AggregatePortfolio>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface MessageSubscriptionPayload {
  mutation: MutationType;
  node: Message;
  updatedFields: String[];
  previousValues: MessagePreviousValues;
}

export interface MessageSubscriptionPayloadPromise
  extends Promise<MessageSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = MessagePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = MessagePreviousValuesPromise>() => T;
}

export interface MessageSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<MessageSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = MessageSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = MessagePreviousValuesSubscription>() => T;
}

export interface Transaction {
  id: ID_Output;
  timestamp: DateTimeOutput;
  direction: TransactionDirection;
  amount: Float;
}

export interface TransactionPromise extends Promise<Transaction>, Fragmentable {
  id: () => Promise<ID_Output>;
  timestamp: () => Promise<DateTimeOutput>;
  profile: <T = ProfilePromise>() => T;
  asset: <T = AssetPromise>() => T;
  direction: () => Promise<TransactionDirection>;
  exchange: <T = ExchangePromise>() => T;
  amount: () => Promise<Float>;
}

export interface TransactionSubscription
  extends Promise<AsyncIterator<Transaction>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  timestamp: () => Promise<AsyncIterator<DateTimeOutput>>;
  profile: <T = ProfileSubscription>() => T;
  asset: <T = AssetSubscription>() => T;
  direction: () => Promise<AsyncIterator<TransactionDirection>>;
  exchange: <T = ExchangeSubscription>() => T;
  amount: () => Promise<AsyncIterator<Float>>;
}

export interface TransactionNullablePromise
  extends Promise<Transaction | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  timestamp: () => Promise<DateTimeOutput>;
  profile: <T = ProfilePromise>() => T;
  asset: <T = AssetPromise>() => T;
  direction: () => Promise<TransactionDirection>;
  exchange: <T = ExchangePromise>() => T;
  amount: () => Promise<Float>;
}

export interface MessagePreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt?: DateTimeOutput;
  type: MessageType;
  subject?: String;
  content?: Json;
  tags?: String;
}

export interface MessagePreviousValuesPromise
  extends Promise<MessagePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  type: () => Promise<MessageType>;
  subject: () => Promise<String>;
  content: () => Promise<Json>;
  tags: () => Promise<String>;
}

export interface MessagePreviousValuesSubscription
  extends Promise<AsyncIterator<MessagePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  type: () => Promise<AsyncIterator<MessageType>>;
  subject: () => Promise<AsyncIterator<String>>;
  content: () => Promise<AsyncIterator<Json>>;
  tags: () => Promise<AsyncIterator<String>>;
}

export interface AggregateMessage {
  count: Int;
}

export interface AggregateMessagePromise
  extends Promise<AggregateMessage>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateMessageSubscription
  extends Promise<AsyncIterator<AggregateMessage>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Reaction {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt?: DateTimeOutput;
  emoji: String;
}

export interface ReactionPromise extends Promise<Reaction>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  creator: <T = ProfilePromise>() => T;
  emoji: () => Promise<String>;
}

export interface ReactionSubscription
  extends Promise<AsyncIterator<Reaction>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  creator: <T = ProfileSubscription>() => T;
  emoji: () => Promise<AsyncIterator<String>>;
}

export interface ReactionNullablePromise
  extends Promise<Reaction | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  creator: <T = ProfilePromise>() => T;
  emoji: () => Promise<String>;
}

export interface MembershipEdge {
  node: Membership;
  cursor: String;
}

export interface MembershipEdgePromise
  extends Promise<MembershipEdge>,
    Fragmentable {
  node: <T = MembershipPromise>() => T;
  cursor: () => Promise<String>;
}

export interface MembershipEdgeSubscription
  extends Promise<AsyncIterator<MembershipEdge>>,
    Fragmentable {
  node: <T = MembershipSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface PortfolioSubscriptionPayload {
  mutation: MutationType;
  node: Portfolio;
  updatedFields: String[];
  previousValues: PortfolioPreviousValues;
}

export interface PortfolioSubscriptionPayloadPromise
  extends Promise<PortfolioSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = PortfolioPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = PortfolioPreviousValuesPromise>() => T;
}

export interface PortfolioSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<PortfolioSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = PortfolioSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = PortfolioPreviousValuesSubscription>() => T;
}

export interface LocationConnection {
  pageInfo: PageInfo;
  edges: LocationEdge[];
}

export interface LocationConnectionPromise
  extends Promise<LocationConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<LocationEdge>>() => T;
  aggregate: <T = AggregateLocationPromise>() => T;
}

export interface LocationConnectionSubscription
  extends Promise<AsyncIterator<LocationConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<LocationEdgeSubscription>>>() => T;
  aggregate: <T = AggregateLocationSubscription>() => T;
}

export interface PortfolioPreviousValues {
  id: ID_Output;
  name: String;
}

export interface PortfolioPreviousValuesPromise
  extends Promise<PortfolioPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
}

export interface PortfolioPreviousValuesSubscription
  extends Promise<AsyncIterator<PortfolioPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface TransactionEdge {
  node: Transaction;
  cursor: String;
}

export interface TransactionEdgePromise
  extends Promise<TransactionEdge>,
    Fragmentable {
  node: <T = TransactionPromise>() => T;
  cursor: () => Promise<String>;
}

export interface TransactionEdgeSubscription
  extends Promise<AsyncIterator<TransactionEdge>>,
    Fragmentable {
  node: <T = TransactionSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface Attachment {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt?: DateTimeOutput;
  name: String;
  type: AttachmentType;
  link?: String;
  tags?: String;
}

export interface AttachmentPromise extends Promise<Attachment>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  createdBy: <T = ProfilePromise>() => T;
  name: () => Promise<String>;
  type: () => Promise<AttachmentType>;
  link: () => Promise<String>;
  tags: () => Promise<String>;
  location: <T = LocationPromise>() => T;
}

export interface AttachmentSubscription
  extends Promise<AsyncIterator<Attachment>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdBy: <T = ProfileSubscription>() => T;
  name: () => Promise<AsyncIterator<String>>;
  type: () => Promise<AsyncIterator<AttachmentType>>;
  link: () => Promise<AsyncIterator<String>>;
  tags: () => Promise<AsyncIterator<String>>;
  location: <T = LocationSubscription>() => T;
}

export interface AttachmentNullablePromise
  extends Promise<Attachment | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  createdBy: <T = ProfilePromise>() => T;
  name: () => Promise<String>;
  type: () => Promise<AttachmentType>;
  link: () => Promise<String>;
  tags: () => Promise<String>;
  location: <T = LocationPromise>() => T;
}

export interface ReactionEdge {
  node: Reaction;
  cursor: String;
}

export interface ReactionEdgePromise
  extends Promise<ReactionEdge>,
    Fragmentable {
  node: <T = ReactionPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ReactionEdgeSubscription
  extends Promise<AsyncIterator<ReactionEdge>>,
    Fragmentable {
  node: <T = ReactionSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ProfileSubscriptionPayload {
  mutation: MutationType;
  node: Profile;
  updatedFields: String[];
  previousValues: ProfilePreviousValues;
}

export interface ProfileSubscriptionPayloadPromise
  extends Promise<ProfileSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ProfilePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ProfilePreviousValuesPromise>() => T;
}

export interface ProfileSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ProfileSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ProfileSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ProfilePreviousValuesSubscription>() => T;
}

export interface PortfolioConnection {
  pageInfo: PageInfo;
  edges: PortfolioEdge[];
}

export interface PortfolioConnectionPromise
  extends Promise<PortfolioConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<PortfolioEdge>>() => T;
  aggregate: <T = AggregatePortfolioPromise>() => T;
}

export interface PortfolioConnectionSubscription
  extends Promise<AsyncIterator<PortfolioConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<PortfolioEdgeSubscription>>>() => T;
  aggregate: <T = AggregatePortfolioSubscription>() => T;
}

export interface ProfilePreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt?: DateTimeOutput;
  name: String;
  timezone?: String;
  status?: String;
  picture: String;
}

export interface ProfilePreviousValuesPromise
  extends Promise<ProfilePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  name: () => Promise<String>;
  timezone: () => Promise<String>;
  status: () => Promise<String>;
  picture: () => Promise<String>;
}

export interface ProfilePreviousValuesSubscription
  extends Promise<AsyncIterator<ProfilePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  name: () => Promise<AsyncIterator<String>>;
  timezone: () => Promise<AsyncIterator<String>>;
  status: () => Promise<AsyncIterator<String>>;
  picture: () => Promise<AsyncIterator<String>>;
}

export interface MessageConnection {
  pageInfo: PageInfo;
  edges: MessageEdge[];
}

export interface MessageConnectionPromise
  extends Promise<MessageConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<MessageEdge>>() => T;
  aggregate: <T = AggregateMessagePromise>() => T;
}

export interface MessageConnectionSubscription
  extends Promise<AsyncIterator<MessageConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<MessageEdgeSubscription>>>() => T;
  aggregate: <T = AggregateMessageSubscription>() => T;
}

export interface AggregateGroup {
  count: Int;
}

export interface AggregateGroupPromise
  extends Promise<AggregateGroup>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateGroupSubscription
  extends Promise<AsyncIterator<AggregateGroup>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface SessionPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt?: DateTimeOutput;
  csrfToken: String;
  authToken: String;
  validTo: DateTimeOutput;
  timedOut?: DateTimeOutput;
  loggedOut?: DateTimeOutput;
}

export interface SessionPreviousValuesPromise
  extends Promise<SessionPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  csrfToken: () => Promise<String>;
  authToken: () => Promise<String>;
  validTo: () => Promise<DateTimeOutput>;
  timedOut: () => Promise<DateTimeOutput>;
  loggedOut: () => Promise<DateTimeOutput>;
}

export interface SessionPreviousValuesSubscription
  extends Promise<AsyncIterator<SessionPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  csrfToken: () => Promise<AsyncIterator<String>>;
  authToken: () => Promise<AsyncIterator<String>>;
  validTo: () => Promise<AsyncIterator<DateTimeOutput>>;
  timedOut: () => Promise<AsyncIterator<DateTimeOutput>>;
  loggedOut: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface ReactionPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt?: DateTimeOutput;
  emoji: String;
}

export interface ReactionPreviousValuesPromise
  extends Promise<ReactionPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  emoji: () => Promise<String>;
}

export interface ReactionPreviousValuesSubscription
  extends Promise<AsyncIterator<ReactionPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  emoji: () => Promise<AsyncIterator<String>>;
}

export interface ReactionSubscriptionPayload {
  mutation: MutationType;
  node: Reaction;
  updatedFields: String[];
  previousValues: ReactionPreviousValues;
}

export interface ReactionSubscriptionPayloadPromise
  extends Promise<ReactionSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ReactionPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ReactionPreviousValuesPromise>() => T;
}

export interface ReactionSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ReactionSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ReactionSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ReactionPreviousValuesSubscription>() => T;
}

export interface Message {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt?: DateTimeOutput;
  type: MessageType;
  subject?: String;
  content?: Json;
  tags?: String;
}

export interface MessagePromise extends Promise<Message>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  sender: <T = ProfilePromise>() => T;
  type: () => Promise<MessageType>;
  parent: <T = MessagePromise>() => T;
  subject: () => Promise<String>;
  content: () => Promise<Json>;
  attachments: <T = FragmentableArray<Attachment>>(args?: {
    where?: AttachmentWhereInput;
    orderBy?: AttachmentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  reactions: <T = FragmentableArray<Reaction>>(args?: {
    where?: ReactionWhereInput;
    orderBy?: ReactionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  tags: () => Promise<String>;
  location: <T = LocationPromise>() => T;
}

export interface MessageSubscription
  extends Promise<AsyncIterator<Message>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  sender: <T = ProfileSubscription>() => T;
  type: () => Promise<AsyncIterator<MessageType>>;
  parent: <T = MessageSubscription>() => T;
  subject: () => Promise<AsyncIterator<String>>;
  content: () => Promise<AsyncIterator<Json>>;
  attachments: <T = Promise<AsyncIterator<AttachmentSubscription>>>(args?: {
    where?: AttachmentWhereInput;
    orderBy?: AttachmentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  reactions: <T = Promise<AsyncIterator<ReactionSubscription>>>(args?: {
    where?: ReactionWhereInput;
    orderBy?: ReactionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  tags: () => Promise<AsyncIterator<String>>;
  location: <T = LocationSubscription>() => T;
}

export interface MessageNullablePromise
  extends Promise<Message | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  sender: <T = ProfilePromise>() => T;
  type: () => Promise<MessageType>;
  parent: <T = MessagePromise>() => T;
  subject: () => Promise<String>;
  content: () => Promise<Json>;
  attachments: <T = FragmentableArray<Attachment>>(args?: {
    where?: AttachmentWhereInput;
    orderBy?: AttachmentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  reactions: <T = FragmentableArray<Reaction>>(args?: {
    where?: ReactionWhereInput;
    orderBy?: ReactionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  tags: () => Promise<String>;
  location: <T = LocationPromise>() => T;
}

export interface SessionConnection {
  pageInfo: PageInfo;
  edges: SessionEdge[];
}

export interface SessionConnectionPromise
  extends Promise<SessionConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<SessionEdge>>() => T;
  aggregate: <T = AggregateSessionPromise>() => T;
}

export interface SessionConnectionSubscription
  extends Promise<AsyncIterator<SessionConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<SessionEdgeSubscription>>>() => T;
  aggregate: <T = AggregateSessionSubscription>() => T;
}

export interface AggregateLocation {
  count: Int;
}

export interface AggregateLocationPromise
  extends Promise<AggregateLocation>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateLocationSubscription
  extends Promise<AsyncIterator<AggregateLocation>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Profile {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt?: DateTimeOutput;
  name: String;
  timezone?: String;
  status?: String;
  picture: String;
}

export interface ProfilePromise extends Promise<Profile>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  name: () => Promise<String>;
  timezone: () => Promise<String>;
  status: () => Promise<String>;
  picture: () => Promise<String>;
  memberships: <T = FragmentableArray<Membership>>(args?: {
    where?: MembershipWhereInput;
    orderBy?: MembershipOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  location: <T = LocationPromise>() => T;
}

export interface ProfileSubscription
  extends Promise<AsyncIterator<Profile>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  name: () => Promise<AsyncIterator<String>>;
  timezone: () => Promise<AsyncIterator<String>>;
  status: () => Promise<AsyncIterator<String>>;
  picture: () => Promise<AsyncIterator<String>>;
  memberships: <T = Promise<AsyncIterator<MembershipSubscription>>>(args?: {
    where?: MembershipWhereInput;
    orderBy?: MembershipOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  location: <T = LocationSubscription>() => T;
}

export interface ProfileNullablePromise
  extends Promise<Profile | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  name: () => Promise<String>;
  timezone: () => Promise<String>;
  status: () => Promise<String>;
  picture: () => Promise<String>;
  memberships: <T = FragmentableArray<Membership>>(args?: {
    where?: MembershipWhereInput;
    orderBy?: MembershipOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  location: <T = LocationPromise>() => T;
}

export interface ProfileConnection {
  pageInfo: PageInfo;
  edges: ProfileEdge[];
}

export interface ProfileConnectionPromise
  extends Promise<ProfileConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ProfileEdge>>() => T;
  aggregate: <T = AggregateProfilePromise>() => T;
}

export interface ProfileConnectionSubscription
  extends Promise<AsyncIterator<ProfileConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ProfileEdgeSubscription>>>() => T;
  aggregate: <T = AggregateProfileSubscription>() => T;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point).
*/
export type Float = number;

export type Long = string;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

export type Json = any;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "User",
    embedded: false
  },
  {
    name: "Session",
    embedded: false
  },
  {
    name: "Profile",
    embedded: false
  },
  {
    name: "Membership",
    embedded: false
  },
  {
    name: "Group",
    embedded: false
  },
  {
    name: "GroupType",
    embedded: false
  },
  {
    name: "Location",
    embedded: false
  },
  {
    name: "Message",
    embedded: false
  },
  {
    name: "MessageType",
    embedded: false
  },
  {
    name: "Reaction",
    embedded: false
  },
  {
    name: "Attachment",
    embedded: false
  },
  {
    name: "AttachmentType",
    embedded: false
  },
  {
    name: "Asset",
    embedded: false
  },
  {
    name: "Exchange",
    embedded: false
  },
  {
    name: "TransactionDirection",
    embedded: false
  },
  {
    name: "Transaction",
    embedded: false
  },
  {
    name: "Portfolio",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const Prisma = makePrismaClientClass<ClientConstructor<Prisma>>({
  typeDefs,
  models,
  endpoint: `http://localhost:4466/AbisStarterkit/dev`
});
export const prisma = new Prisma();
