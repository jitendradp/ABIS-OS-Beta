scalar Json

type AccountInformation {
    id: String!
    createdAt: String!
    firstName: String!
    lastName: String!
}

type Profile {
    id: String!
    createdAt: String!
    updatedAt: String
    type:ProfileType!
    name: String!
    timezone: String
    status: String
    picture: String!
    memberships: [Membership!]
    location: Location
}

enum ProfileType {
	Work											        # A work profile costs a monthly licensing fee
	Private					    							# A private profile is free of charge
}

type Location {
    id: String!
    createdAt: String!
    updatedAt: String
    creator: Profile!
    name: String
    latitude: Float!
    longitude: Float!
    radius: Float
}

type Group {
    id:String!
    createdAt: String!
    updatedAt: String
    name:String
    title:String!
    description:String
    logo:String
    type: GroupType!
    tags: [Tag!]
    creator:Profile!
    members: [Membership!]
    is_hidden:Boolean
    is_public:Boolean
}

type Message {
    id: String!
    type: MessageType!
    createdAt: String!
    updatedAt: String
    creator: Profile!
    subject: String
    content: Json
    tags: [Tag!]
    group: Group!
}

type Tag {
   	id: ID!
   	createdAt: String!
	creator: Profile!
   	name: String!
   	parent: Tag
}

# All data exchanged is expressed as an "event"
enum MessageType {
	NOTIFICATION											# A prominent information that is pushed to the account
	DIRECT_MESSAGE											# The account profiles receives a direct chat message
	COMMENT												    # A message as comment on another message within a thread
	POST												    # Drops a message on a channel
}

enum GroupType {
	ROOM					    							# A chat room that hosts a group of people and conversations
    CHANNEL                                                 # Groups messages and events around at least two profiles
	THREAD												    # Groups messages around a specific conversation in a channel
	FRIENDS												    # Groups friends of a profile
}

type Membership {
    id: String!
    createdAt: String!
    updatedAt: String
    creator: Profile!
    member: Profile!
    group: Group!
}

type Mutation {
    signup(firstName:String! lastName:String! email:String! password:String!) : String
    verifyEmail(code:String!) : String
    verifySession(csrfToken:String!) : Boolean
    createProfile(csrfToken:String! type:ProfileType! name:String! picture:String timezone:String) : String
    updateProfile(csrfToken:String! profileId:String! type:ProfileType! name:String! picture:String timezone:String status:String) : String
    createGroup(csrfToken:String! hostProfileId: String! type:GroupType! name:String! title:String! description:String logo:String tags:String) : String
    updateGroup(csrfToken:String! workspaceId: String! type:GroupType! name:String! title:String! description:String logo:String tags:String isHidden:Boolean isPublic:Boolean) : String
    addMember(csrfToken:String! groupId:String! memberProfileId:String!) : String
    removeMember(csrfToken:String! groupId:String! memberProfileId:String!) : String
    postMessage(csrfToken:String! groupId:String! subject:String! content:String!) : String

    login(email:String! password:String!) : String
    logout(csrfToken:String!) : Boolean

    setSessionProfile(csrfToken:String! profileId:String!) : String
}

type Query {
    myGroups(csrfToken:String!):[Group!]!
    myMemberships(csrfToken:String!):[Membership!]!
    getSessionProfile(csrfToken:String!):Profile
    getAccountInformation(csrfToken:String!):AccountInformation
    listProfiles(csrfToken:String!): [Profile!]!
    listGroups(csrfToken:String! profileId:String!): [Group!]!
    listMemberships(csrfToken:String! profileId:String!): [Membership!]!
    listMembers(csrfToken:String! groupId:String!):[Membership!]!
    listMessages(csrfToken:String! groupId:String! profileId:String! begin:String end:String):[Message!]!
    getProfile(csrfToken:String! profileId:String!):Profile
    getGroup(csrfToken:String! groupId:String!):Group
}
